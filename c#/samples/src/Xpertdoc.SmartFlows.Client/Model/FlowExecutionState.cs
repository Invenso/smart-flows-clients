/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// FlowExecutionState
    /// </summary>
    [DataContract]
    public partial class FlowExecutionState :  IEquatable<FlowExecutionState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowExecutionState" /> class.
        /// </summary>
        /// <param name="InputData">InputData.</param>
        /// <param name="Output">Output.</param>
        /// <param name="Stages">Stages.</param>
        /// <param name="Iterations">if the input supports multiple iterations, these are the iterations.</param>
        /// <param name="Report">if the input supports multiple iterations, but groupToSingleDocument is enabled, these are the post processing zones. If the input does not support multiple iterations, these are the flow zones.</param>
        /// <param name="WaitingFor">WaitingFor.</param>
        public FlowExecutionState(IdWithName InputData = default(IdWithName), FlowExecutionStateOutput Output = default(FlowExecutionStateOutput), List<FlowExecutionStage> Stages = default(List<FlowExecutionStage>), List<FlowExecutionIteration> Iterations = default(List<FlowExecutionIteration>), List<FlowZoneState> Report = default(List<FlowZoneState>), string WaitingFor = default(string))
        {
            this.InputData = InputData;
            this.Output = Output;
            this.Stages = Stages;
            this.Iterations = Iterations;
            this.Report = Report;
            this.WaitingFor = WaitingFor;
        }
        
        /// <summary>
        /// Gets or Sets InputData
        /// </summary>
        [DataMember(Name="inputData", EmitDefaultValue=false)]
        public IdWithName InputData { get; set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public FlowExecutionStateOutput Output { get; set; }

        /// <summary>
        /// Gets or Sets Stages
        /// </summary>
        [DataMember(Name="stages", EmitDefaultValue=false)]
        public List<FlowExecutionStage> Stages { get; set; }

        /// <summary>
        /// if the input supports multiple iterations, these are the iterations
        /// </summary>
        /// <value>if the input supports multiple iterations, these are the iterations</value>
        [DataMember(Name="iterations", EmitDefaultValue=false)]
        public List<FlowExecutionIteration> Iterations { get; set; }

        /// <summary>
        /// if the input supports multiple iterations, but groupToSingleDocument is enabled, these are the post processing zones. If the input does not support multiple iterations, these are the flow zones
        /// </summary>
        /// <value>if the input supports multiple iterations, but groupToSingleDocument is enabled, these are the post processing zones. If the input does not support multiple iterations, these are the flow zones</value>
        [DataMember(Name="report", EmitDefaultValue=false)]
        public List<FlowZoneState> Report { get; set; }

        /// <summary>
        /// Gets or Sets WaitingFor
        /// </summary>
        [DataMember(Name="waitingFor", EmitDefaultValue=false)]
        public string WaitingFor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowExecutionState {\n");
            sb.Append("  InputData: ").Append(InputData).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Stages: ").Append(Stages).Append("\n");
            sb.Append("  Iterations: ").Append(Iterations).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  WaitingFor: ").Append(WaitingFor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlowExecutionState);
        }

        /// <summary>
        /// Returns true if FlowExecutionState instances are equal
        /// </summary>
        /// <param name="other">Instance of FlowExecutionState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowExecutionState other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InputData == other.InputData ||
                    this.InputData != null &&
                    this.InputData.Equals(other.InputData)
                ) && 
                (
                    this.Output == other.Output ||
                    this.Output != null &&
                    this.Output.Equals(other.Output)
                ) && 
                (
                    this.Stages == other.Stages ||
                    this.Stages != null &&
                    this.Stages.SequenceEqual(other.Stages)
                ) && 
                (
                    this.Iterations == other.Iterations ||
                    this.Iterations != null &&
                    this.Iterations.SequenceEqual(other.Iterations)
                ) && 
                (
                    this.Report == other.Report ||
                    this.Report != null &&
                    this.Report.SequenceEqual(other.Report)
                ) && 
                (
                    this.WaitingFor == other.WaitingFor ||
                    this.WaitingFor != null &&
                    this.WaitingFor.Equals(other.WaitingFor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InputData != null)
                    hash = hash * 59 + this.InputData.GetHashCode();
                if (this.Output != null)
                    hash = hash * 59 + this.Output.GetHashCode();
                if (this.Stages != null)
                    hash = hash * 59 + this.Stages.GetHashCode();
                if (this.Iterations != null)
                    hash = hash * 59 + this.Iterations.GetHashCode();
                if (this.Report != null)
                    hash = hash * 59 + this.Report.GetHashCode();
                if (this.WaitingFor != null)
                    hash = hash * 59 + this.WaitingFor.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
