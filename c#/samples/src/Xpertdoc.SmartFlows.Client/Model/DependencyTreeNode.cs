/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// DependencyTreeNode
    /// </summary>
    [DataContract]
    public partial class DependencyTreeNode :  IEquatable<DependencyTreeNode>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Loaded
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoadedEnum
        {
            
            /// <summary>
            /// Enum Eager for "eager"
            /// </summary>
            [EnumMember(Value = "eager")]
            Eager,
            
            /// <summary>
            /// Enum Lazy for "lazy"
            /// </summary>
            [EnumMember(Value = "lazy")]
            Lazy
        }

        /// <summary>
        /// Gets or Sets Loaded
        /// </summary>
        [DataMember(Name="loaded", EmitDefaultValue=false)]
        public LoadedEnum? Loaded { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyTreeNode" /> class.
        /// </summary>
        /// <param name="Target">Target.</param>
        /// <param name="Loaded">Loaded (default to LoadedEnum.Lazy).</param>
        /// <param name="Children">Children.</param>
        public DependencyTreeNode(IdWithName Target = default(IdWithName), LoadedEnum? Loaded = LoadedEnum.Lazy, List<DependencyTreeNode> Children = default(List<DependencyTreeNode>))
        {
            this.Target = Target;
            // use default value if no "Loaded" provided
            if (Loaded == null)
            {
                this.Loaded = LoadedEnum.Lazy;
            }
            else
            {
                this.Loaded = Loaded;
            }
            this.Children = Children;
        }
        
        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public IdWithName Target { get; set; }


        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<DependencyTreeNode> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DependencyTreeNode {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Loaded: ").Append(Loaded).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DependencyTreeNode);
        }

        /// <summary>
        /// Returns true if DependencyTreeNode instances are equal
        /// </summary>
        /// <param name="other">Instance of DependencyTreeNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DependencyTreeNode other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.Equals(other.Target)
                ) && 
                (
                    this.Loaded == other.Loaded ||
                    this.Loaded != null &&
                    this.Loaded.Equals(other.Loaded)
                ) && 
                (
                    this.Children == other.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(other.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                if (this.Loaded != null)
                    hash = hash * 59 + this.Loaded.GetHashCode();
                if (this.Children != null)
                    hash = hash * 59 + this.Children.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
