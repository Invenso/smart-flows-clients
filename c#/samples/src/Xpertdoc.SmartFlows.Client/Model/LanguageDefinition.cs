/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// LanguageDefinition
    /// </summary>
    [DataContract]
    public partial class LanguageDefinition :  IEquatable<LanguageDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LanguageDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageDefinition" /> class.
        /// </summary>
        /// <param name="Id">The language code (required).</param>
        /// <param name="DisplayName">DisplayName (required).</param>
        /// <param name="DisplayCountry">DisplayCountry.</param>
        /// <param name="DisplayLanguage">DisplayLanguage.</param>
        /// <param name="IsSystem">IsSystem (default to false).</param>
        /// <param name="DateTimeFormats">DateTimeFormats.</param>
        /// <param name="PeriodFormats">PeriodFormats.</param>
        /// <param name="NumberFormat">NumberFormat.</param>
        public LanguageDefinition(string Id = default(string), string DisplayName = default(string), string DisplayCountry = default(string), string DisplayLanguage = default(string), bool? IsSystem = false, LanguageDefinitionDateTimeFormats DateTimeFormats = default(LanguageDefinitionDateTimeFormats), List<FormatDefinition> PeriodFormats = default(List<FormatDefinition>), LanguageDefinitionNumberFormat NumberFormat = default(LanguageDefinitionNumberFormat))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for LanguageDefinition and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "DisplayName" is required (not null)
            if (DisplayName == null)
            {
                throw new InvalidDataException("DisplayName is a required property for LanguageDefinition and cannot be null");
            }
            else
            {
                this.DisplayName = DisplayName;
            }
            this.DisplayCountry = DisplayCountry;
            this.DisplayLanguage = DisplayLanguage;
            // use default value if no "IsSystem" provided
            if (IsSystem == null)
            {
                this.IsSystem = false;
            }
            else
            {
                this.IsSystem = IsSystem;
            }
            this.DateTimeFormats = DateTimeFormats;
            this.PeriodFormats = PeriodFormats;
            this.NumberFormat = NumberFormat;
        }
        
        /// <summary>
        /// The language code
        /// </summary>
        /// <value>The language code</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayCountry
        /// </summary>
        [DataMember(Name="displayCountry", EmitDefaultValue=false)]
        public string DisplayCountry { get; set; }

        /// <summary>
        /// Gets or Sets DisplayLanguage
        /// </summary>
        [DataMember(Name="displayLanguage", EmitDefaultValue=false)]
        public string DisplayLanguage { get; set; }

        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name="isSystem", EmitDefaultValue=false)]
        public bool? IsSystem { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeFormats
        /// </summary>
        [DataMember(Name="dateTimeFormats", EmitDefaultValue=false)]
        public LanguageDefinitionDateTimeFormats DateTimeFormats { get; set; }

        /// <summary>
        /// Gets or Sets PeriodFormats
        /// </summary>
        [DataMember(Name="periodFormats", EmitDefaultValue=false)]
        public List<FormatDefinition> PeriodFormats { get; set; }

        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name="numberFormat", EmitDefaultValue=false)]
        public LanguageDefinitionNumberFormat NumberFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LanguageDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayCountry: ").Append(DisplayCountry).Append("\n");
            sb.Append("  DisplayLanguage: ").Append(DisplayLanguage).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  DateTimeFormats: ").Append(DateTimeFormats).Append("\n");
            sb.Append("  PeriodFormats: ").Append(PeriodFormats).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LanguageDefinition);
        }

        /// <summary>
        /// Returns true if LanguageDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of LanguageDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LanguageDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.DisplayCountry == other.DisplayCountry ||
                    this.DisplayCountry != null &&
                    this.DisplayCountry.Equals(other.DisplayCountry)
                ) && 
                (
                    this.DisplayLanguage == other.DisplayLanguage ||
                    this.DisplayLanguage != null &&
                    this.DisplayLanguage.Equals(other.DisplayLanguage)
                ) && 
                (
                    this.IsSystem == other.IsSystem ||
                    this.IsSystem != null &&
                    this.IsSystem.Equals(other.IsSystem)
                ) && 
                (
                    this.DateTimeFormats == other.DateTimeFormats ||
                    this.DateTimeFormats != null &&
                    this.DateTimeFormats.Equals(other.DateTimeFormats)
                ) && 
                (
                    this.PeriodFormats == other.PeriodFormats ||
                    this.PeriodFormats != null &&
                    this.PeriodFormats.SequenceEqual(other.PeriodFormats)
                ) && 
                (
                    this.NumberFormat == other.NumberFormat ||
                    this.NumberFormat != null &&
                    this.NumberFormat.Equals(other.NumberFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.DisplayCountry != null)
                    hash = hash * 59 + this.DisplayCountry.GetHashCode();
                if (this.DisplayLanguage != null)
                    hash = hash * 59 + this.DisplayLanguage.GetHashCode();
                if (this.IsSystem != null)
                    hash = hash * 59 + this.IsSystem.GetHashCode();
                if (this.DateTimeFormats != null)
                    hash = hash * 59 + this.DateTimeFormats.GetHashCode();
                if (this.PeriodFormats != null)
                    hash = hash * 59 + this.PeriodFormats.GetHashCode();
                if (this.NumberFormat != null)
                    hash = hash * 59 + this.NumberFormat.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
