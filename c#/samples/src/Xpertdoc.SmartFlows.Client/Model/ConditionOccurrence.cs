/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// ConditionOccurrence
    /// </summary>
    [DataContract]
    public partial class ConditionOccurrence :  IEquatable<ConditionOccurrence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionOccurrence" /> class.
        /// </summary>
        /// <param name="EmptyElementsAreNoneExistant">EmptyElementsAreNoneExistant (default to false).</param>
        /// <param name="Value">Value.</param>
        /// <param name="OccurrenceCount">OccurrenceCount.</param>
        public ConditionOccurrence(bool? EmptyElementsAreNoneExistant = false, ConditionValue Value = default(ConditionValue), NumberCondition OccurrenceCount = default(NumberCondition))
        {
            // use default value if no "EmptyElementsAreNoneExistant" provided
            if (EmptyElementsAreNoneExistant == null)
            {
                this.EmptyElementsAreNoneExistant = false;
            }
            else
            {
                this.EmptyElementsAreNoneExistant = EmptyElementsAreNoneExistant;
            }
            this.Value = Value;
            this.OccurrenceCount = OccurrenceCount;
        }
        
        /// <summary>
        /// Gets or Sets EmptyElementsAreNoneExistant
        /// </summary>
        [DataMember(Name="emptyElementsAreNoneExistant", EmitDefaultValue=false)]
        public bool? EmptyElementsAreNoneExistant { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public ConditionValue Value { get; set; }

        /// <summary>
        /// Gets or Sets OccurrenceCount
        /// </summary>
        [DataMember(Name="occurrenceCount", EmitDefaultValue=false)]
        public NumberCondition OccurrenceCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionOccurrence {\n");
            sb.Append("  EmptyElementsAreNoneExistant: ").Append(EmptyElementsAreNoneExistant).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OccurrenceCount: ").Append(OccurrenceCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConditionOccurrence);
        }

        /// <summary>
        /// Returns true if ConditionOccurrence instances are equal
        /// </summary>
        /// <param name="other">Instance of ConditionOccurrence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionOccurrence other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EmptyElementsAreNoneExistant == other.EmptyElementsAreNoneExistant ||
                    this.EmptyElementsAreNoneExistant != null &&
                    this.EmptyElementsAreNoneExistant.Equals(other.EmptyElementsAreNoneExistant)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.OccurrenceCount == other.OccurrenceCount ||
                    this.OccurrenceCount != null &&
                    this.OccurrenceCount.Equals(other.OccurrenceCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EmptyElementsAreNoneExistant != null)
                    hash = hash * 59 + this.EmptyElementsAreNoneExistant.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.OccurrenceCount != null)
                    hash = hash * 59 + this.OccurrenceCount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
