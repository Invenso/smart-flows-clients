/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// RestoreContext
    /// </summary>
    [DataContract]
    public partial class RestoreContext :  IEquatable<RestoreContext>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets IncludeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludeTypeEnum
        {
            
            /// <summary>
            /// Enum All for "all"
            /// </summary>
            [EnumMember(Value = "all")]
            All,
            
            /// <summary>
            /// Enum Listed for "listed"
            /// </summary>
            [EnumMember(Value = "listed")]
            Listed,
            
            /// <summary>
            /// Enum AllButListed for "allButListed"
            /// </summary>
            [EnumMember(Value = "allButListed")]
            AllButListed
        }

        /// <summary>
        /// Gets or Sets IncludeType
        /// </summary>
        [DataMember(Name="includeType", EmitDefaultValue=false)]
        public IncludeTypeEnum? IncludeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestoreContext" /> class.
        /// </summary>
        /// <param name="Archive">Archive.</param>
        /// <param name="DependenciesMap">DependenciesMap.</param>
        /// <param name="OverwriteExisting">OverwriteExisting (default to false).</param>
        /// <param name="IncludeType">IncludeType (default to IncludeTypeEnum.All).</param>
        /// <param name="ListedItems">ListedItems.</param>
        public RestoreContext(byte[] Archive = default(byte[]), List<DependencyMapping> DependenciesMap = default(List<DependencyMapping>), bool? OverwriteExisting = false, IncludeTypeEnum? IncludeType = IncludeTypeEnum.All, List<IdWithName> ListedItems = default(List<IdWithName>))
        {
            this.Archive = Archive;
            this.DependenciesMap = DependenciesMap;
            // use default value if no "OverwriteExisting" provided
            if (OverwriteExisting == null)
            {
                this.OverwriteExisting = false;
            }
            else
            {
                this.OverwriteExisting = OverwriteExisting;
            }
            // use default value if no "IncludeType" provided
            if (IncludeType == null)
            {
                this.IncludeType = IncludeTypeEnum.All;
            }
            else
            {
                this.IncludeType = IncludeType;
            }
            this.ListedItems = ListedItems;
        }
        
        /// <summary>
        /// Gets or Sets Archive
        /// </summary>
        [DataMember(Name="archive", EmitDefaultValue=false)]
        public byte[] Archive { get; set; }

        /// <summary>
        /// Gets or Sets DependenciesMap
        /// </summary>
        [DataMember(Name="dependenciesMap", EmitDefaultValue=false)]
        public List<DependencyMapping> DependenciesMap { get; set; }

        /// <summary>
        /// Gets or Sets OverwriteExisting
        /// </summary>
        [DataMember(Name="overwriteExisting", EmitDefaultValue=false)]
        public bool? OverwriteExisting { get; set; }


        /// <summary>
        /// Gets or Sets ListedItems
        /// </summary>
        [DataMember(Name="listedItems", EmitDefaultValue=false)]
        public List<IdWithName> ListedItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestoreContext {\n");
            sb.Append("  Archive: ").Append(Archive).Append("\n");
            sb.Append("  DependenciesMap: ").Append(DependenciesMap).Append("\n");
            sb.Append("  OverwriteExisting: ").Append(OverwriteExisting).Append("\n");
            sb.Append("  IncludeType: ").Append(IncludeType).Append("\n");
            sb.Append("  ListedItems: ").Append(ListedItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RestoreContext);
        }

        /// <summary>
        /// Returns true if RestoreContext instances are equal
        /// </summary>
        /// <param name="other">Instance of RestoreContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestoreContext other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Archive == other.Archive ||
                    this.Archive != null &&
                    this.Archive.Equals(other.Archive)
                ) && 
                (
                    this.DependenciesMap == other.DependenciesMap ||
                    this.DependenciesMap != null &&
                    this.DependenciesMap.SequenceEqual(other.DependenciesMap)
                ) && 
                (
                    this.OverwriteExisting == other.OverwriteExisting ||
                    this.OverwriteExisting != null &&
                    this.OverwriteExisting.Equals(other.OverwriteExisting)
                ) && 
                (
                    this.IncludeType == other.IncludeType ||
                    this.IncludeType != null &&
                    this.IncludeType.Equals(other.IncludeType)
                ) && 
                (
                    this.ListedItems == other.ListedItems ||
                    this.ListedItems != null &&
                    this.ListedItems.SequenceEqual(other.ListedItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Archive != null)
                    hash = hash * 59 + this.Archive.GetHashCode();
                if (this.DependenciesMap != null)
                    hash = hash * 59 + this.DependenciesMap.GetHashCode();
                if (this.OverwriteExisting != null)
                    hash = hash * 59 + this.OverwriteExisting.GetHashCode();
                if (this.IncludeType != null)
                    hash = hash * 59 + this.IncludeType.GetHashCode();
                if (this.ListedItems != null)
                    hash = hash * 59 + this.ListedItems.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
