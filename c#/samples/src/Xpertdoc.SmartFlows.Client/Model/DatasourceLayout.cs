/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// DatasourceLayout
    /// </summary>
    [DataContract]
    public partial class DatasourceLayout :  IEquatable<DatasourceLayout>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Hierarchical for "hierarchical"
            /// </summary>
            [EnumMember(Value = "hierarchical")]
            Hierarchical,
            
            /// <summary>
            /// Enum Relational for "relational"
            /// </summary>
            [EnumMember(Value = "relational")]
            Relational
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourceLayout" /> class.
        /// </summary>
        /// <param name="DatasourceType">DatasourceType.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Entities">Entities.</param>
        public DatasourceLayout(IdWithName DatasourceType = default(IdWithName), TypeEnum? Type = default(TypeEnum?), List<EntityDefinition> Entities = default(List<EntityDefinition>))
        {
            this.DatasourceType = DatasourceType;
            this.Type = Type;
            this.Entities = Entities;
        }
        
        /// <summary>
        /// Gets or Sets DatasourceType
        /// </summary>
        [DataMember(Name="datasourceType", EmitDefaultValue=false)]
        public IdWithName DatasourceType { get; set; }


        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name="entities", EmitDefaultValue=false)]
        public List<EntityDefinition> Entities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatasourceLayout {\n");
            sb.Append("  DatasourceType: ").Append(DatasourceType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DatasourceLayout);
        }

        /// <summary>
        /// Returns true if DatasourceLayout instances are equal
        /// </summary>
        /// <param name="other">Instance of DatasourceLayout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatasourceLayout other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DatasourceType == other.DatasourceType ||
                    this.DatasourceType != null &&
                    this.DatasourceType.Equals(other.DatasourceType)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Entities == other.Entities ||
                    this.Entities != null &&
                    this.Entities.SequenceEqual(other.Entities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DatasourceType != null)
                    hash = hash * 59 + this.DatasourceType.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Entities != null)
                    hash = hash * 59 + this.Entities.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
