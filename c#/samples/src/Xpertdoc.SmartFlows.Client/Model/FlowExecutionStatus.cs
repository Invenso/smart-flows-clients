/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// Defines flowExecutionStatus
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FlowExecutionStatus
    {
        
        /// <summary>
        /// Enum Queued for "Queued"
        /// </summary>
        [EnumMember(Value = "Queued")]
        Queued,
        
        /// <summary>
        /// Enum Running for "Running"
        /// </summary>
        [EnumMember(Value = "Running")]
        Running,
        
        /// <summary>
        /// Enum Waiting for "Waiting"
        /// </summary>
        [EnumMember(Value = "Waiting")]
        Waiting,
        
        /// <summary>
        /// Enum UserInput for "UserInput"
        /// </summary>
        [EnumMember(Value = "UserInput")]
        UserInput,
        
        /// <summary>
        /// Enum Success for "Success"
        /// </summary>
        [EnumMember(Value = "Success")]
        Success,
        
        /// <summary>
        /// Enum Error for "Error"
        /// </summary>
        [EnumMember(Value = "Error")]
        Error,
        
        /// <summary>
        /// Enum Canceled for "Canceled"
        /// </summary>
        [EnumMember(Value = "Canceled")]
        Canceled,
        
        /// <summary>
        /// Enum SelectFlow for "SelectFlow"
        /// </summary>
        [EnumMember(Value = "SelectFlow")]
        SelectFlow,
        
        /// <summary>
        /// Enum Interrupted for "Interrupted"
        /// </summary>
        [EnumMember(Value = "Interrupted")]
        Interrupted
    }

}
