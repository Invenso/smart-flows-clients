/* 
 * Xpertdoc SmartFlows
 *
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Client.Model
{
    /// <summary>
    /// DatasetContent
    /// </summary>
    [DataContract]
    public partial class DatasetContent :  IEquatable<DatasetContent>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Standard for "standard"
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard,
            
            /// <summary>
            /// Enum Custom for "custom"
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom,
            
            /// <summary>
            /// Enum Schema for "schema"
            /// </summary>
            [EnumMember(Value = "schema")]
            Schema,
            
            /// <summary>
            /// Enum Extended for "extended"
            /// </summary>
            [EnumMember(Value = "extended")]
            Extended
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetContent" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="StandardContent">StandardContent.</param>
        /// <param name="CustomContent">CustomContent.</param>
        /// <param name="SchemaContent">SchemaContent.</param>
        /// <param name="ExtendedContent">ExtendedContent.</param>
        public DatasetContent(TypeEnum? Type = default(TypeEnum?), DatasetStandardContent StandardContent = default(DatasetStandardContent), DatasetCustomContent CustomContent = default(DatasetCustomContent), DatasetSchemaContent SchemaContent = default(DatasetSchemaContent), DatasetExtendedContent ExtendedContent = default(DatasetExtendedContent))
        {
            this.Type = Type;
            this.StandardContent = StandardContent;
            this.CustomContent = CustomContent;
            this.SchemaContent = SchemaContent;
            this.ExtendedContent = ExtendedContent;
        }
        

        /// <summary>
        /// Gets or Sets StandardContent
        /// </summary>
        [DataMember(Name="standardContent", EmitDefaultValue=false)]
        public DatasetStandardContent StandardContent { get; set; }

        /// <summary>
        /// Gets or Sets CustomContent
        /// </summary>
        [DataMember(Name="customContent", EmitDefaultValue=false)]
        public DatasetCustomContent CustomContent { get; set; }

        /// <summary>
        /// Gets or Sets SchemaContent
        /// </summary>
        [DataMember(Name="schemaContent", EmitDefaultValue=false)]
        public DatasetSchemaContent SchemaContent { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedContent
        /// </summary>
        [DataMember(Name="extendedContent", EmitDefaultValue=false)]
        public DatasetExtendedContent ExtendedContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatasetContent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StandardContent: ").Append(StandardContent).Append("\n");
            sb.Append("  CustomContent: ").Append(CustomContent).Append("\n");
            sb.Append("  SchemaContent: ").Append(SchemaContent).Append("\n");
            sb.Append("  ExtendedContent: ").Append(ExtendedContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DatasetContent);
        }

        /// <summary>
        /// Returns true if DatasetContent instances are equal
        /// </summary>
        /// <param name="other">Instance of DatasetContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatasetContent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.StandardContent == other.StandardContent ||
                    this.StandardContent != null &&
                    this.StandardContent.Equals(other.StandardContent)
                ) && 
                (
                    this.CustomContent == other.CustomContent ||
                    this.CustomContent != null &&
                    this.CustomContent.Equals(other.CustomContent)
                ) && 
                (
                    this.SchemaContent == other.SchemaContent ||
                    this.SchemaContent != null &&
                    this.SchemaContent.Equals(other.SchemaContent)
                ) && 
                (
                    this.ExtendedContent == other.ExtendedContent ||
                    this.ExtendedContent != null &&
                    this.ExtendedContent.Equals(other.ExtendedContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.StandardContent != null)
                    hash = hash * 59 + this.StandardContent.GetHashCode();
                if (this.CustomContent != null)
                    hash = hash * 59 + this.CustomContent.GetHashCode();
                if (this.SchemaContent != null)
                    hash = hash * 59 + this.SchemaContent.GetHashCode();
                if (this.ExtendedContent != null)
                    hash = hash * 59 + this.ExtendedContent.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
