/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;
using Xpertdoc.SmartFlows.Api;

namespace Xpertdoc.SmartFlows.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }


        /// <summary>
        /// Test AddAsset
        /// </summary>
        [Test]
        public void AddAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BinaryDataHolder body = null;
            //var response = instance.AddAsset(body);
            //Assert.IsInstanceOf<Asset> (response, "response is Asset");
        }

        /// <summary>
        /// Test AuthenticateGet
        /// </summary>
        [Test]
        public void AuthenticateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AuthenticateGet();
            //Assert.IsInstanceOf<AuthenticationInfo> (response, "response is AuthenticationInfo");
        }

        /// <summary>
        /// Test AuthenticateLoginPost
        /// </summary>
        [Test]
        public void AuthenticateLoginPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Login body = null;
            //var response = instance.AuthenticateLoginPost(body);
            //Assert.IsInstanceOf<Authentication> (response, "response is Authentication");
        }

        /// <summary>
        /// Test AuthenticateOauth2Post
        /// </summary>
        [Test]
        public void AuthenticateOauth2PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Oauth2Parameters body = null;
            //var response = instance.AuthenticateOauth2Post(body);
            //Assert.IsInstanceOf<Authentication> (response, "response is Authentication");
        }

        /// <summary>
        /// Test CancelFlowExecution
        /// </summary>
        [Test]
        public void CancelFlowExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string execution = null;
            //var response = instance.CancelFlowExecution(execution);
            //Assert.IsInstanceOf<FlowExecutionProgress> (response, "response is FlowExecutionProgress");
        }

        /// <summary>
        /// Test ClearSubSettings
        /// </summary>
        [Test]
        public void ClearSubSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string settingsType = null;
            //instance.ClearSubSettings(settingsType);

        }

        /// <summary>
        /// Test ContinueFlowExecution
        /// </summary>
        [Test]
        public void ContinueFlowExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string execution = null;
            //Object body = null;
            //var response = instance.ContinueFlowExecution(execution, body);
            //Assert.IsInstanceOf<FlowExecutionProgress> (response, "response is FlowExecutionProgress");
        }

        /// <summary>
        /// Test CreateBackup
        /// </summary>
        [Test]
        public void CreateBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeHistory = null;
            //bool? includeSensitiveData = null;
            //var response = instance.CreateBackup(includeHistory, includeSensitiveData);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test CreateConnector
        /// </summary>
        [Test]
        public void CreateConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Connector body = null;
            //var response = instance.CreateConnector(body);
            //Assert.IsInstanceOf<Connector> (response, "response is Connector");
        }

        /// <summary>
        /// Test CreateDataset
        /// </summary>
        [Test]
        public void CreateDatasetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dataset body = null;
            //var response = instance.CreateDataset(body);
            //Assert.IsInstanceOf<Dataset> (response, "response is Dataset");
        }

        /// <summary>
        /// Test CreateDatasetData
        /// </summary>
        [Test]
        public void CreateDatasetDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasetId = null;
            //Data body = null;
            //var response = instance.CreateDatasetData(datasetId, body);
            //Assert.IsInstanceOf<Data> (response, "response is Data");
        }

        /// <summary>
        /// Test CreateDocument
        /// </summary>
        [Test]
        public void CreateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocGenSettings body = null;
            //var response = instance.CreateDocument(body);
            //Assert.IsInstanceOf<List<GeneratedDocument>> (response, "response is List<GeneratedDocument>");
        }

        /// <summary>
        /// Test CreateExport
        /// </summary>
        [Test]
        public void CreateExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ArchiveRequest body = null;
            //bool? includeHistory = null;
            //bool? includeSensitiveData = null;
            //var response = instance.CreateExport(body, includeHistory, includeSensitiveData);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test CreateFlatExport
        /// </summary>
        [Test]
        public void CreateFlatExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ArchiveRequest body = null;
            //bool? includeHistory = null;
            //bool? includeSensitiveData = null;
            //var response = instance.CreateFlatExport(body, includeHistory, includeSensitiveData);
            //Assert.IsInstanceOf<FlatArchive> (response, "response is FlatArchive");
        }

        /// <summary>
        /// Test CreateFlow
        /// </summary>
        [Test]
        public void CreateFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Flow body = null;
            //var response = instance.CreateFlow(body);
            //Assert.IsInstanceOf<Flow> (response, "response is Flow");
        }

        /// <summary>
        /// Test CreateLanguage
        /// </summary>
        [Test]
        public void CreateLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Language body = null;
            //var response = instance.CreateLanguage(body);
            //Assert.IsInstanceOf<Language> (response, "response is Language");
        }

        /// <summary>
        /// Test CreatePrinter
        /// </summary>
        [Test]
        public void CreatePrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Printer body = null;
            //var response = instance.CreatePrinter(body);
            //Assert.IsInstanceOf<Printer> (response, "response is Printer");
        }

        /// <summary>
        /// Test CreateTagGroup
        /// </summary>
        [Test]
        public void CreateTagGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TagGroup body = null;
            //var response = instance.CreateTagGroup(body);
            //Assert.IsInstanceOf<TagGroup> (response, "response is TagGroup");
        }

        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Template body = null;
            //var response = instance.CreateTemplate(body);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }

        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User body = null;
            //var response = instance.CreateUser(body);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }

        /// <summary>
        /// Test DeleteAsset
        /// </summary>
        [Test]
        public void DeleteAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //bool? deleteInbound = null;
            //instance.DeleteAsset(assetId, deleteInbound);

        }

        /// <summary>
        /// Test DeleteConnector
        /// </summary>
        [Test]
        public void DeleteConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //bool? deleteInbound = null;
            //instance.DeleteConnector(connectorId, deleteInbound);

        }

        /// <summary>
        /// Test DeleteData
        /// </summary>
        [Test]
        public void DeleteDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataId = null;
            //bool? deleteInbound = null;
            //instance.DeleteData(dataId, deleteInbound);

        }

        /// <summary>
        /// Test DeleteDataset
        /// </summary>
        [Test]
        public void DeleteDatasetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasetId = null;
            //bool? deleteInbound = null;
            //instance.DeleteDataset(datasetId, deleteInbound);

        }

        /// <summary>
        /// Test DeleteFlow
        /// </summary>
        [Test]
        public void DeleteFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //instance.DeleteFlow(flow);

        }

        /// <summary>
        /// Test DeleteLanguage
        /// </summary>
        [Test]
        public void DeleteLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //bool? force = null;
            //bool? deleteInbound = null;
            //instance.DeleteLanguage(language, force, deleteInbound);

        }

        /// <summary>
        /// Test DeletePrinter
        /// </summary>
        [Test]
        public void DeletePrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string printer = null;
            //bool? force = null;
            //bool? deleteInbound = null;
            //instance.DeletePrinter(printer, force, deleteInbound);

        }

        /// <summary>
        /// Test DeleteTagGroup
        /// </summary>
        [Test]
        public void DeleteTagGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGroupId = null;
            //bool? deleteInbound = null;
            //instance.DeleteTagGroup(tagGroupId, deleteInbound);

        }

        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Test]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //bool? deleteInbound = null;
            //instance.DeleteTemplate(templateId, deleteInbound);

        }

        /// <summary>
        /// Test DeleteTemplateContent
        /// </summary>
        [Test]
        public void DeleteTemplateContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string lang = null;
            //bool? deleteInbound = null;
            //instance.DeleteTemplateContent(templateId, lang, deleteInbound);

        }

        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string user = null;
            //bool? force = null;
            //instance.DeleteUser(user, force);

        }

        /// <summary>
        /// Test ExecuteFlatImport
        /// </summary>
        [Test]
        public void ExecuteFlatImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FlatArchive body = null;
            //instance.ExecuteFlatImport(body);

        }

        /// <summary>
        /// Test ExecuteFlow
        /// </summary>
        [Test]
        public void ExecuteFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flowId = null;
            //string datasetId = null;
            //Object body = null;
            //var response = instance.ExecuteFlow(flowId, datasetId, body);
            //Assert.IsInstanceOf<FlowExecutionProgress> (response, "response is FlowExecutionProgress");
        }

        /// <summary>
        /// Test ExecuteImport
        /// </summary>
        [Test]
        public void ExecuteImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RestoreContext body = null;
            //instance.ExecuteImport(body);

        }

        /// <summary>
        /// Test ExistsData
        /// </summary>
        [Test]
        public void ExistsDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataId = null;
            //instance.ExistsData(dataId);

        }

        /// <summary>
        /// Test GetAllFlowExecutions
        /// </summary>
        [Test]
        public void GetAllFlowExecutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetAllFlowExecutions(page, size, sort, filter);
            //Assert.IsInstanceOf<List<FlowExecution>> (response, "response is List<FlowExecution>");
        }

        /// <summary>
        /// Test GetAsset
        /// </summary>
        [Test]
        public void GetAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //bool? includeContent = null;
            //var response = instance.GetAsset(assetId, includeContent);
            //Assert.IsInstanceOf<Asset> (response, "response is Asset");
        }

        /// <summary>
        /// Test GetAssetContent
        /// </summary>
        [Test]
        public void GetAssetContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //instance.GetAssetContent(assetId);

        }

        /// <summary>
        /// Test GetAssets
        /// </summary>
        [Test]
        public void GetAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetAssets(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Asset>> (response, "response is List<Asset>");
        }

        /// <summary>
        /// Test GetConnector
        /// </summary>
        [Test]
        public void GetConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //var response = instance.GetConnector(connectorId);
            //Assert.IsInstanceOf<Connector> (response, "response is Connector");
        }

        /// <summary>
        /// Test GetConnectorType
        /// </summary>
        [Test]
        public void GetConnectorTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorTypeId = null;
            //var response = instance.GetConnectorType(connectorTypeId);
            //Assert.IsInstanceOf<ConnectorType> (response, "response is ConnectorType");
        }

        /// <summary>
        /// Test GetConnectorTypes
        /// </summary>
        [Test]
        public void GetConnectorTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetConnectorTypes();
            //Assert.IsInstanceOf<List<ConnectorType>> (response, "response is List<ConnectorType>");
        }

        /// <summary>
        /// Test GetConnectors
        /// </summary>
        [Test]
        public void GetConnectorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetConnectors(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Connector>> (response, "response is List<Connector>");
        }

        /// <summary>
        /// Test GetCurrentUser
        /// </summary>
        [Test]
        public void GetCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentUser();
            //Assert.IsInstanceOf<User> (response, "response is User");
        }

        /// <summary>
        /// Test GetData
        /// </summary>
        [Test]
        public void GetDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataId = null;
            //var response = instance.GetData(dataId);
            //Assert.IsInstanceOf<Data> (response, "response is Data");
        }

        /// <summary>
        /// Test GetDataContent
        /// </summary>
        [Test]
        public void GetDataContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataId = null;
            //var response = instance.GetDataContent(dataId);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test GetDataMetadata
        /// </summary>
        [Test]
        public void GetDataMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateName = null;
            //string projectName = null;
            //string creator = null;
            //var response = instance.GetDataMetadata(templateName, projectName, creator);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test GetDataPreview
        /// </summary>
        [Test]
        public void GetDataPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataId = null;
            //var response = instance.GetDataPreview(dataId);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test GetDataset
        /// </summary>
        [Test]
        public void GetDatasetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasetId = null;
            //var response = instance.GetDataset(datasetId);
            //Assert.IsInstanceOf<Dataset> (response, "response is Dataset");
        }

        /// <summary>
        /// Test GetDatasetDatas
        /// </summary>
        [Test]
        public void GetDatasetDatasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasetId = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetDatasetDatas(datasetId, page, size, sort, filter);
            //Assert.IsInstanceOf<List<Data>> (response, "response is List<Data>");
        }

        /// <summary>
        /// Test GetDatasetEntityReferences
        /// </summary>
        [Test]
        public void GetDatasetEntityReferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasetId = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetDatasetEntityReferences(datasetId, page, size, sort, filter);
            //Assert.IsInstanceOf<List<IdWithName>> (response, "response is List<IdWithName>");
        }

        /// <summary>
        /// Test GetDatasetLayout
        /// </summary>
        [Test]
        public void GetDatasetLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dataset body = null;
            //bool? primaryOnly = null;
            //var response = instance.GetDatasetLayout(body, primaryOnly);
            //Assert.IsInstanceOf<List<EntityDefinition>> (response, "response is List<EntityDefinition>");
        }

        /// <summary>
        /// Test GetDatasets
        /// </summary>
        [Test]
        public void GetDatasetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetDatasets(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Dataset>> (response, "response is List<Dataset>");
        }

        /// <summary>
        /// Test GetDatasource
        /// </summary>
        [Test]
        public void GetDatasourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasourceId = null;
            //var response = instance.GetDatasource(datasourceId);
            //Assert.IsInstanceOf<Datasource> (response, "response is Datasource");
        }

        /// <summary>
        /// Test GetDatasourceEntityLayout
        /// </summary>
        [Test]
        public void GetDatasourceEntityLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasourceId = null;
            //string entityName = null;
            //var response = instance.GetDatasourceEntityLayout(datasourceId, entityName);
            //Assert.IsInstanceOf<EntityDefinition> (response, "response is EntityDefinition");
        }

        /// <summary>
        /// Test GetDatasourceLayout
        /// </summary>
        [Test]
        public void GetDatasourceLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasourceId = null;
            //bool? full = null;
            //var response = instance.GetDatasourceLayout(datasourceId, full);
            //Assert.IsInstanceOf<DatasourceLayout> (response, "response is DatasourceLayout");
        }

        /// <summary>
        /// Test GetDatasourceType
        /// </summary>
        [Test]
        public void GetDatasourceTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasourceTypeId = null;
            //var response = instance.GetDatasourceType(datasourceTypeId);
            //Assert.IsInstanceOf<DatasourceType> (response, "response is DatasourceType");
        }

        /// <summary>
        /// Test GetDatasourceTypes
        /// </summary>
        [Test]
        public void GetDatasourceTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDatasourceTypes();
            //Assert.IsInstanceOf<List<DatasourceType>> (response, "response is List<DatasourceType>");
        }

        /// <summary>
        /// Test GetDatasources
        /// </summary>
        [Test]
        public void GetDatasourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetDatasources(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Datasource>> (response, "response is List<Datasource>");
        }

        /// <summary>
        /// Test GetDefaultLanguage
        /// </summary>
        [Test]
        public void GetDefaultLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDefaultLanguage();
            //Assert.IsInstanceOf<Language> (response, "response is Language");
        }

        /// <summary>
        /// Test GetDefaultPrinter
        /// </summary>
        [Test]
        public void GetDefaultPrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDefaultPrinter();
            //Assert.IsInstanceOf<Printer> (response, "response is Printer");
        }

        /// <summary>
        /// Test GetDependencies
        /// </summary>
        [Test]
        public void GetDependenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string objectId = null;
            //string direction = null;
            //string depth = null;
            //var response = instance.GetDependencies(objectType, objectId, direction, depth);
            //Assert.IsInstanceOf<DependencyTree> (response, "response is DependencyTree");
        }

        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Test]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //var response = instance.GetDocument(documentId);
            //Assert.IsInstanceOf<Document> (response, "response is Document");
        }

        /// <summary>
        /// Test GetDocumentContent
        /// </summary>
        [Test]
        public void GetDocumentContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //instance.GetDocumentContent(documentId);

        }

        /// <summary>
        /// Test GetDocuments
        /// </summary>
        [Test]
        public void GetDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetDocuments(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Document>> (response, "response is List<Document>");
        }

        /// <summary>
        /// Test GetExpressionFunctions
        /// </summary>
        [Test]
        public void GetExpressionFunctionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetExpressionFunctions(page, size, sort, filter);
            //Assert.IsInstanceOf<List<ExpressionFunction>> (response, "response is List<ExpressionFunction>");
        }

        /// <summary>
        /// Test GetExternalUsers
        /// </summary>
        [Test]
        public void GetExternalUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetExternalUsers(page, size, sort, filter);
            //Assert.IsInstanceOf<List<User>> (response, "response is List<User>");
        }

        /// <summary>
        /// Test GetFilteredAssets
        /// </summary>
        [Test]
        public void GetFilteredAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredAssets(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Asset>> (response, "response is List<Asset>");
        }

        /// <summary>
        /// Test GetFilteredConnectors
        /// </summary>
        [Test]
        public void GetFilteredConnectorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredConnectors(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Connector>> (response, "response is List<Connector>");
        }

        /// <summary>
        /// Test GetFilteredDatasets
        /// </summary>
        [Test]
        public void GetFilteredDatasetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredDatasets(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Dataset>> (response, "response is List<Dataset>");
        }

        /// <summary>
        /// Test GetFilteredDatasources
        /// </summary>
        [Test]
        public void GetFilteredDatasourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredDatasources(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Datasource>> (response, "response is List<Datasource>");
        }

        /// <summary>
        /// Test GetFilteredDocuments
        /// </summary>
        [Test]
        public void GetFilteredDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredDocuments(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Document>> (response, "response is List<Document>");
        }

        /// <summary>
        /// Test GetFilteredFlowExecutions
        /// </summary>
        [Test]
        public void GetFilteredFlowExecutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredFlowExecutions(page, size, sort, filter);
            //Assert.IsInstanceOf<List<FlowExecution>> (response, "response is List<FlowExecution>");
        }

        /// <summary>
        /// Test GetFilteredPrinters
        /// </summary>
        [Test]
        public void GetFilteredPrintersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredPrinters(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Printer>> (response, "response is List<Printer>");
        }

        /// <summary>
        /// Test GetFilteredTagGroups
        /// </summary>
        [Test]
        public void GetFilteredTagGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredTagGroups(page, size, sort, filter);
            //Assert.IsInstanceOf<List<TagGroup>> (response, "response is List<TagGroup>");
        }

        /// <summary>
        /// Test GetFilteredTemplates
        /// </summary>
        [Test]
        public void GetFilteredTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredTemplates(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }

        /// <summary>
        /// Test GetFilteredUsers
        /// </summary>
        [Test]
        public void GetFilteredUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFilteredUsers(page, size, sort, filter);
            //Assert.IsInstanceOf<List<User>> (response, "response is List<User>");
        }

        /// <summary>
        /// Test GetFlow
        /// </summary>
        [Test]
        public void GetFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //var response = instance.GetFlow(flow);
            //Assert.IsInstanceOf<Flow> (response, "response is Flow");
        }

        /// <summary>
        /// Test GetFlowContract
        /// </summary>
        [Test]
        public void GetFlowContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //Object body = null;
            //var response = instance.GetFlowContract(flow, body);
            //Assert.IsInstanceOf<FlowContract> (response, "response is FlowContract");
        }

        /// <summary>
        /// Test GetFlowExecution
        /// </summary>
        [Test]
        public void GetFlowExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string execution = null;
            //var response = instance.GetFlowExecution(execution);
            //Assert.IsInstanceOf<FlowExecution> (response, "response is FlowExecution");
        }

        /// <summary>
        /// Test GetFlowExecutionProgress
        /// </summary>
        [Test]
        public void GetFlowExecutionProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string execution = null;
            //int? timeout = null;
            //var response = instance.GetFlowExecutionProgress(execution, timeout);
            //Assert.IsInstanceOf<FlowExecutionProgress> (response, "response is FlowExecutionProgress");
        }

        /// <summary>
        /// Test GetFlowExecutionStatistics
        /// </summary>
        [Test]
        public void GetFlowExecutionStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupTimeBy = null;
            //FilterGroupNode filter = null;
            //var response = instance.GetFlowExecutionStatistics(groupTimeBy, filter);
            //Assert.IsInstanceOf<Statistics> (response, "response is Statistics");
        }

        /// <summary>
        /// Test GetFlowExecutions
        /// </summary>
        [Test]
        public void GetFlowExecutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetFlowExecutions(flow, page, size, sort, filter);
            //Assert.IsInstanceOf<List<FlowExecution>> (response, "response is List<FlowExecution>");
        }

        /// <summary>
        /// Test GetFlowSettings
        /// </summary>
        [Test]
        public void GetFlowSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string step = null;
            //string property = null;
            //Object body = null;
            //var response = instance.GetFlowSettings(step, property, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test GetFlowStep
        /// </summary>
        [Test]
        public void GetFlowStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string step = null;
            //var response = instance.GetFlowStep(step);
            //Assert.IsInstanceOf<FlowStep> (response, "response is FlowStep");
        }

        /// <summary>
        /// Test GetFlowSteps
        /// </summary>
        [Test]
        public void GetFlowStepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetFlowSteps();
            //Assert.IsInstanceOf<List<FlowStep>> (response, "response is List<FlowStep>");
        }

        /// <summary>
        /// Test GetFlowThumbnail
        /// </summary>
        [Test]
        public void GetFlowThumbnailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //var response = instance.GetFlowThumbnail(flow);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test GetFlows
        /// </summary>
        [Test]
        public void GetFlowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetFlows(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Flow>> (response, "response is List<Flow>");
        }

        /// <summary>
        /// Test GetFormattedValue
        /// </summary>
        [Test]
        public void GetFormattedValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string value = null;
            //string pattern = null;
            //string type = null;
            //string locale = null;
            //var response = instance.GetFormattedValue(value, pattern, type, locale);
            //Assert.IsInstanceOf<FormattedValue> (response, "response is FormattedValue");
        }

        /// <summary>
        /// Test GetLanguage
        /// </summary>
        [Test]
        public void GetLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //var response = instance.GetLanguage(language);
            //Assert.IsInstanceOf<Language> (response, "response is Language");
        }

        /// <summary>
        /// Test GetLanguages
        /// </summary>
        [Test]
        public void GetLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLanguages();
            //Assert.IsInstanceOf<List<Language>> (response, "response is List<Language>");
        }

        /// <summary>
        /// Test GetLicense
        /// </summary>
        [Test]
        public void GetLicenseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLicense();
            //Assert.IsInstanceOf<LicenseInformation> (response, "response is LicenseInformation");
        }

        /// <summary>
        /// Test GetPluginDatasets
        /// </summary>
        [Test]
        public void GetPluginDatasetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPluginDatasets();
            //Assert.IsInstanceOf<List<Dataset>> (response, "response is List<Dataset>");
        }

        /// <summary>
        /// Test GetPlugins
        /// </summary>
        [Test]
        public void GetPluginsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPlugins();
            //Assert.IsInstanceOf<List<Plugin>> (response, "response is List<Plugin>");
        }

        /// <summary>
        /// Test GetPrinter
        /// </summary>
        [Test]
        public void GetPrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string printer = null;
            //var response = instance.GetPrinter(printer);
            //Assert.IsInstanceOf<Printer> (response, "response is Printer");
        }

        /// <summary>
        /// Test GetPrinters
        /// </summary>
        [Test]
        public void GetPrintersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPrinters();
            //Assert.IsInstanceOf<List<Printer>> (response, "response is List<Printer>");
        }

        /// <summary>
        /// Test GetRoles
        /// </summary>
        [Test]
        public void GetRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRoles();
            //Assert.IsInstanceOf<List<Role>> (response, "response is List<Role>");
        }

        /// <summary>
        /// Test GetSettings
        /// </summary>
        [Test]
        public void GetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSettings();
            //Assert.IsInstanceOf<Settings> (response, "response is Settings");
        }

        /// <summary>
        /// Test GetSubSettings
        /// </summary>
        [Test]
        public void GetSubSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string settingsType = null;
            //var response = instance.GetSubSettings(settingsType);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test GetSupportedFeatures
        /// </summary>
        [Test]
        public void GetSupportedFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSupportedFeatures();
            //Assert.IsInstanceOf<List<Feature>> (response, "response is List<Feature>");
        }

        /// <summary>
        /// Test GetSystemCurrencySymbols
        /// </summary>
        [Test]
        public void GetSystemCurrencySymbolsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetSystemCurrencySymbols(page, size, sort, filter);
            //Assert.IsInstanceOf<List<CurrencySymbol>> (response, "response is List<CurrencySymbol>");
        }

        /// <summary>
        /// Test GetSystemDefaultLanguage
        /// </summary>
        [Test]
        public void GetSystemDefaultLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSystemDefaultLanguage();
            //Assert.IsInstanceOf<LanguageDefinition> (response, "response is LanguageDefinition");
        }

        /// <summary>
        /// Test GetSystemInfo
        /// </summary>
        [Test]
        public void GetSystemInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSystemInfo();
            //Assert.IsInstanceOf<SystemInfo> (response, "response is SystemInfo");
        }

        /// <summary>
        /// Test GetSystemLanguages
        /// </summary>
        [Test]
        public void GetSystemLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //bool? formats = null;
            //var response = instance.GetSystemLanguages(page, size, sort, filter, formats);
            //Assert.IsInstanceOf<List<LanguageDefinition>> (response, "response is List<LanguageDefinition>");
        }

        /// <summary>
        /// Test GetSystemPrinter
        /// </summary>
        [Test]
        public void GetSystemPrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string printer = null;
            //bool? includeDetails = null;
            //var response = instance.GetSystemPrinter(printer, includeDetails);
            //Assert.IsInstanceOf<PrinterDefinition> (response, "response is PrinterDefinition");
        }

        /// <summary>
        /// Test GetSystemPrinters
        /// </summary>
        [Test]
        public void GetSystemPrintersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //bool? includeDetails = null;
            //var response = instance.GetSystemPrinters(page, size, sort, filter, includeDetails);
            //Assert.IsInstanceOf<List<PrinterDefinition>> (response, "response is List<PrinterDefinition>");
        }

        /// <summary>
        /// Test GetSystemTimeZones
        /// </summary>
        [Test]
        public void GetSystemTimeZonesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSystemTimeZones();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }

        /// <summary>
        /// Test GetTagGroup
        /// </summary>
        [Test]
        public void GetTagGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGroupId = null;
            //var response = instance.GetTagGroup(tagGroupId);
            //Assert.IsInstanceOf<TagGroup> (response, "response is TagGroup");
        }

        /// <summary>
        /// Test GetTagGroups
        /// </summary>
        [Test]
        public void GetTagGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetTagGroups(page, size, sort, filter);
            //Assert.IsInstanceOf<List<TagGroup>> (response, "response is List<TagGroup>");
        }

        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.GetTemplate(templateId);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }

        /// <summary>
        /// Test GetTemplateContent
        /// </summary>
        [Test]
        public void GetTemplateContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string lang = null;
            //string version = null;
            //bool? includeMeta = null;
            //var response = instance.GetTemplateContent(templateId, lang, version, includeMeta);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test GetTemplateHistory
        /// </summary>
        [Test]
        public void GetTemplateHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string lang = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //var response = instance.GetTemplateHistory(templateId, lang, page, size, sort);
            //Assert.IsInstanceOf<List<Version>> (response, "response is List<Version>");
        }

        /// <summary>
        /// Test GetTemplateLanguage
        /// </summary>
        [Test]
        public void GetTemplateLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string lang = null;
            //var response = instance.GetTemplateLanguage(templateId, lang);
            //Assert.IsInstanceOf<TemplateLanguage> (response, "response is TemplateLanguage");
        }

        /// <summary>
        /// Test GetTemplateSchema
        /// </summary>
        [Test]
        public void GetTemplateSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string format = null;
            //var response = instance.GetTemplateSchema(templateId, format);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test GetTemplates
        /// </summary>
        [Test]
        public void GetTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetTemplates(page, size, sort, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string user = null;
            //var response = instance.GetUser(user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }

        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string filter = null;
            //var response = instance.GetUsers(page, size, sort, filter);
            //Assert.IsInstanceOf<List<User>> (response, "response is List<User>");
        }

        /// <summary>
        /// Test InstallLicense
        /// </summary>
        [Test]
        public void InstallLicenseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] body = null;
            //var response = instance.InstallLicense(body);
            //Assert.IsInstanceOf<LicenseInformation> (response, "response is LicenseInformation");
        }

        /// <summary>
        /// Test ParseExpression
        /// </summary>
        [Test]
        public void ParseExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ParseExpressionRequest body = null;
            //var response = instance.ParseExpression(body);
            //Assert.IsInstanceOf<ParseExpressionResponse> (response, "response is ParseExpressionResponse");
        }

        /// <summary>
        /// Test PostFlowCallback
        /// </summary>
        [Test]
        public void PostFlowCallbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callbackId = null;
            //string executionId = null;
            //string body = null;
            //var response = instance.PostFlowCallback(callbackId, executionId, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test PrepareImport
        /// </summary>
        [Test]
        public void PrepareImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] body = null;
            //var response = instance.PrepareImport(body);
            //Assert.IsInstanceOf<ImportInformation> (response, "response is ImportInformation");
        }

        /// <summary>
        /// Test RefreshConnector
        /// </summary>
        [Test]
        public void RefreshConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //instance.RefreshConnector(connectorId);

        }

        /// <summary>
        /// Test RestoreBackup
        /// </summary>
        [Test]
        public void RestoreBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] body = null;
            //instance.RestoreBackup(body);

        }

        /// <summary>
        /// Test RunCleanup
        /// </summary>
        [Test]
        public void RunCleanupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string action = null;
            //var response = instance.RunCleanup(action);
            //Assert.IsInstanceOf<List<CleanupActionStatus>> (response, "response is List<CleanupActionStatus>");
        }

        /// <summary>
        /// Test SetDefaultLanguage
        /// </summary>
        [Test]
        public void SetDefaultLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Language body = null;
            //var response = instance.SetDefaultLanguage(body);
            //Assert.IsInstanceOf<Language> (response, "response is Language");
        }

        /// <summary>
        /// Test SetDefaultPrinter
        /// </summary>
        [Test]
        public void SetDefaultPrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Printer body = null;
            //var response = instance.SetDefaultPrinter(body);
            //Assert.IsInstanceOf<Printer> (response, "response is Printer");
        }

        /// <summary>
        /// Test SetSystemDefaultLanguage
        /// </summary>
        [Test]
        public void SetSystemDefaultLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LanguageDefinition body = null;
            //var response = instance.SetSystemDefaultLanguage(body);
            //Assert.IsInstanceOf<LanguageDefinition> (response, "response is LanguageDefinition");
        }

        /// <summary>
        /// Test SetupConnector
        /// </summary>
        [Test]
        public void SetupConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //var response = instance.SetupConnector(connectorId);
            //Assert.IsInstanceOf<ConnectorStage> (response, "response is ConnectorStage");
        }

        /// <summary>
        /// Test SetupConnectorCancel
        /// </summary>
        [Test]
        public void SetupConnectorCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //Object body = null;
            //var response = instance.SetupConnectorCancel(connectorId, body);
            //Assert.IsInstanceOf<Connector> (response, "response is Connector");
        }

        /// <summary>
        /// Test SetupConnectorCurrent
        /// </summary>
        [Test]
        public void SetupConnectorCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //var response = instance.SetupConnectorCurrent(connectorId);
            //Assert.IsInstanceOf<ConnectorStage> (response, "response is ConnectorStage");
        }

        /// <summary>
        /// Test SetupConnectorFinish
        /// </summary>
        [Test]
        public void SetupConnectorFinishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //Object body = null;
            //var response = instance.SetupConnectorFinish(connectorId, body);
            //Assert.IsInstanceOf<Connector> (response, "response is Connector");
        }

        /// <summary>
        /// Test SetupConnectorNext
        /// </summary>
        [Test]
        public void SetupConnectorNextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //Object body = null;
            //var response = instance.SetupConnectorNext(connectorId, body);
            //Assert.IsInstanceOf<ConnectorStage> (response, "response is ConnectorStage");
        }

        /// <summary>
        /// Test SetupConnectorPrevious
        /// </summary>
        [Test]
        public void SetupConnectorPreviousTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //Object body = null;
            //var response = instance.SetupConnectorPrevious(connectorId, body);
            //Assert.IsInstanceOf<ConnectorStage> (response, "response is ConnectorStage");
        }

        /// <summary>
        /// Test SyncExternalUsers
        /// </summary>
        [Test]
        public void SyncExternalUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SyncExternalUsers();
            //Assert.IsInstanceOf<SyncResult> (response, "response is SyncResult");
        }

        /// <summary>
        /// Test TestConnector
        /// </summary>
        [Test]
        public void TestConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //var response = instance.TestConnector(connectorId);
            //Assert.IsInstanceOf<OperationStatus> (response, "response is OperationStatus");
        }

        /// <summary>
        /// Test TestPrinter
        /// </summary>
        [Test]
        public void TestPrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string printer = null;
            //instance.TestPrinter(printer);

        }

        /// <summary>
        /// Test UpdateAsset
        /// </summary>
        [Test]
        public void UpdateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //Asset body = null;
            //var response = instance.UpdateAsset(assetId, body);
            //Assert.IsInstanceOf<Asset> (response, "response is Asset");
        }

        /// <summary>
        /// Test UpdateAssetContent
        /// </summary>
        [Test]
        public void UpdateAssetContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //byte[] body = null;
            //instance.UpdateAssetContent(assetId, body);

        }

        /// <summary>
        /// Test UpdateConnector
        /// </summary>
        [Test]
        public void UpdateConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectorId = null;
            //Connector body = null;
            //var response = instance.UpdateConnector(connectorId, body);
            //Assert.IsInstanceOf<Connector> (response, "response is Connector");
        }

        /// <summary>
        /// Test UpdateData
        /// </summary>
        [Test]
        public void UpdateDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataId = null;
            //Data body = null;
            //var response = instance.UpdateData(dataId, body);
            //Assert.IsInstanceOf<Data> (response, "response is Data");
        }

        /// <summary>
        /// Test UpdateDataset
        /// </summary>
        [Test]
        public void UpdateDatasetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasetId = null;
            //Dataset body = null;
            //var response = instance.UpdateDataset(datasetId, body);
            //Assert.IsInstanceOf<Dataset> (response, "response is Dataset");
        }

        /// <summary>
        /// Test UpdateFlow
        /// </summary>
        [Test]
        public void UpdateFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string flow = null;
            //Flow body = null;
            //var response = instance.UpdateFlow(flow, body);
            //Assert.IsInstanceOf<Flow> (response, "response is Flow");
        }

        /// <summary>
        /// Test UpdateLanguage
        /// </summary>
        [Test]
        public void UpdateLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //Language body = null;
            //var response = instance.UpdateLanguage(language, body);
            //Assert.IsInstanceOf<Language> (response, "response is Language");
        }

        /// <summary>
        /// Test UpdatePrinter
        /// </summary>
        [Test]
        public void UpdatePrinterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string printer = null;
            //Printer body = null;
            //var response = instance.UpdatePrinter(printer, body);
            //Assert.IsInstanceOf<Printer> (response, "response is Printer");
        }

        /// <summary>
        /// Test UpdateSubSettings
        /// </summary>
        [Test]
        public void UpdateSubSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string settingsType = null;
            //Object body = null;
            //var response = instance.UpdateSubSettings(settingsType, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test UpdateTagGroup
        /// </summary>
        [Test]
        public void UpdateTagGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGroupId = null;
            //TagGroup body = null;
            //var response = instance.UpdateTagGroup(tagGroupId, body);
            //Assert.IsInstanceOf<TagGroup> (response, "response is TagGroup");
        }

        /// <summary>
        /// Test UpdateTemplate
        /// </summary>
        [Test]
        public void UpdateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //Template body = null;
            //var response = instance.UpdateTemplate(templateId, body);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }

        /// <summary>
        /// Test UpdateTemplateContent
        /// </summary>
        [Test]
        public void UpdateTemplateContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string lang = null;
            //string description = null;
            //byte[] body = null;
            //instance.UpdateTemplateContent(templateId, lang, description, body);

        }

        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string user = null;
            //User body = null;
            //var response = instance.UpdateUser(user, body);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }

    }

}
