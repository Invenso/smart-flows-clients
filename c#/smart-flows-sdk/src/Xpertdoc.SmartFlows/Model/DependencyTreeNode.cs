/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DependencyTreeNode
    /// </summary>
    [DataContract]
    public partial class DependencyTreeNode : IEquatable<DependencyTreeNode>, IValidatableObject
    {
        /// <summary>
        /// Defines Loaded
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoadedEnum
        {

            /// <summary>
            /// Enum Eager for value: eager
            /// </summary>
            [EnumMember(Value = "eager")]
            Eager = 1,

            /// <summary>
            /// Enum Lazy for value: lazy
            /// </summary>
            [EnumMember(Value = "lazy")]
            Lazy = 2
        }

        /// <summary>
        /// Gets or Sets Loaded
        /// </summary>
        [DataMember(Name = "loaded", EmitDefaultValue = false)]
        public LoadedEnum? Loaded { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyTreeNode" /> class.
        /// </summary>
        /// <param name="Target">Target.</param>
        /// <param name="Loaded">Loaded (default to LoadedEnum.Lazy).</param>
        /// <param name="Children">Children.</param>
        public DependencyTreeNode(IdWithName Target = default(IdWithName), LoadedEnum? Loaded = LoadedEnum.Lazy, List<DependencyTreeNode> Children = default(List<DependencyTreeNode>))
        {
            this.Target = Target;
            // use default value if no "Loaded" provided
            if (Loaded == null)
            {
                this.Loaded = LoadedEnum.Lazy;
            }
            else
            {
                this.Loaded = Loaded;
            }
            this.Children = Children;
        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public IdWithName Target { get; set; }


        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<DependencyTreeNode> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DependencyTreeNode {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Loaded: ").Append(Loaded).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DependencyTreeNode);
        }

        /// <summary>
        /// Returns true if DependencyTreeNode instances are equal
        /// </summary>
        /// <param name="input">Instance of DependencyTreeNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DependencyTreeNode input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) &&
                (
                    this.Loaded == input.Loaded ||
                    (this.Loaded != null &&
                    this.Loaded.Equals(input.Loaded))
                ) &&
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Loaded != null)
                    hashCode = hashCode * 59 + this.Loaded.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
