/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DocGenSettingsTemplateStandard
    /// </summary>
    [DataContract]
    public partial class DocGenSettingsTemplateStandard : IEquatable<DocGenSettingsTemplateStandard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenSettingsTemplateStandard" /> class.
        /// </summary>
        /// <param name="Content">Content.</param>
        /// <param name="Datasets">Datasets.</param>
        /// <param name="Schemas">Schemas.</param>
        public DocGenSettingsTemplateStandard(byte[] Content = default(byte[]), List<string> Datasets = default(List<string>), List<SchemaContent> Schemas = default(List<SchemaContent>))
        {
            this.Content = Content;
            this.Datasets = Datasets;
            this.Schemas = Schemas;
        }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public byte[] Content { get; set; }

        /// <summary>
        /// Gets or Sets Datasets
        /// </summary>
        [DataMember(Name = "datasets", EmitDefaultValue = false)]
        public List<string> Datasets { get; set; }

        /// <summary>
        /// Gets or Sets Schemas
        /// </summary>
        [DataMember(Name = "schemas", EmitDefaultValue = false)]
        public List<SchemaContent> Schemas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenSettingsTemplateStandard {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Datasets: ").Append(Datasets).Append("\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocGenSettingsTemplateStandard);
        }

        /// <summary>
        /// Returns true if DocGenSettingsTemplateStandard instances are equal
        /// </summary>
        /// <param name="input">Instance of DocGenSettingsTemplateStandard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenSettingsTemplateStandard input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) &&
                (
                    this.Datasets == input.Datasets ||
                    this.Datasets != null &&
                    this.Datasets.SequenceEqual(input.Datasets)
                ) &&
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas != null &&
                    this.Schemas.SequenceEqual(input.Schemas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Datasets != null)
                    hashCode = hashCode * 59 + this.Datasets.GetHashCode();
                if (this.Schemas != null)
                    hashCode = hashCode * 59 + this.Schemas.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
