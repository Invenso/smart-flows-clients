/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// FormatDefinition
    /// </summary>
    [DataContract]
    public partial class FormatDefinition : IEquatable<FormatDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormatDefinition" /> class.
        /// </summary>
        /// <param name="Format">Format.</param>
        /// <param name="Sample">Sample.</param>
        /// <param name="IsDefault">IsDefault (default to false).</param>
        /// <param name="DateStyle">DateStyle.</param>
        /// <param name="TimeStyle">TimeStyle.</param>
        public FormatDefinition(string Format = default(string), string Sample = default(string), bool? IsDefault = false, DateFormatStyle DateStyle = default(DateFormatStyle), DateFormatStyle TimeStyle = default(DateFormatStyle))
        {
            this.Format = Format;
            this.Sample = Sample;
            // use default value if no "IsDefault" provided
            if (IsDefault == null)
            {
                this.IsDefault = false;
            }
            else
            {
                this.IsDefault = IsDefault;
            }
            this.DateStyle = DateStyle;
            this.TimeStyle = TimeStyle;
        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }
        /// <summary>
        /// Gets or Sets Sample
        /// </summary>
        [DataMember(Name = "sample", EmitDefaultValue = false)]
        public string Sample { get; set; }
        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Gets or Sets DateStyle
        /// </summary>
        [DataMember(Name = "dateStyle", EmitDefaultValue = false)]
        public DateFormatStyle DateStyle { get; set; }
        /// <summary>
        /// Gets or Sets TimeStyle
        /// </summary>
        [DataMember(Name = "timeStyle", EmitDefaultValue = false)]
        public DateFormatStyle TimeStyle { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormatDefinition {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Sample: ").Append(Sample).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  DateStyle: ").Append(DateStyle).Append("\n");
            sb.Append("  TimeStyle: ").Append(TimeStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FormatDefinition);
        }

        /// <summary>
        /// Returns true if FormatDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of FormatDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormatDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) &&
                (
                    this.Sample == other.Sample ||
                    this.Sample != null &&
                    this.Sample.Equals(other.Sample)
                ) &&
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) &&
                (
                    this.DateStyle == other.DateStyle ||
                    this.DateStyle != null &&
                    this.DateStyle.Equals(other.DateStyle)
                ) &&
                (
                    this.TimeStyle == other.TimeStyle ||
                    this.TimeStyle != null &&
                    this.TimeStyle.Equals(other.TimeStyle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Sample != null)
                    hash = hash * 59 + this.Sample.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                if (this.DateStyle != null)
                    hash = hash * 59 + this.DateStyle.GetHashCode();
                if (this.TimeStyle != null)
                    hash = hash * 59 + this.TimeStyle.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
