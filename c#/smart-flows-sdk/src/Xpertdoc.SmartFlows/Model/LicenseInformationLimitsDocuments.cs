/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// LicenseInformationLimitsDocuments
    /// </summary>
    [DataContract]
    public partial class LicenseInformationLimitsDocuments : IEquatable<LicenseInformationLimitsDocuments>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntervalEnum
        {

            /// <summary>
            /// Enum Year for "year"
            /// </summary>
            [EnumMember(Value = "year")]
            Year,

            /// <summary>
            /// Enum Month for "month"
            /// </summary>
            [EnumMember(Value = "month")]
            Month
        }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public IntervalEnum? Interval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseInformationLimitsDocuments" /> class.
        /// </summary>
        /// <param name="Max">Max.</param>
        /// <param name="Interval">Interval.</param>
        /// <param name="Used">Used.</param>
        /// <param name="Since">Since.</param>
        public LicenseInformationLimitsDocuments(int? Max = default(int?), IntervalEnum? Interval = default(IntervalEnum?), int? Used = default(int?), DateTime? Since = default(DateTime?))
        {
            this.Max = Max;
            this.Interval = Interval;
            this.Used = Used;
            this.Since = Since;
        }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public int? Max { get; set; }
        /// <summary>
        /// Gets or Sets Used
        /// </summary>
        [DataMember(Name = "used", EmitDefaultValue = false)]
        public int? Used { get; set; }
        /// <summary>
        /// Gets or Sets Since
        /// </summary>
        [DataMember(Name = "since", EmitDefaultValue = false)]
        public DateTime? Since { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseInformationLimitsDocuments {\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LicenseInformationLimitsDocuments);
        }

        /// <summary>
        /// Returns true if LicenseInformationLimitsDocuments instances are equal
        /// </summary>
        /// <param name="other">Instance of LicenseInformationLimitsDocuments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseInformationLimitsDocuments other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Max == other.Max ||
                    this.Max != null &&
                    this.Max.Equals(other.Max)
                ) &&
                (
                    this.Interval == other.Interval ||
                    this.Interval != null &&
                    this.Interval.Equals(other.Interval)
                ) &&
                (
                    this.Used == other.Used ||
                    this.Used != null &&
                    this.Used.Equals(other.Used)
                ) &&
                (
                    this.Since == other.Since ||
                    this.Since != null &&
                    this.Since.Equals(other.Since)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Max != null)
                    hash = hash * 59 + this.Max.GetHashCode();
                if (this.Interval != null)
                    hash = hash * 59 + this.Interval.GetHashCode();
                if (this.Used != null)
                    hash = hash * 59 + this.Used.GetHashCode();
                if (this.Since != null)
                    hash = hash * 59 + this.Since.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
