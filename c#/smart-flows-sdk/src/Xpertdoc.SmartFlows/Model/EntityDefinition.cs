/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// EntityDefinition
    /// </summary>
    [DataContract]
    public partial class EntityDefinition : IEquatable<EntityDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityDefinition" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="_Namespace">_Namespace.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="SchemaName">SchemaName.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CanBePrimary">CanBePrimary.</param>
        /// <param name="Fields">Fields.</param>
        /// <param name="Lookups">Lookups.</param>
        /// <param name="Relationships">Relationships.</param>
        public EntityDefinition(string Name = default(string), string _Namespace = default(string), string DisplayName = default(string), string SchemaName = default(string), string Description = default(string), bool? CanBePrimary = default(bool?), List<EntityField> Fields = default(List<EntityField>), List<EntityDefinitionLookups> Lookups = default(List<EntityDefinitionLookups>), List<EntityDefinitionRelationships> Relationships = default(List<EntityDefinitionRelationships>))
        {
            this.Name = Name;
            this._Namespace = _Namespace;
            this.DisplayName = DisplayName;
            this.SchemaName = SchemaName;
            this.Description = Description;
            this.CanBePrimary = CanBePrimary;
            this.Fields = Fields;
            this.Lookups = Lookups;
            this.Relationships = Relationships;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets _Namespace
        /// </summary>
        [DataMember(Name = "namespace", EmitDefaultValue = false)]
        public string _Namespace { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Gets or Sets SchemaName
        /// </summary>
        [DataMember(Name = "schemaName", EmitDefaultValue = false)]
        public string SchemaName { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets CanBePrimary
        /// </summary>
        [DataMember(Name = "canBePrimary", EmitDefaultValue = false)]
        public bool? CanBePrimary { get; set; }
        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<EntityField> Fields { get; set; }
        /// <summary>
        /// Gets or Sets Lookups
        /// </summary>
        [DataMember(Name = "lookups", EmitDefaultValue = false)]
        public List<EntityDefinitionLookups> Lookups { get; set; }
        /// <summary>
        /// Gets or Sets Relationships
        /// </summary>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public List<EntityDefinitionRelationships> Relationships { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Namespace: ").Append(_Namespace).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  SchemaName: ").Append(SchemaName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CanBePrimary: ").Append(CanBePrimary).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Lookups: ").Append(Lookups).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EntityDefinition);
        }

        /// <summary>
        /// Returns true if EntityDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of EntityDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) &&
                (
                    this._Namespace == other._Namespace ||
                    this._Namespace != null &&
                    this._Namespace.Equals(other._Namespace)
                ) &&
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) &&
                (
                    this.SchemaName == other.SchemaName ||
                    this.SchemaName != null &&
                    this.SchemaName.Equals(other.SchemaName)
                ) &&
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) &&
                (
                    this.CanBePrimary == other.CanBePrimary ||
                    this.CanBePrimary != null &&
                    this.CanBePrimary.Equals(other.CanBePrimary)
                ) &&
                (
                    this.Fields == other.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(other.Fields)
                ) &&
                (
                    this.Lookups == other.Lookups ||
                    this.Lookups != null &&
                    this.Lookups.SequenceEqual(other.Lookups)
                ) &&
                (
                    this.Relationships == other.Relationships ||
                    this.Relationships != null &&
                    this.Relationships.SequenceEqual(other.Relationships)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this._Namespace != null)
                    hash = hash * 59 + this._Namespace.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.SchemaName != null)
                    hash = hash * 59 + this.SchemaName.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.CanBePrimary != null)
                    hash = hash * 59 + this.CanBePrimary.GetHashCode();
                if (this.Fields != null)
                    hash = hash * 59 + this.Fields.GetHashCode();
                if (this.Lookups != null)
                    hash = hash * 59 + this.Lookups.GetHashCode();
                if (this.Relationships != null)
                    hash = hash * 59 + this.Relationships.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
