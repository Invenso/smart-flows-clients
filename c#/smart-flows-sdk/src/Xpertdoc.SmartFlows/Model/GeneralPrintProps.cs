/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// GeneralPrintProps
    /// </summary>
    [DataContract]
    public partial class GeneralPrintProps : IEquatable<GeneralPrintProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralPrintProps" /> class.
        /// </summary>
        /// <param name="Copies">Copies.</param>
        /// <param name="JobName">JobName.</param>
        /// <param name="PageRange">PageRange.</param>
        public GeneralPrintProps(int? Copies = default(int?), string JobName = default(string), GeneralPrintPropsPageRange PageRange = default(GeneralPrintPropsPageRange))
        {
            this.Copies = Copies;
            this.JobName = JobName;
            this.PageRange = PageRange;
        }

        /// <summary>
        /// Gets or Sets Copies
        /// </summary>
        [DataMember(Name = "copies", EmitDefaultValue = false)]
        public int? Copies { get; set; }

        /// <summary>
        /// Gets or Sets JobName
        /// </summary>
        [DataMember(Name = "jobName", EmitDefaultValue = false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets PageRange
        /// </summary>
        [DataMember(Name = "pageRange", EmitDefaultValue = false)]
        public GeneralPrintPropsPageRange PageRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneralPrintProps {\n");
            sb.Append("  Copies: ").Append(Copies).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  PageRange: ").Append(PageRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralPrintProps);
        }

        /// <summary>
        /// Returns true if GeneralPrintProps instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralPrintProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralPrintProps input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Copies == input.Copies ||
                    (this.Copies != null &&
                    this.Copies.Equals(input.Copies))
                ) &&
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) &&
                (
                    this.PageRange == input.PageRange ||
                    (this.PageRange != null &&
                    this.PageRange.Equals(input.PageRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Copies != null)
                    hashCode = hashCode * 59 + this.Copies.GetHashCode();
                if (this.JobName != null)
                    hashCode = hashCode * 59 + this.JobName.GetHashCode();
                if (this.PageRange != null)
                    hashCode = hashCode * 59 + this.PageRange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
