/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DocGenSettings
    /// </summary>
    [DataContract]
    public partial class DocGenSettings : IEquatable<DocGenSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenSettings" /> class.
        /// </summary>
        /// <param name="Language">Language.</param>
        /// <param name="TemplateRef">TemplateRef.</param>
        /// <param name="Template">Template.</param>
        /// <param name="DataRefs">DataRefs.</param>
        /// <param name="Datas">Datas.</param>
        /// <param name="Result">Result.</param>
        public DocGenSettings(string Language = default(string), ObjectReference TemplateRef = default(ObjectReference), DocGenSettingsTemplate Template = default(DocGenSettingsTemplate), List<ObjectReference> DataRefs = default(List<ObjectReference>), List<DocGenSettingsDatas> Datas = default(List<DocGenSettingsDatas>), DocGenSettingsResult Result = default(DocGenSettingsResult))
        {
            this.Language = Language;
            this.TemplateRef = TemplateRef;
            this.Template = Template;
            this.DataRefs = DataRefs;
            this.Datas = Datas;
            this.Result = Result;
        }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets TemplateRef
        /// </summary>
        [DataMember(Name = "templateRef", EmitDefaultValue = false)]
        public ObjectReference TemplateRef { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public DocGenSettingsTemplate Template { get; set; }

        /// <summary>
        /// Gets or Sets DataRefs
        /// </summary>
        [DataMember(Name = "dataRefs", EmitDefaultValue = false)]
        public List<ObjectReference> DataRefs { get; set; }

        /// <summary>
        /// Gets or Sets Datas
        /// </summary>
        [DataMember(Name = "datas", EmitDefaultValue = false)]
        public List<DocGenSettingsDatas> Datas { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public DocGenSettingsResult Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenSettings {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  TemplateRef: ").Append(TemplateRef).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  DataRefs: ").Append(DataRefs).Append("\n");
            sb.Append("  Datas: ").Append(Datas).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocGenSettings);
        }

        /// <summary>
        /// Returns true if DocGenSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DocGenSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenSettings input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) &&
                (
                    this.TemplateRef == input.TemplateRef ||
                    (this.TemplateRef != null &&
                    this.TemplateRef.Equals(input.TemplateRef))
                ) &&
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) &&
                (
                    this.DataRefs == input.DataRefs ||
                    this.DataRefs != null &&
                    this.DataRefs.SequenceEqual(input.DataRefs)
                ) &&
                (
                    this.Datas == input.Datas ||
                    this.Datas != null &&
                    this.Datas.SequenceEqual(input.Datas)
                ) &&
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.TemplateRef != null)
                    hashCode = hashCode * 59 + this.TemplateRef.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.DataRefs != null)
                    hashCode = hashCode * 59 + this.DataRefs.GetHashCode();
                if (this.Datas != null)
                    hashCode = hashCode * 59 + this.Datas.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
