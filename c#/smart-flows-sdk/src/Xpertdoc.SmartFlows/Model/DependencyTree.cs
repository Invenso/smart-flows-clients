/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DependencyTree
    /// </summary>
    [DataContract]
    public partial class DependencyTree : IEquatable<DependencyTree>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyTree" /> class.
        /// </summary>
        /// <param name="_Object">_Object.</param>
        /// <param name="Inbound">Inbound.</param>
        /// <param name="Outbound">Outbound.</param>
        /// <param name="Users">Users.</param>
        public DependencyTree(IdWithName _Object = default(IdWithName), List<DependencyTreeNode> Inbound = default(List<DependencyTreeNode>), List<DependencyTreeNode> Outbound = default(List<DependencyTreeNode>), List<IdWithName> Users = default(List<IdWithName>))
        {
            this._Object = _Object;
            this.Inbound = Inbound;
            this.Outbound = Outbound;
            this.Users = Users;
        }

        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public IdWithName _Object { get; set; }

        /// <summary>
        /// Gets or Sets Inbound
        /// </summary>
        [DataMember(Name = "inbound", EmitDefaultValue = false)]
        public List<DependencyTreeNode> Inbound { get; set; }

        /// <summary>
        /// Gets or Sets Outbound
        /// </summary>
        [DataMember(Name = "outbound", EmitDefaultValue = false)]
        public List<DependencyTreeNode> Outbound { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<IdWithName> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DependencyTree {\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DependencyTree);
        }

        /// <summary>
        /// Returns true if DependencyTree instances are equal
        /// </summary>
        /// <param name="input">Instance of DependencyTree to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DependencyTree input)
        {
            if (input == null)
                return false;

            return
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) &&
                (
                    this.Inbound == input.Inbound ||
                    this.Inbound != null &&
                    this.Inbound.SequenceEqual(input.Inbound)
                ) &&
                (
                    this.Outbound == input.Outbound ||
                    this.Outbound != null &&
                    this.Outbound.SequenceEqual(input.Outbound)
                ) &&
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.Inbound != null)
                    hashCode = hashCode * 59 + this.Inbound.GetHashCode();
                if (this.Outbound != null)
                    hashCode = hashCode * 59 + this.Outbound.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
