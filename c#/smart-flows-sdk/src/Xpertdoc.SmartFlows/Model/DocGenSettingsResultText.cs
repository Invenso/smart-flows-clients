/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DocGenSettingsResultText
    /// </summary>
    [DataContract]
    public partial class DocGenSettingsResultText : IEquatable<DocGenSettingsResultText>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenSettingsResultText" /> class.
        /// </summary>
        /// <param name="Encoding">Specifies the encoding to use (default to &quot;UTF-8&quot;).</param>
        /// <param name="ExportHeadersFooters">Whether to output headers and footers (default to true).</param>
        /// <param name="ParagraphBreak">The string to use as a paragraph break (default to &quot;\r\n&quot;).</param>
        /// <param name="PreserveTableLayout">Attempt to preserve layout of tables (default to false).</param>
        /// <param name="SimplifyListLabels">Simplify list labels in case of complex label formatting not being adequately represented by plain text. If set to true, numbered list labels are written in simple numeric format and itemized list labels as simple ASCII characters (default to false).</param>
        public DocGenSettingsResultText(string Encoding = "UTF-8", bool? ExportHeadersFooters = true, string ParagraphBreak = "\r\n", bool? PreserveTableLayout = false, bool? SimplifyListLabels = false)
        {
            // use default value if no "Encoding" provided
            if (Encoding == null)
            {
                this.Encoding = "UTF-8";
            }
            else
            {
                this.Encoding = Encoding;
            }
            // use default value if no "ExportHeadersFooters" provided
            if (ExportHeadersFooters == null)
            {
                this.ExportHeadersFooters = true;
            }
            else
            {
                this.ExportHeadersFooters = ExportHeadersFooters;
            }
            // use default value if no "ParagraphBreak" provided
            if (ParagraphBreak == null)
            {
                this.ParagraphBreak = "\r\n";
            }
            else
            {
                this.ParagraphBreak = ParagraphBreak;
            }
            // use default value if no "PreserveTableLayout" provided
            if (PreserveTableLayout == null)
            {
                this.PreserveTableLayout = false;
            }
            else
            {
                this.PreserveTableLayout = PreserveTableLayout;
            }
            // use default value if no "SimplifyListLabels" provided
            if (SimplifyListLabels == null)
            {
                this.SimplifyListLabels = false;
            }
            else
            {
                this.SimplifyListLabels = SimplifyListLabels;
            }
        }

        /// <summary>
        /// Specifies the encoding to use
        /// </summary>
        /// <value>Specifies the encoding to use</value>
        [DataMember(Name = "encoding", EmitDefaultValue = false)]
        public string Encoding { get; set; }
        /// <summary>
        /// Whether to output headers and footers
        /// </summary>
        /// <value>Whether to output headers and footers</value>
        [DataMember(Name = "exportHeadersFooters", EmitDefaultValue = false)]
        public bool? ExportHeadersFooters { get; set; }
        /// <summary>
        /// The string to use as a paragraph break
        /// </summary>
        /// <value>The string to use as a paragraph break</value>
        [DataMember(Name = "paragraphBreak", EmitDefaultValue = false)]
        public string ParagraphBreak { get; set; }
        /// <summary>
        /// Attempt to preserve layout of tables
        /// </summary>
        /// <value>Attempt to preserve layout of tables</value>
        [DataMember(Name = "preserveTableLayout", EmitDefaultValue = false)]
        public bool? PreserveTableLayout { get; set; }
        /// <summary>
        /// Simplify list labels in case of complex label formatting not being adequately represented by plain text. If set to true, numbered list labels are written in simple numeric format and itemized list labels as simple ASCII characters
        /// </summary>
        /// <value>Simplify list labels in case of complex label formatting not being adequately represented by plain text. If set to true, numbered list labels are written in simple numeric format and itemized list labels as simple ASCII characters</value>
        [DataMember(Name = "simplifyListLabels", EmitDefaultValue = false)]
        public bool? SimplifyListLabels { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenSettingsResultText {\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  ExportHeadersFooters: ").Append(ExportHeadersFooters).Append("\n");
            sb.Append("  ParagraphBreak: ").Append(ParagraphBreak).Append("\n");
            sb.Append("  PreserveTableLayout: ").Append(PreserveTableLayout).Append("\n");
            sb.Append("  SimplifyListLabels: ").Append(SimplifyListLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocGenSettingsResultText);
        }

        /// <summary>
        /// Returns true if DocGenSettingsResultText instances are equal
        /// </summary>
        /// <param name="other">Instance of DocGenSettingsResultText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenSettingsResultText other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Encoding == other.Encoding ||
                    this.Encoding != null &&
                    this.Encoding.Equals(other.Encoding)
                ) &&
                (
                    this.ExportHeadersFooters == other.ExportHeadersFooters ||
                    this.ExportHeadersFooters != null &&
                    this.ExportHeadersFooters.Equals(other.ExportHeadersFooters)
                ) &&
                (
                    this.ParagraphBreak == other.ParagraphBreak ||
                    this.ParagraphBreak != null &&
                    this.ParagraphBreak.Equals(other.ParagraphBreak)
                ) &&
                (
                    this.PreserveTableLayout == other.PreserveTableLayout ||
                    this.PreserveTableLayout != null &&
                    this.PreserveTableLayout.Equals(other.PreserveTableLayout)
                ) &&
                (
                    this.SimplifyListLabels == other.SimplifyListLabels ||
                    this.SimplifyListLabels != null &&
                    this.SimplifyListLabels.Equals(other.SimplifyListLabels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Encoding != null)
                    hash = hash * 59 + this.Encoding.GetHashCode();
                if (this.ExportHeadersFooters != null)
                    hash = hash * 59 + this.ExportHeadersFooters.GetHashCode();
                if (this.ParagraphBreak != null)
                    hash = hash * 59 + this.ParagraphBreak.GetHashCode();
                if (this.PreserveTableLayout != null)
                    hash = hash * 59 + this.PreserveTableLayout.GetHashCode();
                if (this.SimplifyListLabels != null)
                    hash = hash * 59 + this.SimplifyListLabels.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
