/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// BooleanCondition
    /// </summary>
    [DataContract]
    public partial class BooleanCondition : IEquatable<BooleanCondition>, IValidatableObject
    {
        /// <summary>
        /// Defines _Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {

            /// <summary>
            /// Enum IsTrue for value: isTrue
            /// </summary>
            [EnumMember(Value = "isTrue")]
            IsTrue = 1,

            /// <summary>
            /// Enum IsFalse for value: isFalse
            /// </summary>
            [EnumMember(Value = "isFalse")]
            IsFalse = 2,

            /// <summary>
            /// Enum EqualTo for value: equalTo
            /// </summary>
            [EnumMember(Value = "equalTo")]
            EqualTo = 3,

            /// <summary>
            /// Enum NotEqualTo for value: notEqualTo
            /// </summary>
            [EnumMember(Value = "notEqualTo")]
            NotEqualTo = 4
        }

        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public OperatorEnum? _Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BooleanCondition" /> class.
        /// </summary>
        /// <param name="_Operator">_Operator.</param>
        /// <param name="Value">Value.</param>
        public BooleanCondition(OperatorEnum? _Operator = default(OperatorEnum?), ConditionValue Value = default(ConditionValue))
        {
            this._Operator = _Operator;
            this.Value = Value;
        }


        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public ConditionValue Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BooleanCondition {\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BooleanCondition);
        }

        /// <summary>
        /// Returns true if BooleanCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of BooleanCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BooleanCondition input)
        {
            if (input == null)
                return false;

            return
                (
                    this._Operator == input._Operator ||
                    (this._Operator != null &&
                    this._Operator.Equals(input._Operator))
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Operator != null)
                    hashCode = hashCode * 59 + this._Operator.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
