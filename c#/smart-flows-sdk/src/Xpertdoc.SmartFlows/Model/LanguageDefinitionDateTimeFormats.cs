/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// LanguageDefinitionDateTimeFormats
    /// </summary>
    [DataContract]
    public partial class LanguageDefinitionDateTimeFormats : IEquatable<LanguageDefinitionDateTimeFormats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageDefinitionDateTimeFormats" /> class.
        /// </summary>
        /// <param name="Date">Date.</param>
        /// <param name="Time">Time.</param>
        /// <param name="DateTime">DateTime.</param>
        public LanguageDefinitionDateTimeFormats(List<FormatDefinition> Date = default(List<FormatDefinition>), List<FormatDefinition> Time = default(List<FormatDefinition>), List<FormatDefinition> DateTime = default(List<FormatDefinition>))
        {
            this.Date = Date;
            this.Time = Time;
            this.DateTime = DateTime;
        }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public List<FormatDefinition> Date { get; set; }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public List<FormatDefinition> Time { get; set; }
        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public List<FormatDefinition> DateTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LanguageDefinitionDateTimeFormats {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LanguageDefinitionDateTimeFormats);
        }

        /// <summary>
        /// Returns true if LanguageDefinitionDateTimeFormats instances are equal
        /// </summary>
        /// <param name="other">Instance of LanguageDefinitionDateTimeFormats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LanguageDefinitionDateTimeFormats other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.SequenceEqual(other.Date)
                ) &&
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.SequenceEqual(other.Time)
                ) &&
                (
                    this.DateTime == other.DateTime ||
                    this.DateTime != null &&
                    this.DateTime.SequenceEqual(other.DateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.DateTime != null)
                    hash = hash * 59 + this.DateTime.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
