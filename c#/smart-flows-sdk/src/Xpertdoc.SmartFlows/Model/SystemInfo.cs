/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// SystemInfo
    /// </summary>
    [DataContract]
    public partial class SystemInfo : IEquatable<SystemInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Role
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {

            /// <summary>
            /// Enum Sandbox for value: sandbox
            /// </summary>
            [EnumMember(Value = "sandbox")]
            Sandbox = 1,

            /// <summary>
            /// Enum Development for value: development
            /// </summary>
            [EnumMember(Value = "development")]
            Development = 2,

            /// <summary>
            /// Enum Testing for value: testing
            /// </summary>
            [EnumMember(Value = "testing")]
            Testing = 3,

            /// <summary>
            /// Enum Production for value: production
            /// </summary>
            [EnumMember(Value = "production")]
            Production = 4
        }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemInfo" /> class.
        /// </summary>
        /// <param name="Version">Version.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Role">Role.</param>
        /// <param name="Defaults">Defaults.</param>
        /// <param name="RssFeed">RssFeed.</param>
        /// <param name="SupportUrl">SupportUrl.</param>
        /// <param name="AssetsUrl">AssetsUrl.</param>
        public SystemInfo(string Version = default(string), string DisplayName = default(string), string Description = default(string), RoleEnum? Role = default(RoleEnum?), SystemInfoDefaults Defaults = default(SystemInfoDefaults), string RssFeed = default(string), string SupportUrl = default(string), string AssetsUrl = default(string))
        {
            this.Version = Version;
            this.DisplayName = DisplayName;
            this.Description = Description;
            this.Role = Role;
            this.Defaults = Defaults;
            this.RssFeed = RssFeed;
            this.SupportUrl = SupportUrl;
            this.AssetsUrl = AssetsUrl;
        }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets Defaults
        /// </summary>
        [DataMember(Name = "defaults", EmitDefaultValue = false)]
        public SystemInfoDefaults Defaults { get; set; }

        /// <summary>
        /// Gets or Sets RssFeed
        /// </summary>
        [DataMember(Name = "rssFeed", EmitDefaultValue = false)]
        public string RssFeed { get; set; }

        /// <summary>
        /// Gets or Sets SupportUrl
        /// </summary>
        [DataMember(Name = "supportUrl", EmitDefaultValue = false)]
        public string SupportUrl { get; set; }

        /// <summary>
        /// Gets or Sets AssetsUrl
        /// </summary>
        [DataMember(Name = "assetsUrl", EmitDefaultValue = false)]
        public string AssetsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemInfo {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Defaults: ").Append(Defaults).Append("\n");
            sb.Append("  RssFeed: ").Append(RssFeed).Append("\n");
            sb.Append("  SupportUrl: ").Append(SupportUrl).Append("\n");
            sb.Append("  AssetsUrl: ").Append(AssetsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemInfo);
        }

        /// <summary>
        /// Returns true if SystemInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) &&
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) &&
                (
                    this.Defaults == input.Defaults ||
                    (this.Defaults != null &&
                    this.Defaults.Equals(input.Defaults))
                ) &&
                (
                    this.RssFeed == input.RssFeed ||
                    (this.RssFeed != null &&
                    this.RssFeed.Equals(input.RssFeed))
                ) &&
                (
                    this.SupportUrl == input.SupportUrl ||
                    (this.SupportUrl != null &&
                    this.SupportUrl.Equals(input.SupportUrl))
                ) &&
                (
                    this.AssetsUrl == input.AssetsUrl ||
                    (this.AssetsUrl != null &&
                    this.AssetsUrl.Equals(input.AssetsUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Defaults != null)
                    hashCode = hashCode * 59 + this.Defaults.GetHashCode();
                if (this.RssFeed != null)
                    hashCode = hashCode * 59 + this.RssFeed.GetHashCode();
                if (this.SupportUrl != null)
                    hashCode = hashCode * 59 + this.SupportUrl.GetHashCode();
                if (this.AssetsUrl != null)
                    hashCode = hashCode * 59 + this.AssetsUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
