/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// StatusMessageDocumentLocation
    /// </summary>
    [DataContract]
    public partial class StatusMessageDocumentLocation : IEquatable<StatusMessageDocumentLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusMessageDocumentLocation" /> class.
        /// </summary>
        /// <param name="Template">Template.</param>
        /// <param name="Instruction">Instruction.</param>
        /// <param name="InstructionField">InstructionField.</param>
        /// <param name="Field">Field.</param>
        /// <param name="FieldValue">FieldValue.</param>
        public StatusMessageDocumentLocation(IdWithName Template = default(IdWithName), string Instruction = default(string), string InstructionField = default(string), string Field = default(string), string FieldValue = default(string))
        {
            this.Template = Template;
            this.Instruction = Instruction;
            this.InstructionField = InstructionField;
            this.Field = Field;
            this.FieldValue = FieldValue;
        }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public IdWithName Template { get; set; }

        /// <summary>
        /// Gets or Sets Instruction
        /// </summary>
        [DataMember(Name = "instruction", EmitDefaultValue = false)]
        public string Instruction { get; set; }

        /// <summary>
        /// Gets or Sets InstructionField
        /// </summary>
        [DataMember(Name = "instructionField", EmitDefaultValue = false)]
        public string InstructionField { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets FieldValue
        /// </summary>
        [DataMember(Name = "fieldValue", EmitDefaultValue = false)]
        public string FieldValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusMessageDocumentLocation {\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Instruction: ").Append(Instruction).Append("\n");
            sb.Append("  InstructionField: ").Append(InstructionField).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  FieldValue: ").Append(FieldValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatusMessageDocumentLocation);
        }

        /// <summary>
        /// Returns true if StatusMessageDocumentLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusMessageDocumentLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusMessageDocumentLocation input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) &&
                (
                    this.Instruction == input.Instruction ||
                    (this.Instruction != null &&
                    this.Instruction.Equals(input.Instruction))
                ) &&
                (
                    this.InstructionField == input.InstructionField ||
                    (this.InstructionField != null &&
                    this.InstructionField.Equals(input.InstructionField))
                ) &&
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) &&
                (
                    this.FieldValue == input.FieldValue ||
                    (this.FieldValue != null &&
                    this.FieldValue.Equals(input.FieldValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.Instruction != null)
                    hashCode = hashCode * 59 + this.Instruction.GetHashCode();
                if (this.InstructionField != null)
                    hashCode = hashCode * 59 + this.InstructionField.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.FieldValue != null)
                    hashCode = hashCode * 59 + this.FieldValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
