/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// StatusMessageDocumentLocation
    /// </summary>
    [DataContract]
    public partial class StatusMessageDocumentLocation : IEquatable<StatusMessageDocumentLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusMessageDocumentLocation" /> class.
        /// </summary>
        /// <param name="Template">Template.</param>
        /// <param name="Instruction">Instruction.</param>
        /// <param name="InstructionField">InstructionField.</param>
        /// <param name="Field">Field.</param>
        /// <param name="FieldValue">FieldValue.</param>
        public StatusMessageDocumentLocation(IdWithName Template = default(IdWithName), string Instruction = default(string), string InstructionField = default(string), string Field = default(string), string FieldValue = default(string))
        {
            this.Template = Template;
            this.Instruction = Instruction;
            this.InstructionField = InstructionField;
            this.Field = Field;
            this.FieldValue = FieldValue;
        }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public IdWithName Template { get; set; }
        /// <summary>
        /// Gets or Sets Instruction
        /// </summary>
        [DataMember(Name = "instruction", EmitDefaultValue = false)]
        public string Instruction { get; set; }
        /// <summary>
        /// Gets or Sets InstructionField
        /// </summary>
        [DataMember(Name = "instructionField", EmitDefaultValue = false)]
        public string InstructionField { get; set; }
        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }
        /// <summary>
        /// Gets or Sets FieldValue
        /// </summary>
        [DataMember(Name = "fieldValue", EmitDefaultValue = false)]
        public string FieldValue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusMessageDocumentLocation {\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Instruction: ").Append(Instruction).Append("\n");
            sb.Append("  InstructionField: ").Append(InstructionField).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  FieldValue: ").Append(FieldValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StatusMessageDocumentLocation);
        }

        /// <summary>
        /// Returns true if StatusMessageDocumentLocation instances are equal
        /// </summary>
        /// <param name="other">Instance of StatusMessageDocumentLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusMessageDocumentLocation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                ) &&
                (
                    this.Instruction == other.Instruction ||
                    this.Instruction != null &&
                    this.Instruction.Equals(other.Instruction)
                ) &&
                (
                    this.InstructionField == other.InstructionField ||
                    this.InstructionField != null &&
                    this.InstructionField.Equals(other.InstructionField)
                ) &&
                (
                    this.Field == other.Field ||
                    this.Field != null &&
                    this.Field.Equals(other.Field)
                ) &&
                (
                    this.FieldValue == other.FieldValue ||
                    this.FieldValue != null &&
                    this.FieldValue.Equals(other.FieldValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                if (this.Instruction != null)
                    hash = hash * 59 + this.Instruction.GetHashCode();
                if (this.InstructionField != null)
                    hash = hash * 59 + this.InstructionField.GetHashCode();
                if (this.Field != null)
                    hash = hash * 59 + this.Field.GetHashCode();
                if (this.FieldValue != null)
                    hash = hash * 59 + this.FieldValue.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
