/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// Settings
    /// </summary>
    [DataContract]
    public partial class Settings :  IEquatable<Settings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Settings" /> class.
        /// </summary>
        /// <param name="Project">Project.</param>
        /// <param name="DefaultPlugin">DefaultPlugin.</param>
        /// <param name="Cleanup">Cleanup.</param>
        /// <param name="UserManagement">UserManagement.</param>
        /// <param name="Frontend">Frontend.</param>
        public Settings(ProjectSettings Project = default(ProjectSettings), DefaultPluginSettings DefaultPlugin = default(DefaultPluginSettings), CleanupSettings Cleanup = default(CleanupSettings), UserManagementSettings UserManagement = default(UserManagementSettings), Object Frontend = default(Object))
        {
            this.Project = Project;
            this.DefaultPlugin = DefaultPlugin;
            this.Cleanup = Cleanup;
            this.UserManagement = UserManagement;
            this.Frontend = Frontend;
        }
        
        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public ProjectSettings Project { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPlugin
        /// </summary>
        [DataMember(Name="defaultPlugin", EmitDefaultValue=false)]
        public DefaultPluginSettings DefaultPlugin { get; set; }

        /// <summary>
        /// Gets or Sets Cleanup
        /// </summary>
        [DataMember(Name="cleanup", EmitDefaultValue=false)]
        public CleanupSettings Cleanup { get; set; }

        /// <summary>
        /// Gets or Sets UserManagement
        /// </summary>
        [DataMember(Name="userManagement", EmitDefaultValue=false)]
        public UserManagementSettings UserManagement { get; set; }

        /// <summary>
        /// Gets or Sets Frontend
        /// </summary>
        [DataMember(Name="frontend", EmitDefaultValue=false)]
        public Object Frontend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Settings {\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  DefaultPlugin: ").Append(DefaultPlugin).Append("\n");
            sb.Append("  Cleanup: ").Append(Cleanup).Append("\n");
            sb.Append("  UserManagement: ").Append(UserManagement).Append("\n");
            sb.Append("  Frontend: ").Append(Frontend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Settings);
        }

        /// <summary>
        /// Returns true if Settings instances are equal
        /// </summary>
        /// <param name="input">Instance of Settings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Settings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.DefaultPlugin == input.DefaultPlugin ||
                    (this.DefaultPlugin != null &&
                    this.DefaultPlugin.Equals(input.DefaultPlugin))
                ) && 
                (
                    this.Cleanup == input.Cleanup ||
                    (this.Cleanup != null &&
                    this.Cleanup.Equals(input.Cleanup))
                ) && 
                (
                    this.UserManagement == input.UserManagement ||
                    (this.UserManagement != null &&
                    this.UserManagement.Equals(input.UserManagement))
                ) && 
                (
                    this.Frontend == input.Frontend ||
                    (this.Frontend != null &&
                    this.Frontend.Equals(input.Frontend))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.DefaultPlugin != null)
                    hashCode = hashCode * 59 + this.DefaultPlugin.GetHashCode();
                if (this.Cleanup != null)
                    hashCode = hashCode * 59 + this.Cleanup.GetHashCode();
                if (this.UserManagement != null)
                    hashCode = hashCode * 59 + this.UserManagement.GetHashCode();
                if (this.Frontend != null)
                    hashCode = hashCode * 59 + this.Frontend.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
