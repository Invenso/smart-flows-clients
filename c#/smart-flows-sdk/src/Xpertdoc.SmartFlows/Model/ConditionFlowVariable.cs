/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// ConditionFlowVariable
    /// </summary>
    [DataContract]
    public partial class ConditionFlowVariable : IEquatable<ConditionFlowVariable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionFlowVariable" /> class.
        /// </summary>
        /// <param name="BlockId">BlockId.</param>
        /// <param name="OutputId">OutputId.</param>
        /// <param name="_Parameter">_Parameter.</param>
        /// <param name="DataPath">DataPath.</param>
        public ConditionFlowVariable(string BlockId = default(string), string OutputId = default(string), string _Parameter = default(string), string DataPath = default(string))
        {
            this.BlockId = BlockId;
            this.OutputId = OutputId;
            this._Parameter = _Parameter;
            this.DataPath = DataPath;
        }

        /// <summary>
        /// Gets or Sets BlockId
        /// </summary>
        [DataMember(Name = "blockId", EmitDefaultValue = false)]
        public string BlockId { get; set; }
        /// <summary>
        /// Gets or Sets OutputId
        /// </summary>
        [DataMember(Name = "outputId", EmitDefaultValue = false)]
        public string OutputId { get; set; }
        /// <summary>
        /// Gets or Sets _Parameter
        /// </summary>
        [DataMember(Name = "parameter", EmitDefaultValue = false)]
        public string _Parameter { get; set; }
        /// <summary>
        /// Gets or Sets DataPath
        /// </summary>
        [DataMember(Name = "dataPath", EmitDefaultValue = false)]
        public string DataPath { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionFlowVariable {\n");
            sb.Append("  BlockId: ").Append(BlockId).Append("\n");
            sb.Append("  OutputId: ").Append(OutputId).Append("\n");
            sb.Append("  _Parameter: ").Append(_Parameter).Append("\n");
            sb.Append("  DataPath: ").Append(DataPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConditionFlowVariable);
        }

        /// <summary>
        /// Returns true if ConditionFlowVariable instances are equal
        /// </summary>
        /// <param name="other">Instance of ConditionFlowVariable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionFlowVariable other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.BlockId == other.BlockId ||
                    this.BlockId != null &&
                    this.BlockId.Equals(other.BlockId)
                ) &&
                (
                    this.OutputId == other.OutputId ||
                    this.OutputId != null &&
                    this.OutputId.Equals(other.OutputId)
                ) &&
                (
                    this._Parameter == other._Parameter ||
                    this._Parameter != null &&
                    this._Parameter.Equals(other._Parameter)
                ) &&
                (
                    this.DataPath == other.DataPath ||
                    this.DataPath != null &&
                    this.DataPath.Equals(other.DataPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BlockId != null)
                    hash = hash * 59 + this.BlockId.GetHashCode();
                if (this.OutputId != null)
                    hash = hash * 59 + this.OutputId.GetHashCode();
                if (this._Parameter != null)
                    hash = hash * 59 + this._Parameter.GetHashCode();
                if (this.DataPath != null)
                    hash = hash * 59 + this.DataPath.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
