/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DatasetFormContent
    /// </summary>
    [DataContract]
    public partial class DatasetFormContent : IEquatable<DatasetFormContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetFormContent" /> class.
        /// </summary>
        /// <param name="Form">Form.</param>
        /// <param name="Library">Library.</param>
        /// <param name="Group">Group.</param>
        /// <param name="WrapperElementName">WrapperElementName.</param>
        /// <param name="PrimaryEntity">PrimaryEntity.</param>
        /// <param name="SchemaContent">SchemaContent.</param>
        public DatasetFormContent(IdWithName Form = default(IdWithName), IdWithName Library = default(IdWithName), IdWithName Group = default(IdWithName), string WrapperElementName = default(string), string PrimaryEntity = default(string), byte[] SchemaContent = default(byte[]))
        {
            this.Form = Form;
            this.Library = Library;
            this.Group = Group;
            this.WrapperElementName = WrapperElementName;
            this.PrimaryEntity = PrimaryEntity;
            this.SchemaContent = SchemaContent;
        }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name = "form", EmitDefaultValue = false)]
        public IdWithName Form { get; set; }
        /// <summary>
        /// Gets or Sets Library
        /// </summary>
        [DataMember(Name = "library", EmitDefaultValue = false)]
        public IdWithName Library { get; set; }
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public IdWithName Group { get; set; }
        /// <summary>
        /// Gets or Sets WrapperElementName
        /// </summary>
        [DataMember(Name = "wrapperElementName", EmitDefaultValue = false)]
        public string WrapperElementName { get; set; }
        /// <summary>
        /// Gets or Sets PrimaryEntity
        /// </summary>
        [DataMember(Name = "primaryEntity", EmitDefaultValue = false)]
        public string PrimaryEntity { get; set; }
        /// <summary>
        /// Gets or Sets SchemaContent
        /// </summary>
        [DataMember(Name = "schemaContent", EmitDefaultValue = false)]
        public byte[] SchemaContent { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatasetFormContent {\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  Library: ").Append(Library).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  WrapperElementName: ").Append(WrapperElementName).Append("\n");
            sb.Append("  PrimaryEntity: ").Append(PrimaryEntity).Append("\n");
            sb.Append("  SchemaContent: ").Append(SchemaContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DatasetFormContent);
        }

        /// <summary>
        /// Returns true if DatasetFormContent instances are equal
        /// </summary>
        /// <param name="other">Instance of DatasetFormContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatasetFormContent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Form == other.Form ||
                    this.Form != null &&
                    this.Form.Equals(other.Form)
                ) &&
                (
                    this.Library == other.Library ||
                    this.Library != null &&
                    this.Library.Equals(other.Library)
                ) &&
                (
                    this.Group == other.Group ||
                    this.Group != null &&
                    this.Group.Equals(other.Group)
                ) &&
                (
                    this.WrapperElementName == other.WrapperElementName ||
                    this.WrapperElementName != null &&
                    this.WrapperElementName.Equals(other.WrapperElementName)
                ) &&
                (
                    this.PrimaryEntity == other.PrimaryEntity ||
                    this.PrimaryEntity != null &&
                    this.PrimaryEntity.Equals(other.PrimaryEntity)
                ) &&
                (
                    this.SchemaContent == other.SchemaContent ||
                    this.SchemaContent != null &&
                    this.SchemaContent.Equals(other.SchemaContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Form != null)
                    hash = hash * 59 + this.Form.GetHashCode();
                if (this.Library != null)
                    hash = hash * 59 + this.Library.GetHashCode();
                if (this.Group != null)
                    hash = hash * 59 + this.Group.GetHashCode();
                if (this.WrapperElementName != null)
                    hash = hash * 59 + this.WrapperElementName.GetHashCode();
                if (this.PrimaryEntity != null)
                    hash = hash * 59 + this.PrimaryEntity.GetHashCode();
                if (this.SchemaContent != null)
                    hash = hash * 59 + this.SchemaContent.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
