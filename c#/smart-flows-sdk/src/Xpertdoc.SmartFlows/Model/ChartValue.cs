/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// ChartValue
    /// </summary>
    [DataContract]
    public partial class ChartValue : IEquatable<ChartValue>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {

            /// <summary>
            /// Enum String for "string"
            /// </summary>
            [EnumMember(Value = "string")]
            String,

            /// <summary>
            /// Enum Number for "number"
            /// </summary>
            [EnumMember(Value = "number")]
            Number,

            /// <summary>
            /// Enum Boolean for "boolean"
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean,

            /// <summary>
            /// Enum DateTime for "dateTime"
            /// </summary>
            [EnumMember(Value = "dateTime")]
            DateTime,

            /// <summary>
            /// Enum Date for "date"
            /// </summary>
            [EnumMember(Value = "date")]
            Date,

            /// <summary>
            /// Enum Time for "time"
            /// </summary>
            [EnumMember(Value = "time")]
            Time
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartValue" /> class.
        /// </summary>
        /// <param name="Value">Value.</param>
        /// <param name="NumberValue">NumberValue.</param>
        /// <param name="DateTimeValue">DateTimeValue.</param>
        /// <param name="Type">Type.</param>
        public ChartValue(string Value = default(string), decimal? NumberValue = default(decimal?), string DateTimeValue = default(string), TypeEnum? Type = default(TypeEnum?))
        {
            this.Value = Value;
            this.NumberValue = NumberValue;
            this.DateTimeValue = DateTimeValue;
            this.Type = Type;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }
        /// <summary>
        /// Gets or Sets NumberValue
        /// </summary>
        [DataMember(Name = "numberValue", EmitDefaultValue = false)]
        public decimal? NumberValue { get; set; }
        /// <summary>
        /// Gets or Sets DateTimeValue
        /// </summary>
        [DataMember(Name = "dateTimeValue", EmitDefaultValue = false)]
        public string DateTimeValue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChartValue {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  DateTimeValue: ").Append(DateTimeValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChartValue);
        }

        /// <summary>
        /// Returns true if ChartValue instances are equal
        /// </summary>
        /// <param name="other">Instance of ChartValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartValue other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) &&
                (
                    this.NumberValue == other.NumberValue ||
                    this.NumberValue != null &&
                    this.NumberValue.Equals(other.NumberValue)
                ) &&
                (
                    this.DateTimeValue == other.DateTimeValue ||
                    this.DateTimeValue != null &&
                    this.DateTimeValue.Equals(other.DateTimeValue)
                ) &&
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.NumberValue != null)
                    hash = hash * 59 + this.NumberValue.GetHashCode();
                if (this.DateTimeValue != null)
                    hash = hash * 59 + this.DateTimeValue.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
