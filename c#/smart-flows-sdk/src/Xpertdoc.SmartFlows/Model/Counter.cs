/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// Counter
    /// </summary>
    [DataContract]
    public partial class Counter : IEquatable<Counter>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Window
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WindowEnum
        {

            /// <summary>
            /// Enum Year for "year"
            /// </summary>
            [EnumMember(Value = "year")]
            Year,

            /// <summary>
            /// Enum Month for "month"
            /// </summary>
            [EnumMember(Value = "month")]
            Month
        }

        /// <summary>
        /// Gets or Sets Window
        /// </summary>
        [DataMember(Name = "window", EmitDefaultValue = false)]
        public WindowEnum? Window { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Counter" /> class.
        /// </summary>
        /// <param name="Window">Window.</param>
        /// <param name="Start">Start.</param>
        /// <param name="Documents">Documents.</param>
        /// <param name="Executions">Executions.</param>
        public Counter(WindowEnum? Window = default(WindowEnum?), DateTime? Start = default(DateTime?), CounterDocuments Documents = default(CounterDocuments), int? Executions = default(int?))
        {
            this.Window = Window;
            this.Start = Start;
            this.Documents = Documents;
            this.Executions = Executions;
        }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public DateTime? Start { get; set; }
        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public CounterDocuments Documents { get; set; }
        /// <summary>
        /// Gets or Sets Executions
        /// </summary>
        [DataMember(Name = "executions", EmitDefaultValue = false)]
        public int? Executions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Counter {\n");
            sb.Append("  Window: ").Append(Window).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Executions: ").Append(Executions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Counter);
        }

        /// <summary>
        /// Returns true if Counter instances are equal
        /// </summary>
        /// <param name="other">Instance of Counter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Counter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Window == other.Window ||
                    this.Window != null &&
                    this.Window.Equals(other.Window)
                ) &&
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) &&
                (
                    this.Documents == other.Documents ||
                    this.Documents != null &&
                    this.Documents.Equals(other.Documents)
                ) &&
                (
                    this.Executions == other.Executions ||
                    this.Executions != null &&
                    this.Executions.Equals(other.Executions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Window != null)
                    hash = hash * 59 + this.Window.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.Documents != null)
                    hash = hash * 59 + this.Documents.GetHashCode();
                if (this.Executions != null)
                    hash = hash * 59 + this.Executions.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
