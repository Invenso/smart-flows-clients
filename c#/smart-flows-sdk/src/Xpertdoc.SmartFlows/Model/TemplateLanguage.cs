/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// TemplateLanguage
    /// </summary>
    [DataContract]
    public partial class TemplateLanguage : IEquatable<TemplateLanguage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateLanguage" /> class.
        /// </summary>
        /// <param name="Template">Template.</param>
        /// <param name="Language">Language.</param>
        /// <param name="IsDefault">IsDefault.</param>
        /// <param name="HasContent">HasContent.</param>
        /// <param name="ContentLink">ContentLink.</param>
        public TemplateLanguage(string Template = default(string), string Language = default(string), bool? IsDefault = default(bool?), bool? HasContent = default(bool?), string ContentLink = default(string))
        {
            this.Template = Template;
            this.Language = Language;
            this.IsDefault = IsDefault;
            this.HasContent = HasContent;
            this.ContentLink = ContentLink;
        }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public string Template { get; set; }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }
        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Gets or Sets HasContent
        /// </summary>
        [DataMember(Name = "hasContent", EmitDefaultValue = false)]
        public bool? HasContent { get; set; }
        /// <summary>
        /// Gets or Sets ContentLink
        /// </summary>
        [DataMember(Name = "contentLink", EmitDefaultValue = false)]
        public string ContentLink { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateLanguage {\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  HasContent: ").Append(HasContent).Append("\n");
            sb.Append("  ContentLink: ").Append(ContentLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TemplateLanguage);
        }

        /// <summary>
        /// Returns true if TemplateLanguage instances are equal
        /// </summary>
        /// <param name="other">Instance of TemplateLanguage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateLanguage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                ) &&
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) &&
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) &&
                (
                    this.HasContent == other.HasContent ||
                    this.HasContent != null &&
                    this.HasContent.Equals(other.HasContent)
                ) &&
                (
                    this.ContentLink == other.ContentLink ||
                    this.ContentLink != null &&
                    this.ContentLink.Equals(other.ContentLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                if (this.HasContent != null)
                    hash = hash * 59 + this.HasContent.GetHashCode();
                if (this.ContentLink != null)
                    hash = hash * 59 + this.ContentLink.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
