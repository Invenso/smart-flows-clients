/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// AuthenticationInfo
    /// </summary>
    [DataContract]
    public partial class AuthenticationInfo : IEquatable<AuthenticationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationInfo" /> class.
        /// </summary>
        /// <param name="Login">Login.</param>
        /// <param name="Oauth2">Oauth2.</param>
        public AuthenticationInfo(AuthenticationInfoLogin Login = default(AuthenticationInfoLogin), List<AuthenticationInfoOauth2> Oauth2 = default(List<AuthenticationInfoOauth2>))
        {
            this.Login = Login;
            this.Oauth2 = Oauth2;
        }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public AuthenticationInfoLogin Login { get; set; }

        /// <summary>
        /// Gets or Sets Oauth2
        /// </summary>
        [DataMember(Name = "oauth2", EmitDefaultValue = false)]
        public List<AuthenticationInfoOauth2> Oauth2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationInfo {\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Oauth2: ").Append(Oauth2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationInfo);
        }

        /// <summary>
        /// Returns true if AuthenticationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Login == input.Login ||
                    (this.Login != null &&
                    this.Login.Equals(input.Login))
                ) &&
                (
                    this.Oauth2 == input.Oauth2 ||
                    this.Oauth2 != null &&
                    this.Oauth2.SequenceEqual(input.Oauth2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Login != null)
                    hashCode = hashCode * 59 + this.Login.GetHashCode();
                if (this.Oauth2 != null)
                    hashCode = hashCode * 59 + this.Oauth2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
