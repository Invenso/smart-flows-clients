/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// AuthenticationInfo
    /// </summary>
    [DataContract]
    public partial class AuthenticationInfo : IEquatable<AuthenticationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationInfo" /> class.
        /// </summary>
        /// <param name="Login">Login.</param>
        /// <param name="ResetPasswordSupported">ResetPasswordSupported.</param>
        /// <param name="Oauth2">Oauth2.</param>
        /// <param name="Methods">Methods.</param>
        public AuthenticationInfo(AuthenticationInfoLogin Login = default(AuthenticationInfoLogin), bool? ResetPasswordSupported = default(bool?), List<AuthenticationInfoOauth2> Oauth2 = default(List<AuthenticationInfoOauth2>), List<AuthenticationInfoMethods> Methods = default(List<AuthenticationInfoMethods>))
        {
            this.Login = Login;
            this.ResetPasswordSupported = ResetPasswordSupported;
            this.Oauth2 = Oauth2;
            this.Methods = Methods;
        }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public AuthenticationInfoLogin Login { get; set; }
        /// <summary>
        /// Gets or Sets ResetPasswordSupported
        /// </summary>
        [DataMember(Name = "resetPasswordSupported", EmitDefaultValue = false)]
        public bool? ResetPasswordSupported { get; set; }
        /// <summary>
        /// Gets or Sets Oauth2
        /// </summary>
        [DataMember(Name = "oauth2", EmitDefaultValue = false)]
        public List<AuthenticationInfoOauth2> Oauth2 { get; set; }
        /// <summary>
        /// Gets or Sets Methods
        /// </summary>
        [DataMember(Name = "methods", EmitDefaultValue = false)]
        public List<AuthenticationInfoMethods> Methods { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationInfo {\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  ResetPasswordSupported: ").Append(ResetPasswordSupported).Append("\n");
            sb.Append("  Oauth2: ").Append(Oauth2).Append("\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AuthenticationInfo);
        }

        /// <summary>
        /// Returns true if AuthenticationInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AuthenticationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Login == other.Login ||
                    this.Login != null &&
                    this.Login.Equals(other.Login)
                ) &&
                (
                    this.ResetPasswordSupported == other.ResetPasswordSupported ||
                    this.ResetPasswordSupported != null &&
                    this.ResetPasswordSupported.Equals(other.ResetPasswordSupported)
                ) &&
                (
                    this.Oauth2 == other.Oauth2 ||
                    this.Oauth2 != null &&
                    this.Oauth2.SequenceEqual(other.Oauth2)
                ) &&
                (
                    this.Methods == other.Methods ||
                    this.Methods != null &&
                    this.Methods.SequenceEqual(other.Methods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Login != null)
                    hash = hash * 59 + this.Login.GetHashCode();
                if (this.ResetPasswordSupported != null)
                    hash = hash * 59 + this.ResetPasswordSupported.GetHashCode();
                if (this.Oauth2 != null)
                    hash = hash * 59 + this.Oauth2.GetHashCode();
                if (this.Methods != null)
                    hash = hash * 59 + this.Methods.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
