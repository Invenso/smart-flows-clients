/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// ConnectorTypeResourceFetch
    /// </summary>
    [DataContract]
    public partial class ConnectorTypeResourceFetch : IEquatable<ConnectorTypeResourceFetch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorTypeResourceFetch" /> class.
        /// </summary>
        /// <param name="IsSupported">IsSupported.</param>
        /// <param name="Method">Method.</param>
        public ConnectorTypeResourceFetch(bool? IsSupported = default(bool?), ConnectorTypeResourceFetchMethod Method = default(ConnectorTypeResourceFetchMethod))
        {
            this.IsSupported = IsSupported;
            this.Method = Method;
        }

        /// <summary>
        /// Gets or Sets IsSupported
        /// </summary>
        [DataMember(Name = "isSupported", EmitDefaultValue = false)]
        public bool? IsSupported { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public ConnectorTypeResourceFetchMethod Method { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectorTypeResourceFetch {\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorTypeResourceFetch);
        }

        /// <summary>
        /// Returns true if ConnectorTypeResourceFetch instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorTypeResourceFetch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorTypeResourceFetch input)
        {
            if (input == null)
                return false;

            return
                (
                    this.IsSupported == input.IsSupported ||
                    (this.IsSupported != null &&
                    this.IsSupported.Equals(input.IsSupported))
                ) &&
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsSupported != null)
                    hashCode = hashCode * 59 + this.IsSupported.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
