/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// CustomContentField
    /// </summary>
    [DataContract]
    public partial class CustomContentField :  IEquatable<CustomContentField>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,
            
            /// <summary>
            /// Enum MultiLineText for value: multiLineText
            /// </summary>
            [EnumMember(Value = "multiLineText")]
            MultiLineText = 2,
            
            /// <summary>
            /// Enum RichText for value: richText
            /// </summary>
            [EnumMember(Value = "richText")]
            RichText = 3,
            
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,
            
            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 5,
            
            /// <summary>
            /// Enum EntityRef for value: entityRef
            /// </summary>
            [EnumMember(Value = "entityRef")]
            EntityRef = 6,
            
            /// <summary>
            /// Enum Data for value: data
            /// </summary>
            [EnumMember(Value = "data")]
            Data = 7,
            
            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 8,
            
            /// <summary>
            /// Enum Time for value: time
            /// </summary>
            [EnumMember(Value = "time")]
            Time = 9,
            
            /// <summary>
            /// Enum DateTime for value: dateTime
            /// </summary>
            [EnumMember(Value = "dateTime")]
            DateTime = 10,
            
            /// <summary>
            /// Enum Optionset for value: optionset
            /// </summary>
            [EnumMember(Value = "optionset")]
            Optionset = 11
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomContentField" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="FieldName">FieldName.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Required">Required (default to false).</param>
        /// <param name="Repeating">Repeating (default to false).</param>
        /// <param name="Text">Text.</param>
        /// <param name="MultiLineText">MultiLineText.</param>
        /// <param name="RichText">RichText.</param>
        /// <param name="Optionset">Optionset.</param>
        /// <param name="Number">Number.</param>
        /// <param name="Boolean">Boolean.</param>
        /// <param name="EntityRef">EntityRef.</param>
        /// <param name="Data">Data.</param>
        /// <param name="Date">Date.</param>
        /// <param name="Time">Time.</param>
        /// <param name="DateTime">DateTime.</param>
        public CustomContentField(string Id = default(string), string DisplayName = default(string), string FieldName = default(string), string Description = default(string), TypeEnum? Type = default(TypeEnum?), bool? Required = false, bool? Repeating = false, CustomContentFieldText Text = default(CustomContentFieldText), CustomContentFieldText MultiLineText = default(CustomContentFieldText), CustomContentFieldText RichText = default(CustomContentFieldText), CustomContentFieldOptionset Optionset = default(CustomContentFieldOptionset), CustomContentFieldNumber Number = default(CustomContentFieldNumber), CustomContentFieldBoolean Boolean = default(CustomContentFieldBoolean), CustomContentFieldEntityRef EntityRef = default(CustomContentFieldEntityRef), CustomContentFieldData Data = default(CustomContentFieldData), CustomContentFieldDate Date = default(CustomContentFieldDate), CustomContentFieldTime Time = default(CustomContentFieldTime), CustomContentFieldDateTime DateTime = default(CustomContentFieldDateTime))
        {
            this.Id = Id;
            this.DisplayName = DisplayName;
            this.FieldName = FieldName;
            this.Description = Description;
            this.Type = Type;
            // use default value if no "Required" provided
            if (Required == null)
            {
                this.Required = false;
            }
            else
            {
                this.Required = Required;
            }
            // use default value if no "Repeating" provided
            if (Repeating == null)
            {
                this.Repeating = false;
            }
            else
            {
                this.Repeating = Repeating;
            }
            this.Text = Text;
            this.MultiLineText = MultiLineText;
            this.RichText = RichText;
            this.Optionset = Optionset;
            this.Number = Number;
            this.Boolean = Boolean;
            this.EntityRef = EntityRef;
            this.Data = Data;
            this.Date = Date;
            this.Time = Time;
            this.DateTime = DateTime;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Repeating
        /// </summary>
        [DataMember(Name="repeating", EmitDefaultValue=false)]
        public bool? Repeating { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public CustomContentFieldText Text { get; set; }

        /// <summary>
        /// Gets or Sets MultiLineText
        /// </summary>
        [DataMember(Name="multiLineText", EmitDefaultValue=false)]
        public CustomContentFieldText MultiLineText { get; set; }

        /// <summary>
        /// Gets or Sets RichText
        /// </summary>
        [DataMember(Name="richText", EmitDefaultValue=false)]
        public CustomContentFieldText RichText { get; set; }

        /// <summary>
        /// Gets or Sets Optionset
        /// </summary>
        [DataMember(Name="optionset", EmitDefaultValue=false)]
        public CustomContentFieldOptionset Optionset { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public CustomContentFieldNumber Number { get; set; }

        /// <summary>
        /// Gets or Sets Boolean
        /// </summary>
        [DataMember(Name="boolean", EmitDefaultValue=false)]
        public CustomContentFieldBoolean Boolean { get; set; }

        /// <summary>
        /// Gets or Sets EntityRef
        /// </summary>
        [DataMember(Name="entityRef", EmitDefaultValue=false)]
        public CustomContentFieldEntityRef EntityRef { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public CustomContentFieldData Data { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public CustomContentFieldDate Date { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public CustomContentFieldTime Time { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public CustomContentFieldDateTime DateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomContentField {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Repeating: ").Append(Repeating).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  MultiLineText: ").Append(MultiLineText).Append("\n");
            sb.Append("  RichText: ").Append(RichText).Append("\n");
            sb.Append("  Optionset: ").Append(Optionset).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Boolean: ").Append(Boolean).Append("\n");
            sb.Append("  EntityRef: ").Append(EntityRef).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomContentField);
        }

        /// <summary>
        /// Returns true if CustomContentField instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomContentField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomContentField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Repeating == input.Repeating ||
                    (this.Repeating != null &&
                    this.Repeating.Equals(input.Repeating))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.MultiLineText == input.MultiLineText ||
                    (this.MultiLineText != null &&
                    this.MultiLineText.Equals(input.MultiLineText))
                ) && 
                (
                    this.RichText == input.RichText ||
                    (this.RichText != null &&
                    this.RichText.Equals(input.RichText))
                ) && 
                (
                    this.Optionset == input.Optionset ||
                    (this.Optionset != null &&
                    this.Optionset.Equals(input.Optionset))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Boolean == input.Boolean ||
                    (this.Boolean != null &&
                    this.Boolean.Equals(input.Boolean))
                ) && 
                (
                    this.EntityRef == input.EntityRef ||
                    (this.EntityRef != null &&
                    this.EntityRef.Equals(input.EntityRef))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Repeating != null)
                    hashCode = hashCode * 59 + this.Repeating.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.MultiLineText != null)
                    hashCode = hashCode * 59 + this.MultiLineText.GetHashCode();
                if (this.RichText != null)
                    hashCode = hashCode * 59 + this.RichText.GetHashCode();
                if (this.Optionset != null)
                    hashCode = hashCode * 59 + this.Optionset.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Boolean != null)
                    hashCode = hashCode * 59 + this.Boolean.GetHashCode();
                if (this.EntityRef != null)
                    hashCode = hashCode * 59 + this.EntityRef.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if(this.DisplayName != null && this.DisplayName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 255.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 2048.", new [] { "Description" });
            }

            yield break;
        }
    }

}
