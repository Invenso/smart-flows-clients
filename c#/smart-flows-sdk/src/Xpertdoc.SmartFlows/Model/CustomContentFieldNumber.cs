/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// CustomContentFieldNumber
    /// </summary>
    [DataContract]
    public partial class CustomContentFieldNumber : IEquatable<CustomContentFieldNumber>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {

            /// <summary>
            /// Enum Integer for "integer"
            /// </summary>
            [EnumMember(Value = "integer")]
            Integer,

            /// <summary>
            /// Enum Real for "real"
            /// </summary>
            [EnumMember(Value = "real")]
            Real
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomContentFieldNumber" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="MinValue">MinValue.</param>
        /// <param name="MaxValue">MaxValue.</param>
        /// <param name="_Default">_Default.</param>
        public CustomContentFieldNumber(TypeEnum? Type = default(TypeEnum?), decimal? MinValue = default(decimal?), decimal? MaxValue = default(decimal?), decimal? _Default = default(decimal?))
        {
            this.Type = Type;
            this.MinValue = MinValue;
            this.MaxValue = MaxValue;
            this._Default = _Default;
        }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name = "minValue", EmitDefaultValue = false)]
        public decimal? MinValue { get; set; }
        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name = "maxValue", EmitDefaultValue = false)]
        public decimal? MaxValue { get; set; }
        /// <summary>
        /// Gets or Sets _Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = false)]
        public decimal? _Default { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomContentFieldNumber {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomContentFieldNumber);
        }

        /// <summary>
        /// Returns true if CustomContentFieldNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomContentFieldNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomContentFieldNumber other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) &&
                (
                    this.MinValue == other.MinValue ||
                    this.MinValue != null &&
                    this.MinValue.Equals(other.MinValue)
                ) &&
                (
                    this.MaxValue == other.MaxValue ||
                    this.MaxValue != null &&
                    this.MaxValue.Equals(other.MaxValue)
                ) &&
                (
                    this._Default == other._Default ||
                    this._Default != null &&
                    this._Default.Equals(other._Default)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.MinValue != null)
                    hash = hash * 59 + this.MinValue.GetHashCode();
                if (this.MaxValue != null)
                    hash = hash * 59 + this.MaxValue.GetHashCode();
                if (this._Default != null)
                    hash = hash * 59 + this._Default.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
