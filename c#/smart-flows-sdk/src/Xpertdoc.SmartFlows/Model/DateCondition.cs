/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DateCondition
    /// </summary>
    [DataContract]
    public partial class DateCondition : IEquatable<DateCondition>, IValidatableObject
    {
        /// <summary>
        /// Defines _Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {

            /// <summary>
            /// Enum Between for value: between
            /// </summary>
            [EnumMember(Value = "between")]
            Between = 1,

            /// <summary>
            /// Enum NotBetween for value: notBetween
            /// </summary>
            [EnumMember(Value = "notBetween")]
            NotBetween = 2,

            /// <summary>
            /// Enum EqualTo for value: equalTo
            /// </summary>
            [EnumMember(Value = "equalTo")]
            EqualTo = 3,

            /// <summary>
            /// Enum NotEqualTo for value: notEqualTo
            /// </summary>
            [EnumMember(Value = "notEqualTo")]
            NotEqualTo = 4,

            /// <summary>
            /// Enum After for value: after
            /// </summary>
            [EnumMember(Value = "after")]
            After = 5,

            /// <summary>
            /// Enum Before for value: before
            /// </summary>
            [EnumMember(Value = "before")]
            Before = 6
        }

        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public OperatorEnum? _Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateCondition" /> class.
        /// </summary>
        /// <param name="_Operator">_Operator.</param>
        /// <param name="Value1">Value1.</param>
        /// <param name="Value2">Value2.</param>
        /// <param name="ValueFormat">ValueFormat.</param>
        public DateCondition(OperatorEnum? _Operator = default(OperatorEnum?), ConditionValue Value1 = default(ConditionValue), ConditionValue Value2 = default(ConditionValue), string ValueFormat = default(string))
        {
            this._Operator = _Operator;
            this.Value1 = Value1;
            this.Value2 = Value2;
            this.ValueFormat = ValueFormat;
        }


        /// <summary>
        /// Gets or Sets Value1
        /// </summary>
        [DataMember(Name = "value1", EmitDefaultValue = false)]
        public ConditionValue Value1 { get; set; }

        /// <summary>
        /// Gets or Sets Value2
        /// </summary>
        [DataMember(Name = "value2", EmitDefaultValue = false)]
        public ConditionValue Value2 { get; set; }

        /// <summary>
        /// Gets or Sets ValueFormat
        /// </summary>
        [DataMember(Name = "valueFormat", EmitDefaultValue = false)]
        public string ValueFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateCondition {\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  Value1: ").Append(Value1).Append("\n");
            sb.Append("  Value2: ").Append(Value2).Append("\n");
            sb.Append("  ValueFormat: ").Append(ValueFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateCondition);
        }

        /// <summary>
        /// Returns true if DateCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of DateCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateCondition input)
        {
            if (input == null)
                return false;

            return
                (
                    this._Operator == input._Operator ||
                    (this._Operator != null &&
                    this._Operator.Equals(input._Operator))
                ) &&
                (
                    this.Value1 == input.Value1 ||
                    (this.Value1 != null &&
                    this.Value1.Equals(input.Value1))
                ) &&
                (
                    this.Value2 == input.Value2 ||
                    (this.Value2 != null &&
                    this.Value2.Equals(input.Value2))
                ) &&
                (
                    this.ValueFormat == input.ValueFormat ||
                    (this.ValueFormat != null &&
                    this.ValueFormat.Equals(input.ValueFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Operator != null)
                    hashCode = hashCode * 59 + this._Operator.GetHashCode();
                if (this.Value1 != null)
                    hashCode = hashCode * 59 + this.Value1.GetHashCode();
                if (this.Value2 != null)
                    hashCode = hashCode * 59 + this.Value2.GetHashCode();
                if (this.ValueFormat != null)
                    hashCode = hashCode * 59 + this.ValueFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
