/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// ExpressionFunction
    /// </summary>
    [DataContract]
    public partial class ExpressionFunction : IEquatable<ExpressionFunction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpressionFunction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpressionFunction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpressionFunction" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="HelpLink">HelpLink.</param>
        /// <param name="Categories">Categories.</param>
        /// <param name="Varargs">Varargs (default to false).</param>
        /// <param name="Arguments">Arguments.</param>
        public ExpressionFunction(string Name = default(string), string Description = default(string), string HelpLink = default(string), List<string> Categories = default(List<string>), bool? Varargs = false, List<ExpressionFunctionArguments> Arguments = default(List<ExpressionFunctionArguments>))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ExpressionFunction and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Description = Description;
            this.HelpLink = HelpLink;
            this.Categories = Categories;
            // use default value if no "Varargs" provided
            if (Varargs == null)
            {
                this.Varargs = false;
            }
            else
            {
                this.Varargs = Varargs;
            }
            this.Arguments = Arguments;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets HelpLink
        /// </summary>
        [DataMember(Name = "helpLink", EmitDefaultValue = false)]
        public string HelpLink { get; set; }
        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }
        /// <summary>
        /// Gets or Sets Varargs
        /// </summary>
        [DataMember(Name = "varargs", EmitDefaultValue = false)]
        public bool? Varargs { get; set; }
        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name = "arguments", EmitDefaultValue = false)]
        public List<ExpressionFunctionArguments> Arguments { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpressionFunction {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HelpLink: ").Append(HelpLink).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Varargs: ").Append(Varargs).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExpressionFunction);
        }

        /// <summary>
        /// Returns true if ExpressionFunction instances are equal
        /// </summary>
        /// <param name="other">Instance of ExpressionFunction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpressionFunction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) &&
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) &&
                (
                    this.HelpLink == other.HelpLink ||
                    this.HelpLink != null &&
                    this.HelpLink.Equals(other.HelpLink)
                ) &&
                (
                    this.Categories == other.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(other.Categories)
                ) &&
                (
                    this.Varargs == other.Varargs ||
                    this.Varargs != null &&
                    this.Varargs.Equals(other.Varargs)
                ) &&
                (
                    this.Arguments == other.Arguments ||
                    this.Arguments != null &&
                    this.Arguments.SequenceEqual(other.Arguments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.HelpLink != null)
                    hash = hash * 59 + this.HelpLink.GetHashCode();
                if (this.Categories != null)
                    hash = hash * 59 + this.Categories.GetHashCode();
                if (this.Varargs != null)
                    hash = hash * 59 + this.Varargs.GetHashCode();
                if (this.Arguments != null)
                    hash = hash * 59 + this.Arguments.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
