/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// ExpressionFunctionArguments
    /// </summary>
    [DataContract]
    public partial class ExpressionFunctionArguments : IEquatable<ExpressionFunctionArguments>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {

            /// <summary>
            /// Enum NotSpecified for value: notSpecified
            /// </summary>
            [EnumMember(Value = "notSpecified")]
            NotSpecified = 1,

            /// <summary>
            /// Enum Period for value: period
            /// </summary>
            [EnumMember(Value = "period")]
            Period = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3,

            /// <summary>
            /// Enum Time for value: time
            /// </summary>
            [EnumMember(Value = "time")]
            Time = 4,

            /// <summary>
            /// Enum DateTime for value: dateTime
            /// </summary>
            [EnumMember(Value = "dateTime")]
            DateTime = 5,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 6,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 7,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 8,

            /// <summary>
            /// Enum Pattern for value: pattern
            /// </summary>
            [EnumMember(Value = "pattern")]
            Pattern = 9,

            /// <summary>
            /// Enum DatePattern for value: datePattern
            /// </summary>
            [EnumMember(Value = "datePattern")]
            DatePattern = 10,

            /// <summary>
            /// Enum TimePattern for value: timePattern
            /// </summary>
            [EnumMember(Value = "timePattern")]
            TimePattern = 11,

            /// <summary>
            /// Enum DateTimePattern for value: dateTimePattern
            /// </summary>
            [EnumMember(Value = "dateTimePattern")]
            DateTimePattern = 12,

            /// <summary>
            /// Enum TextWithExtendedCharacters for value: textWithExtendedCharacters
            /// </summary>
            [EnumMember(Value = "textWithExtendedCharacters")]
            TextWithExtendedCharacters = 13,

            /// <summary>
            /// Enum RegEx for value: regEx
            /// </summary>
            [EnumMember(Value = "regEx")]
            RegEx = 14,

            /// <summary>
            /// Enum RegExSubstitution for value: regExSubstitution
            /// </summary>
            [EnumMember(Value = "regExSubstitution")]
            RegExSubstitution = 15,

            /// <summary>
            /// Enum Locale for value: locale
            /// </summary>
            [EnumMember(Value = "locale")]
            Locale = 16,

            /// <summary>
            /// Enum DurationPattern for value: durationPattern
            /// </summary>
            [EnumMember(Value = "durationPattern")]
            DurationPattern = 17,

            /// <summary>
            /// Enum DecimalPattern for value: decimalPattern
            /// </summary>
            [EnumMember(Value = "decimalPattern")]
            DecimalPattern = 18
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpressionFunctionArguments" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Type">Type (default to TypeEnum.NotSpecified).</param>
        /// <param name="Optional">Optional.</param>
        /// <param name="HelpLink">HelpLink.</param>
        /// <param name="DefaultValue">DefaultValue.</param>
        public ExpressionFunctionArguments(string Name = default(string), TypeEnum? Type = TypeEnum.NotSpecified, bool? Optional = default(bool?), string HelpLink = default(string), string DefaultValue = default(string))
        {
            this.Name = Name;
            // use default value if no "Type" provided
            if (Type == null)
            {
                this.Type = TypeEnum.NotSpecified;
            }
            else
            {
                this.Type = Type;
            }
            this.Optional = Optional;
            this.HelpLink = HelpLink;
            this.DefaultValue = DefaultValue;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets Optional
        /// </summary>
        [DataMember(Name = "optional", EmitDefaultValue = false)]
        public bool? Optional { get; set; }

        /// <summary>
        /// Gets or Sets HelpLink
        /// </summary>
        [DataMember(Name = "helpLink", EmitDefaultValue = false)]
        public string HelpLink { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpressionFunctionArguments {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  HelpLink: ").Append(HelpLink).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpressionFunctionArguments);
        }

        /// <summary>
        /// Returns true if ExpressionFunctionArguments instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpressionFunctionArguments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpressionFunctionArguments input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) &&
                (
                    this.Optional == input.Optional ||
                    (this.Optional != null &&
                    this.Optional.Equals(input.Optional))
                ) &&
                (
                    this.HelpLink == input.HelpLink ||
                    (this.HelpLink != null &&
                    this.HelpLink.Equals(input.HelpLink))
                ) &&
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Optional != null)
                    hashCode = hashCode * 59 + this.Optional.GetHashCode();
                if (this.HelpLink != null)
                    hashCode = hashCode * 59 + this.HelpLink.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
