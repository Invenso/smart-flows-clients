/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// CurrencySymbol
    /// </summary>
    [DataContract]
    public partial class CurrencySymbol : IEquatable<CurrencySymbol>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencySymbol" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrencySymbol() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencySymbol" /> class.
        /// </summary>
        /// <param name="Symbol">Symbol.</param>
        /// <param name="DisplayName">DisplayName (required).</param>
        /// <param name="Names">Names.</param>
        /// <param name="IsSystem">IsSystem (default to false).</param>
        public CurrencySymbol(string Symbol = default(string), string DisplayName = default(string), List<string> Names = default(List<string>), bool? IsSystem = false)
        {
            // to ensure "DisplayName" is required (not null)
            if (DisplayName == null)
            {
                throw new InvalidDataException("DisplayName is a required property for CurrencySymbol and cannot be null");
            }
            else
            {
                this.DisplayName = DisplayName;
            }
            this.Symbol = Symbol;
            this.Names = Names;
            // use default value if no "IsSystem" provided
            if (IsSystem == null)
            {
                this.IsSystem = false;
            }
            else
            {
                this.IsSystem = IsSystem;
            }
        }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Gets or Sets Names
        /// </summary>
        [DataMember(Name = "names", EmitDefaultValue = false)]
        public List<string> Names { get; set; }
        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name = "isSystem", EmitDefaultValue = false)]
        public bool? IsSystem { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencySymbol {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CurrencySymbol);
        }

        /// <summary>
        /// Returns true if CurrencySymbol instances are equal
        /// </summary>
        /// <param name="other">Instance of CurrencySymbol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencySymbol other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Symbol == other.Symbol ||
                    this.Symbol != null &&
                    this.Symbol.Equals(other.Symbol)
                ) &&
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) &&
                (
                    this.Names == other.Names ||
                    this.Names != null &&
                    this.Names.SequenceEqual(other.Names)
                ) &&
                (
                    this.IsSystem == other.IsSystem ||
                    this.IsSystem != null &&
                    this.IsSystem.Equals(other.IsSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Symbol != null)
                    hash = hash * 59 + this.Symbol.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Names != null)
                    hash = hash * 59 + this.Names.GetHashCode();
                if (this.IsSystem != null)
                    hash = hash * 59 + this.IsSystem.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
