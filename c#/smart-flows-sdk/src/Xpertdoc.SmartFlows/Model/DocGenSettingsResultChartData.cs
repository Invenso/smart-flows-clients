/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DocGenSettingsResultChartData
    /// </summary>
    [DataContract]
    public partial class DocGenSettingsResultChartData : IEquatable<DocGenSettingsResultChartData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenSettingsResultChartData" /> class.
        /// </summary>
        /// <param name="Include">Include (default to false).</param>
        /// <param name="InstructionId">InstructionId.</param>
        public DocGenSettingsResultChartData(bool? Include = false, string InstructionId = default(string))
        {
            // use default value if no "Include" provided
            if (Include == null)
            {
                this.Include = false;
            }
            else
            {
                this.Include = Include;
            }
            this.InstructionId = InstructionId;
        }

        /// <summary>
        /// Gets or Sets Include
        /// </summary>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public bool? Include { get; set; }

        /// <summary>
        /// Gets or Sets InstructionId
        /// </summary>
        [DataMember(Name = "instructionId", EmitDefaultValue = false)]
        public string InstructionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenSettingsResultChartData {\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  InstructionId: ").Append(InstructionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocGenSettingsResultChartData);
        }

        /// <summary>
        /// Returns true if DocGenSettingsResultChartData instances are equal
        /// </summary>
        /// <param name="input">Instance of DocGenSettingsResultChartData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenSettingsResultChartData input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                ) &&
                (
                    this.InstructionId == input.InstructionId ||
                    (this.InstructionId != null &&
                    this.InstructionId.Equals(input.InstructionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Include != null)
                    hashCode = hashCode * 59 + this.Include.GetHashCode();
                if (this.InstructionId != null)
                    hashCode = hashCode * 59 + this.InstructionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
