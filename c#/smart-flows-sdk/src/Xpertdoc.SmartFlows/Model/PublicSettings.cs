/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// PublicSettings
    /// </summary>
    [DataContract]
    public partial class PublicSettings : IEquatable<PublicSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSettings" /> class.
        /// </summary>
        /// <param name="ProjectId">ProjectId.</param>
        /// <param name="SystemLanguage">SystemLanguage.</param>
        /// <param name="ProjectConsoleUrl">ProjectConsoleUrl.</param>
        /// <param name="FlowExecutionPanelUrl">FlowExecutionPanelUrl.</param>
        public PublicSettings(string ProjectId = default(string), LanguageReference SystemLanguage = default(LanguageReference), string ProjectConsoleUrl = default(string), string FlowExecutionPanelUrl = default(string))
        {
            this.ProjectId = ProjectId;
            this.SystemLanguage = SystemLanguage;
            this.ProjectConsoleUrl = ProjectConsoleUrl;
            this.FlowExecutionPanelUrl = FlowExecutionPanelUrl;
        }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId { get; set; }
        /// <summary>
        /// Gets or Sets SystemLanguage
        /// </summary>
        [DataMember(Name = "systemLanguage", EmitDefaultValue = false)]
        public LanguageReference SystemLanguage { get; set; }
        /// <summary>
        /// Gets or Sets ProjectConsoleUrl
        /// </summary>
        [DataMember(Name = "projectConsoleUrl", EmitDefaultValue = false)]
        public string ProjectConsoleUrl { get; set; }
        /// <summary>
        /// Gets or Sets FlowExecutionPanelUrl
        /// </summary>
        [DataMember(Name = "flowExecutionPanelUrl", EmitDefaultValue = false)]
        public string FlowExecutionPanelUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicSettings {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  SystemLanguage: ").Append(SystemLanguage).Append("\n");
            sb.Append("  ProjectConsoleUrl: ").Append(ProjectConsoleUrl).Append("\n");
            sb.Append("  FlowExecutionPanelUrl: ").Append(FlowExecutionPanelUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PublicSettings);
        }

        /// <summary>
        /// Returns true if PublicSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of PublicSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.ProjectId == other.ProjectId ||
                    this.ProjectId != null &&
                    this.ProjectId.Equals(other.ProjectId)
                ) &&
                (
                    this.SystemLanguage == other.SystemLanguage ||
                    this.SystemLanguage != null &&
                    this.SystemLanguage.Equals(other.SystemLanguage)
                ) &&
                (
                    this.ProjectConsoleUrl == other.ProjectConsoleUrl ||
                    this.ProjectConsoleUrl != null &&
                    this.ProjectConsoleUrl.Equals(other.ProjectConsoleUrl)
                ) &&
                (
                    this.FlowExecutionPanelUrl == other.FlowExecutionPanelUrl ||
                    this.FlowExecutionPanelUrl != null &&
                    this.FlowExecutionPanelUrl.Equals(other.FlowExecutionPanelUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProjectId != null)
                    hash = hash * 59 + this.ProjectId.GetHashCode();
                if (this.SystemLanguage != null)
                    hash = hash * 59 + this.SystemLanguage.GetHashCode();
                if (this.ProjectConsoleUrl != null)
                    hash = hash * 59 + this.ProjectConsoleUrl.GetHashCode();
                if (this.FlowExecutionPanelUrl != null)
                    hash = hash * 59 + this.FlowExecutionPanelUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
