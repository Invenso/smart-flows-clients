/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DocGenSettingsResultPdfEncryption
    /// </summary>
    [DataContract]
    public partial class DocGenSettingsResultPdfEncryption : IEquatable<DocGenSettingsResultPdfEncryption>, IValidatableObject
    {
        /// <summary>
        /// The encryption algorithm. rc4_40: RC4 encryption, key length of 40 bits. rc4_128: RC4 encryption, key length of 128 bits.
        /// </summary>
        /// <value>The encryption algorithm. rc4_40: RC4 encryption, key length of 40 bits. rc4_128: RC4 encryption, key length of 128 bits.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlgorithmEnum
        {

            /// <summary>
            /// Enum _128 for "rc4_128"
            /// </summary>
            [EnumMember(Value = "rc4_128")]
            _128,

            /// <summary>
            /// Enum _40 for "rc4_40"
            /// </summary>
            [EnumMember(Value = "rc4_40")]
            _40
        }


        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PermissionsEnum
        {

            /// <summary>
            /// Enum DisallowAll for "disallowAll"
            /// </summary>
            [EnumMember(Value = "disallowAll")]
            DisallowAll,

            /// <summary>
            /// Enum AllowAll for "allowAll"
            /// </summary>
            [EnumMember(Value = "allowAll")]
            AllowAll,

            /// <summary>
            /// Enum ContentCopy for "contentCopy"
            /// </summary>
            [EnumMember(Value = "contentCopy")]
            ContentCopy,

            /// <summary>
            /// Enum ContentCopyForAccessibility for "contentCopyForAccessibility"
            /// </summary>
            [EnumMember(Value = "contentCopyForAccessibility")]
            ContentCopyForAccessibility,

            /// <summary>
            /// Enum ModifyContents for "modifyContents"
            /// </summary>
            [EnumMember(Value = "modifyContents")]
            ModifyContents,

            /// <summary>
            /// Enum ModifyAnnotations for "modifyAnnotations"
            /// </summary>
            [EnumMember(Value = "modifyAnnotations")]
            ModifyAnnotations,

            /// <summary>
            /// Enum FillIn for "fillIn"
            /// </summary>
            [EnumMember(Value = "fillIn")]
            FillIn,

            /// <summary>
            /// Enum DocumentAssembly for "documentAssembly"
            /// </summary>
            [EnumMember(Value = "documentAssembly")]
            DocumentAssembly,

            /// <summary>
            /// Enum Printing for "printing"
            /// </summary>
            [EnumMember(Value = "printing")]
            Printing,

            /// <summary>
            /// Enum HighResolutionPrinting for "highResolutionPrinting"
            /// </summary>
            [EnumMember(Value = "highResolutionPrinting")]
            HighResolutionPrinting
        }

        /// <summary>
        /// The encryption algorithm. rc4_40: RC4 encryption, key length of 40 bits. rc4_128: RC4 encryption, key length of 128 bits.
        /// </summary>
        /// <value>The encryption algorithm. rc4_40: RC4 encryption, key length of 40 bits. rc4_128: RC4 encryption, key length of 128 bits.</value>
        [DataMember(Name = "algorithm", EmitDefaultValue = false)]
        public AlgorithmEnum? Algorithm { get; set; }
        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public List<PermissionsEnum> Permissions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenSettingsResultPdfEncryption" /> class.
        /// </summary>
        /// <param name="Algorithm">The encryption algorithm. rc4_40: RC4 encryption, key length of 40 bits. rc4_128: RC4 encryption, key length of 128 bits. (default to AlgorithmEnum._128).</param>
        /// <param name="OwnerPassword">The password for the encrypted document.</param>
        /// <param name="UserPassword">The password required for opening the encrypted document.</param>
        /// <param name="Permissions">Permissions.</param>
        public DocGenSettingsResultPdfEncryption(AlgorithmEnum? Algorithm = AlgorithmEnum._128, string OwnerPassword = default(string), string UserPassword = default(string), List<PermissionsEnum> Permissions = default(List<PermissionsEnum>))
        {
            // use default value if no "Algorithm" provided
            if (Algorithm == null)
            {
                this.Algorithm = AlgorithmEnum._128;
            }
            else
            {
                this.Algorithm = Algorithm;
            }
            this.OwnerPassword = OwnerPassword;
            this.UserPassword = UserPassword;
            this.Permissions = Permissions;
        }

        /// <summary>
        /// The password for the encrypted document
        /// </summary>
        /// <value>The password for the encrypted document</value>
        [DataMember(Name = "ownerPassword", EmitDefaultValue = false)]
        public string OwnerPassword { get; set; }
        /// <summary>
        /// The password required for opening the encrypted document
        /// </summary>
        /// <value>The password required for opening the encrypted document</value>
        [DataMember(Name = "userPassword", EmitDefaultValue = false)]
        public string UserPassword { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenSettingsResultPdfEncryption {\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  OwnerPassword: ").Append(OwnerPassword).Append("\n");
            sb.Append("  UserPassword: ").Append(UserPassword).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocGenSettingsResultPdfEncryption);
        }

        /// <summary>
        /// Returns true if DocGenSettingsResultPdfEncryption instances are equal
        /// </summary>
        /// <param name="other">Instance of DocGenSettingsResultPdfEncryption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenSettingsResultPdfEncryption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Algorithm == other.Algorithm ||
                    this.Algorithm != null &&
                    this.Algorithm.Equals(other.Algorithm)
                ) &&
                (
                    this.OwnerPassword == other.OwnerPassword ||
                    this.OwnerPassword != null &&
                    this.OwnerPassword.Equals(other.OwnerPassword)
                ) &&
                (
                    this.UserPassword == other.UserPassword ||
                    this.UserPassword != null &&
                    this.UserPassword.Equals(other.UserPassword)
                ) &&
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(other.Permissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Algorithm != null)
                    hash = hash * 59 + this.Algorithm.GetHashCode();
                if (this.OwnerPassword != null)
                    hash = hash * 59 + this.OwnerPassword.GetHashCode();
                if (this.UserPassword != null)
                    hash = hash * 59 + this.UserPassword.GetHashCode();
                if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
