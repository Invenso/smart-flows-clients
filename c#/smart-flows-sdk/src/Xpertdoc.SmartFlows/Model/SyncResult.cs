/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// SyncResult
    /// </summary>
    [DataContract]
    public partial class SyncResult :  IEquatable<SyncResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncResult" /> class.
        /// </summary>
        /// <param name="AddCount">AddCount.</param>
        /// <param name="UpdateCount">UpdateCount.</param>
        /// <param name="DeactivatedCount">DeactivatedCount.</param>
        public SyncResult(int? AddCount = default(int?), int? UpdateCount = default(int?), int? DeactivatedCount = default(int?))
        {
            this.AddCount = AddCount;
            this.UpdateCount = UpdateCount;
            this.DeactivatedCount = DeactivatedCount;
        }
        
        /// <summary>
        /// Gets or Sets AddCount
        /// </summary>
        [DataMember(Name="addCount", EmitDefaultValue=false)]
        public int? AddCount { get; set; }

        /// <summary>
        /// Gets or Sets UpdateCount
        /// </summary>
        [DataMember(Name="updateCount", EmitDefaultValue=false)]
        public int? UpdateCount { get; set; }

        /// <summary>
        /// Gets or Sets DeactivatedCount
        /// </summary>
        [DataMember(Name="deactivatedCount", EmitDefaultValue=false)]
        public int? DeactivatedCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncResult {\n");
            sb.Append("  AddCount: ").Append(AddCount).Append("\n");
            sb.Append("  UpdateCount: ").Append(UpdateCount).Append("\n");
            sb.Append("  DeactivatedCount: ").Append(DeactivatedCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyncResult);
        }

        /// <summary>
        /// Returns true if SyncResult instances are equal
        /// </summary>
        /// <param name="input">Instance of SyncResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddCount == input.AddCount ||
                    (this.AddCount != null &&
                    this.AddCount.Equals(input.AddCount))
                ) && 
                (
                    this.UpdateCount == input.UpdateCount ||
                    (this.UpdateCount != null &&
                    this.UpdateCount.Equals(input.UpdateCount))
                ) && 
                (
                    this.DeactivatedCount == input.DeactivatedCount ||
                    (this.DeactivatedCount != null &&
                    this.DeactivatedCount.Equals(input.DeactivatedCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddCount != null)
                    hashCode = hashCode * 59 + this.AddCount.GetHashCode();
                if (this.UpdateCount != null)
                    hashCode = hashCode * 59 + this.UpdateCount.GetHashCode();
                if (this.DeactivatedCount != null)
                    hashCode = hashCode * 59 + this.DeactivatedCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
