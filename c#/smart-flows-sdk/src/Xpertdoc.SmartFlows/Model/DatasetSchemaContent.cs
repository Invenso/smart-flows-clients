/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DatasetSchemaContent
    /// </summary>
    [DataContract]
    public partial class DatasetSchemaContent : IEquatable<DatasetSchemaContent>, IValidatableObject
    {
        /// <summary>
        /// Defines SchemaType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemaTypeEnum
        {

            /// <summary>
            /// Enum Xsd for value: xsd
            /// </summary>
            [EnumMember(Value = "xsd")]
            Xsd = 1
        }

        /// <summary>
        /// Gets or Sets SchemaType
        /// </summary>
        [DataMember(Name = "schemaType", EmitDefaultValue = false)]
        public SchemaTypeEnum? SchemaType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetSchemaContent" /> class.
        /// </summary>
        /// <param name="WrapperElementName">WrapperElementName.</param>
        /// <param name="PrimaryEntity">PrimaryEntity.</param>
        /// <param name="SchemaContent">SchemaContent.</param>
        /// <param name="SchemaType">SchemaType.</param>
        public DatasetSchemaContent(string WrapperElementName = default(string), string PrimaryEntity = default(string), byte[] SchemaContent = default(byte[]), SchemaTypeEnum? SchemaType = default(SchemaTypeEnum?))
        {
            this.WrapperElementName = WrapperElementName;
            this.PrimaryEntity = PrimaryEntity;
            this.SchemaContent = SchemaContent;
            this.SchemaType = SchemaType;
        }

        /// <summary>
        /// Gets or Sets WrapperElementName
        /// </summary>
        [DataMember(Name = "wrapperElementName", EmitDefaultValue = false)]
        public string WrapperElementName { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryEntity
        /// </summary>
        [DataMember(Name = "primaryEntity", EmitDefaultValue = false)]
        public string PrimaryEntity { get; set; }

        /// <summary>
        /// Gets or Sets SchemaContent
        /// </summary>
        [DataMember(Name = "schemaContent", EmitDefaultValue = false)]
        public byte[] SchemaContent { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatasetSchemaContent {\n");
            sb.Append("  WrapperElementName: ").Append(WrapperElementName).Append("\n");
            sb.Append("  PrimaryEntity: ").Append(PrimaryEntity).Append("\n");
            sb.Append("  SchemaContent: ").Append(SchemaContent).Append("\n");
            sb.Append("  SchemaType: ").Append(SchemaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DatasetSchemaContent);
        }

        /// <summary>
        /// Returns true if DatasetSchemaContent instances are equal
        /// </summary>
        /// <param name="input">Instance of DatasetSchemaContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatasetSchemaContent input)
        {
            if (input == null)
                return false;

            return
                (
                    this.WrapperElementName == input.WrapperElementName ||
                    (this.WrapperElementName != null &&
                    this.WrapperElementName.Equals(input.WrapperElementName))
                ) &&
                (
                    this.PrimaryEntity == input.PrimaryEntity ||
                    (this.PrimaryEntity != null &&
                    this.PrimaryEntity.Equals(input.PrimaryEntity))
                ) &&
                (
                    this.SchemaContent == input.SchemaContent ||
                    (this.SchemaContent != null &&
                    this.SchemaContent.Equals(input.SchemaContent))
                ) &&
                (
                    this.SchemaType == input.SchemaType ||
                    (this.SchemaType != null &&
                    this.SchemaType.Equals(input.SchemaType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WrapperElementName != null)
                    hashCode = hashCode * 59 + this.WrapperElementName.GetHashCode();
                if (this.PrimaryEntity != null)
                    hashCode = hashCode * 59 + this.PrimaryEntity.GetHashCode();
                if (this.SchemaContent != null)
                    hashCode = hashCode * 59 + this.SchemaContent.GetHashCode();
                if (this.SchemaType != null)
                    hashCode = hashCode * 59 + this.SchemaType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
