/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// ArchiveGeneral
    /// </summary>
    [DataContract]
    public partial class ArchiveGeneral : IEquatable<ArchiveGeneral>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurposeEnum
        {

            /// <summary>
            /// Enum Export for "export"
            /// </summary>
            [EnumMember(Value = "export")]
            Export,

            /// <summary>
            /// Enum Backup for "backup"
            /// </summary>
            [EnumMember(Value = "backup")]
            Backup
        }

        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public PurposeEnum? Purpose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveGeneral" /> class.
        /// </summary>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="Purpose">Purpose.</param>
        /// <param name="DefaultConnectors">DefaultConnectors.</param>
        public ArchiveGeneral(string CreatedAt = default(string), IdWithName CreatedBy = default(IdWithName), PurposeEnum? Purpose = default(PurposeEnum?), List<Archivable> DefaultConnectors = default(List<Archivable>))
        {
            this.CreatedAt = CreatedAt;
            this.CreatedBy = CreatedBy;
            this.Purpose = Purpose;
            this.DefaultConnectors = DefaultConnectors;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public IdWithName CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets DefaultConnectors
        /// </summary>
        [DataMember(Name = "defaultConnectors", EmitDefaultValue = false)]
        public List<Archivable> DefaultConnectors { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArchiveGeneral {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  DefaultConnectors: ").Append(DefaultConnectors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ArchiveGeneral);
        }

        /// <summary>
        /// Returns true if ArchiveGeneral instances are equal
        /// </summary>
        /// <param name="other">Instance of ArchiveGeneral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArchiveGeneral other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) &&
                (
                    this.Purpose == other.Purpose ||
                    this.Purpose != null &&
                    this.Purpose.Equals(other.Purpose)
                ) &&
                (
                    this.DefaultConnectors == other.DefaultConnectors ||
                    this.DefaultConnectors != null &&
                    this.DefaultConnectors.SequenceEqual(other.DefaultConnectors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.Purpose != null)
                    hash = hash * 59 + this.Purpose.GetHashCode();
                if (this.DefaultConnectors != null)
                    hash = hash * 59 + this.DefaultConnectors.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
