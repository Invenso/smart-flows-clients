/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// CounterDocuments
    /// </summary>
    [DataContract]
    public partial class CounterDocuments : IEquatable<CounterDocuments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CounterDocuments" /> class.
        /// </summary>
        /// <param name="Preview">Preview.</param>
        /// <param name="Execution">Execution.</param>
        public CounterDocuments(int? Preview = default(int?), int? Execution = default(int?))
        {
            this.Preview = Preview;
            this.Execution = Execution;
        }

        /// <summary>
        /// Gets or Sets Preview
        /// </summary>
        [DataMember(Name = "preview", EmitDefaultValue = false)]
        public int? Preview { get; set; }
        /// <summary>
        /// Gets or Sets Execution
        /// </summary>
        [DataMember(Name = "execution", EmitDefaultValue = false)]
        public int? Execution { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CounterDocuments {\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("  Execution: ").Append(Execution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CounterDocuments);
        }

        /// <summary>
        /// Returns true if CounterDocuments instances are equal
        /// </summary>
        /// <param name="other">Instance of CounterDocuments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CounterDocuments other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Preview == other.Preview ||
                    this.Preview != null &&
                    this.Preview.Equals(other.Preview)
                ) &&
                (
                    this.Execution == other.Execution ||
                    this.Execution != null &&
                    this.Execution.Equals(other.Execution)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Preview != null)
                    hash = hash * 59 + this.Preview.GetHashCode();
                if (this.Execution != null)
                    hash = hash * 59 + this.Execution.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
