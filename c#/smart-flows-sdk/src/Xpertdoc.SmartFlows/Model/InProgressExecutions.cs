/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// InProgressExecutions
    /// </summary>
    [DataContract]
    public partial class InProgressExecutions :  IEquatable<InProgressExecutions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InProgressExecutions" /> class.
        /// </summary>
        /// <param name="Schedule">Schedule.</param>
        /// <param name="SelectFlow">SelectFlow.</param>
        /// <param name="UserInput">UserInput.</param>
        /// <param name="Waiting">Waiting.</param>
        public InProgressExecutions(Schedule Schedule = default(Schedule), CleanupActionSettings SelectFlow = default(CleanupActionSettings), CleanupActionSettings UserInput = default(CleanupActionSettings), CleanupActionSettings Waiting = default(CleanupActionSettings))
        {
            this.Schedule = Schedule;
            this.SelectFlow = SelectFlow;
            this.UserInput = UserInput;
            this.Waiting = Waiting;
        }
        
        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// Gets or Sets SelectFlow
        /// </summary>
        [DataMember(Name="selectFlow", EmitDefaultValue=false)]
        public CleanupActionSettings SelectFlow { get; set; }

        /// <summary>
        /// Gets or Sets UserInput
        /// </summary>
        [DataMember(Name="userInput", EmitDefaultValue=false)]
        public CleanupActionSettings UserInput { get; set; }

        /// <summary>
        /// Gets or Sets Waiting
        /// </summary>
        [DataMember(Name="waiting", EmitDefaultValue=false)]
        public CleanupActionSettings Waiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InProgressExecutions {\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  SelectFlow: ").Append(SelectFlow).Append("\n");
            sb.Append("  UserInput: ").Append(UserInput).Append("\n");
            sb.Append("  Waiting: ").Append(Waiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InProgressExecutions);
        }

        /// <summary>
        /// Returns true if InProgressExecutions instances are equal
        /// </summary>
        /// <param name="input">Instance of InProgressExecutions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InProgressExecutions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.SelectFlow == input.SelectFlow ||
                    (this.SelectFlow != null &&
                    this.SelectFlow.Equals(input.SelectFlow))
                ) && 
                (
                    this.UserInput == input.UserInput ||
                    (this.UserInput != null &&
                    this.UserInput.Equals(input.UserInput))
                ) && 
                (
                    this.Waiting == input.Waiting ||
                    (this.Waiting != null &&
                    this.Waiting.Equals(input.Waiting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this.SelectFlow != null)
                    hashCode = hashCode * 59 + this.SelectFlow.GetHashCode();
                if (this.UserInput != null)
                    hashCode = hashCode * 59 + this.UserInput.GetHashCode();
                if (this.Waiting != null)
                    hashCode = hashCode * 59 + this.Waiting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
