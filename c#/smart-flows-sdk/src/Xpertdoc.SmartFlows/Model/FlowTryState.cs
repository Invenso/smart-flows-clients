/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// FlowTryState
    /// </summary>
    [DataContract]
    public partial class FlowTryState :  IEquatable<FlowTryState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowTryState" /> class.
        /// </summary>
        /// <param name="BodyTry">BodyTry.</param>
        /// <param name="Error">Error.</param>
        /// <param name="BodyCatch">BodyCatch.</param>
        public FlowTryState(List<FlowZoneState> BodyTry = default(List<FlowZoneState>), string Error = default(string), List<FlowZoneState> BodyCatch = default(List<FlowZoneState>))
        {
            this.BodyTry = BodyTry;
            this.Error = Error;
            this.BodyCatch = BodyCatch;
        }
        
        /// <summary>
        /// Gets or Sets BodyTry
        /// </summary>
        [DataMember(Name="bodyTry", EmitDefaultValue=false)]
        public List<FlowZoneState> BodyTry { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets BodyCatch
        /// </summary>
        [DataMember(Name="bodyCatch", EmitDefaultValue=false)]
        public List<FlowZoneState> BodyCatch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowTryState {\n");
            sb.Append("  BodyTry: ").Append(BodyTry).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  BodyCatch: ").Append(BodyCatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowTryState);
        }

        /// <summary>
        /// Returns true if FlowTryState instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowTryState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowTryState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BodyTry == input.BodyTry ||
                    this.BodyTry != null &&
                    this.BodyTry.SequenceEqual(input.BodyTry)
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.BodyCatch == input.BodyCatch ||
                    this.BodyCatch != null &&
                    this.BodyCatch.SequenceEqual(input.BodyCatch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BodyTry != null)
                    hashCode = hashCode * 59 + this.BodyTry.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.BodyCatch != null)
                    hashCode = hashCode * 59 + this.BodyCatch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
