/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// CompletedExecutions
    /// </summary>
    [DataContract]
    public partial class CompletedExecutions : IEquatable<CompletedExecutions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompletedExecutions" /> class.
        /// </summary>
        /// <param name="Schedule">Schedule.</param>
        /// <param name="Success">Success.</param>
        /// <param name="Error">Error.</param>
        /// <param name="Cancelled">Cancelled.</param>
        /// <param name="Interrupted">Interrupted.</param>
        public CompletedExecutions(Schedule Schedule = default(Schedule), CompletedExecutionsPlan Success = default(CompletedExecutionsPlan), CompletedExecutionsPlan Error = default(CompletedExecutionsPlan), CompletedExecutionsPlan Cancelled = default(CompletedExecutionsPlan), CompletedExecutionsPlan Interrupted = default(CompletedExecutionsPlan))
        {
            this.Schedule = Schedule;
            this.Success = Success;
            this.Error = Error;
            this.Cancelled = Cancelled;
            this.Interrupted = Interrupted;
        }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = false)]
        public CompletedExecutionsPlan Success { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public CompletedExecutionsPlan Error { get; set; }

        /// <summary>
        /// Gets or Sets Cancelled
        /// </summary>
        [DataMember(Name = "cancelled", EmitDefaultValue = false)]
        public CompletedExecutionsPlan Cancelled { get; set; }

        /// <summary>
        /// Gets or Sets Interrupted
        /// </summary>
        [DataMember(Name = "interrupted", EmitDefaultValue = false)]
        public CompletedExecutionsPlan Interrupted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompletedExecutions {\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  Interrupted: ").Append(Interrupted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompletedExecutions);
        }

        /// <summary>
        /// Returns true if CompletedExecutions instances are equal
        /// </summary>
        /// <param name="input">Instance of CompletedExecutions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompletedExecutions input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) &&
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) &&
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) &&
                (
                    this.Cancelled == input.Cancelled ||
                    (this.Cancelled != null &&
                    this.Cancelled.Equals(input.Cancelled))
                ) &&
                (
                    this.Interrupted == input.Interrupted ||
                    (this.Interrupted != null &&
                    this.Interrupted.Equals(input.Interrupted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Cancelled != null)
                    hashCode = hashCode * 59 + this.Cancelled.GetHashCode();
                if (this.Interrupted != null)
                    hashCode = hashCode * 59 + this.Interrupted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
