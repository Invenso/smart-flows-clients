/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// StatisticsPerTime
    /// </summary>
    [DataContract]
    public partial class StatisticsPerTime : IEquatable<StatisticsPerTime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsPerTime" /> class.
        /// </summary>
        /// <param name="Label">Label.</param>
        /// <param name="PerStatus">PerStatus.</param>
        /// <param name="TotalCount">TotalCount.</param>
        public StatisticsPerTime(string Label = default(string), List<StatisticsPerStatus> PerStatus = default(List<StatisticsPerStatus>), int? TotalCount = default(int?))
        {
            this.Label = Label;
            this.PerStatus = PerStatus;
            this.TotalCount = TotalCount;
        }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets PerStatus
        /// </summary>
        [DataMember(Name = "perStatus", EmitDefaultValue = false)]
        public List<StatisticsPerStatus> PerStatus { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatisticsPerTime {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  PerStatus: ").Append(PerStatus).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsPerTime);
        }

        /// <summary>
        /// Returns true if StatisticsPerTime instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsPerTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsPerTime input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) &&
                (
                    this.PerStatus == input.PerStatus ||
                    this.PerStatus != null &&
                    this.PerStatus.SequenceEqual(input.PerStatus)
                ) &&
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.PerStatus != null)
                    hashCode = hashCode * 59 + this.PerStatus.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TotalCount (int?) minimum
            if (this.TotalCount < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalCount, must be a value greater than or equal to 0.", new[] { "TotalCount" });
            }

            yield break;
        }
    }

}
