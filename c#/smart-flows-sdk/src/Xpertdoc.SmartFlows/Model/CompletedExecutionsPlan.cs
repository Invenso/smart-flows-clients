/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// CompletedExecutionsPlan
    /// </summary>
    [DataContract]
    public partial class CompletedExecutionsPlan : IEquatable<CompletedExecutionsPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompletedExecutionsPlan" /> class.
        /// </summary>
        /// <param name="Schedule">Schedule.</param>
        /// <param name="_Internal">_Internal.</param>
        /// <param name="Output">Output.</param>
        /// <param name="Full">Full.</param>
        public CompletedExecutionsPlan(Schedule Schedule = default(Schedule), CleanupActionSettings _Internal = default(CleanupActionSettings), CleanupActionSettings Output = default(CleanupActionSettings), CleanupActionSettings Full = default(CleanupActionSettings))
        {
            this.Schedule = Schedule;
            this._Internal = _Internal;
            this.Output = Output;
            this.Full = Full;
        }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// Gets or Sets _Internal
        /// </summary>
        [DataMember(Name = "internal", EmitDefaultValue = false)]
        public CleanupActionSettings _Internal { get; set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [DataMember(Name = "output", EmitDefaultValue = false)]
        public CleanupActionSettings Output { get; set; }

        /// <summary>
        /// Gets or Sets Full
        /// </summary>
        [DataMember(Name = "full", EmitDefaultValue = false)]
        public CleanupActionSettings Full { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompletedExecutionsPlan {\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  _Internal: ").Append(_Internal).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompletedExecutionsPlan);
        }

        /// <summary>
        /// Returns true if CompletedExecutionsPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of CompletedExecutionsPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompletedExecutionsPlan input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) &&
                (
                    this._Internal == input._Internal ||
                    (this._Internal != null &&
                    this._Internal.Equals(input._Internal))
                ) &&
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) &&
                (
                    this.Full == input.Full ||
                    (this.Full != null &&
                    this.Full.Equals(input.Full))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this._Internal != null)
                    hashCode = hashCode * 59 + this._Internal.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.Full != null)
                    hashCode = hashCode * 59 + this.Full.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
