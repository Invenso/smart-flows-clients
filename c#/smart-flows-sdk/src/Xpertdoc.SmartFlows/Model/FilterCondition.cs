/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// FilterCondition
    /// </summary>
    [DataContract]
    public partial class FilterCondition :  IEquatable<FilterCondition>, IValidatableObject
    {
        /// <summary>
        /// Defines _Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            
            /// <summary>
            /// Enum Between for value: between
            /// </summary>
            [EnumMember(Value = "between")]
            Between = 1,
            
            /// <summary>
            /// Enum NotBetween for value: notBetween
            /// </summary>
            [EnumMember(Value = "notBetween")]
            NotBetween = 2,
            
            /// <summary>
            /// Enum EqualTo for value: equalTo
            /// </summary>
            [EnumMember(Value = "equalTo")]
            EqualTo = 3,
            
            /// <summary>
            /// Enum NotEqualTo for value: notEqualTo
            /// </summary>
            [EnumMember(Value = "notEqualTo")]
            NotEqualTo = 4,
            
            /// <summary>
            /// Enum Like for value: like
            /// </summary>
            [EnumMember(Value = "like")]
            Like = 5,
            
            /// <summary>
            /// Enum NotLike for value: notLike
            /// </summary>
            [EnumMember(Value = "notLike")]
            NotLike = 6,
            
            /// <summary>
            /// Enum GreaterThan for value: greaterThan
            /// </summary>
            [EnumMember(Value = "greaterThan")]
            GreaterThan = 7,
            
            /// <summary>
            /// Enum LessThan for value: lessThan
            /// </summary>
            [EnumMember(Value = "lessThan")]
            LessThan = 8,
            
            /// <summary>
            /// Enum GreaterThanOrEqualTo for value: greaterThanOrEqualTo
            /// </summary>
            [EnumMember(Value = "greaterThanOrEqualTo")]
            GreaterThanOrEqualTo = 9,
            
            /// <summary>
            /// Enum LessThanOrEqualTo for value: lessThanOrEqualTo
            /// </summary>
            [EnumMember(Value = "lessThanOrEqualTo")]
            LessThanOrEqualTo = 10,
            
            /// <summary>
            /// Enum IsTrue for value: isTrue
            /// </summary>
            [EnumMember(Value = "isTrue")]
            IsTrue = 11,
            
            /// <summary>
            /// Enum IsFalse for value: isFalse
            /// </summary>
            [EnumMember(Value = "isFalse")]
            IsFalse = 12,
            
            /// <summary>
            /// Enum IsBlank for value: isBlank
            /// </summary>
            [EnumMember(Value = "isBlank")]
            IsBlank = 13,
            
            /// <summary>
            /// Enum NotIsBlank for value: notIsBlank
            /// </summary>
            [EnumMember(Value = "notIsBlank")]
            NotIsBlank = 14,
            
            /// <summary>
            /// Enum In for value: in
            /// </summary>
            [EnumMember(Value = "in")]
            In = 15,
            
            /// <summary>
            /// Enum IsNull for value: isNull
            /// </summary>
            [EnumMember(Value = "isNull")]
            IsNull = 16,
            
            /// <summary>
            /// Enum IsNotNull for value: isNotNull
            /// </summary>
            [EnumMember(Value = "isNotNull")]
            IsNotNull = 17
        }

        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public OperatorEnum? _Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterCondition" /> class.
        /// </summary>
        /// <param name="Key">Key.</param>
        /// <param name="_Operator">_Operator.</param>
        /// <param name="Values">Values.</param>
        public FilterCondition(string Key = default(string), OperatorEnum? _Operator = default(OperatorEnum?), List<Object> Values = default(List<Object>))
        {
            this.Key = Key;
            this._Operator = _Operator;
            this.Values = Values;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }


        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<Object> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterCondition {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterCondition);
        }

        /// <summary>
        /// Returns true if FilterCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterCondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this._Operator == input._Operator ||
                    (this._Operator != null &&
                    this._Operator.Equals(input._Operator))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this._Operator != null)
                    hashCode = hashCode * 59 + this._Operator.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
