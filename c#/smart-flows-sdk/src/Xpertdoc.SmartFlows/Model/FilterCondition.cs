/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// FilterCondition
    /// </summary>
    [DataContract]
    public partial class FilterCondition : IEquatable<FilterCondition>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {

            /// <summary>
            /// Enum Between for "between"
            /// </summary>
            [EnumMember(Value = "between")]
            Between,

            /// <summary>
            /// Enum NotBetween for "notBetween"
            /// </summary>
            [EnumMember(Value = "notBetween")]
            NotBetween,

            /// <summary>
            /// Enum EqualTo for "equalTo"
            /// </summary>
            [EnumMember(Value = "equalTo")]
            EqualTo,

            /// <summary>
            /// Enum NotEqualTo for "notEqualTo"
            /// </summary>
            [EnumMember(Value = "notEqualTo")]
            NotEqualTo,

            /// <summary>
            /// Enum Like for "like"
            /// </summary>
            [EnumMember(Value = "like")]
            Like,

            /// <summary>
            /// Enum NotLike for "notLike"
            /// </summary>
            [EnumMember(Value = "notLike")]
            NotLike,

            /// <summary>
            /// Enum GreaterThan for "greaterThan"
            /// </summary>
            [EnumMember(Value = "greaterThan")]
            GreaterThan,

            /// <summary>
            /// Enum LessThan for "lessThan"
            /// </summary>
            [EnumMember(Value = "lessThan")]
            LessThan,

            /// <summary>
            /// Enum GreaterThanOrEqualTo for "greaterThanOrEqualTo"
            /// </summary>
            [EnumMember(Value = "greaterThanOrEqualTo")]
            GreaterThanOrEqualTo,

            /// <summary>
            /// Enum LessThanOrEqualTo for "lessThanOrEqualTo"
            /// </summary>
            [EnumMember(Value = "lessThanOrEqualTo")]
            LessThanOrEqualTo,

            /// <summary>
            /// Enum IsTrue for "isTrue"
            /// </summary>
            [EnumMember(Value = "isTrue")]
            IsTrue,

            /// <summary>
            /// Enum IsFalse for "isFalse"
            /// </summary>
            [EnumMember(Value = "isFalse")]
            IsFalse,

            /// <summary>
            /// Enum IsBlank for "isBlank"
            /// </summary>
            [EnumMember(Value = "isBlank")]
            IsBlank,

            /// <summary>
            /// Enum NotIsBlank for "notIsBlank"
            /// </summary>
            [EnumMember(Value = "notIsBlank")]
            NotIsBlank,

            /// <summary>
            /// Enum In for "in"
            /// </summary>
            [EnumMember(Value = "in")]
            In,

            /// <summary>
            /// Enum IsNull for "isNull"
            /// </summary>
            [EnumMember(Value = "isNull")]
            IsNull,

            /// <summary>
            /// Enum IsNotNull for "isNotNull"
            /// </summary>
            [EnumMember(Value = "isNotNull")]
            IsNotNull
        }

        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public OperatorEnum? _Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterCondition" /> class.
        /// </summary>
        /// <param name="Key">Key.</param>
        /// <param name="_Operator">_Operator.</param>
        /// <param name="Values">Values.</param>
        public FilterCondition(string Key = default(string), OperatorEnum? _Operator = default(OperatorEnum?), List<Object> Values = default(List<Object>))
        {
            this.Key = Key;
            this._Operator = _Operator;
            this.Values = Values;
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }
        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<Object> Values { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterCondition {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FilterCondition);
        }

        /// <summary>
        /// Returns true if FilterCondition instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterCondition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) &&
                (
                    this._Operator == other._Operator ||
                    this._Operator != null &&
                    this._Operator.Equals(other._Operator)
                ) &&
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this._Operator != null)
                    hash = hash * 59 + this._Operator.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
