/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// LicenseInformation
    /// </summary>
    [DataContract]
    public partial class LicenseInformation : IEquatable<LicenseInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseInformation" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="Edition">Edition.</param>
        /// <param name="Flavour">Flavour.</param>
        /// <param name="Expiry">Expiry.</param>
        /// <param name="Valid">Valid (default to false).</param>
        /// <param name="Expired">Expired (default to true).</param>
        /// <param name="Limits">Limits.</param>
        /// <param name="Plugins">Plugins.</param>
        public LicenseInformation(string Id = default(string), string DisplayName = default(string), string Edition = default(string), string Flavour = default(string), DateTime? Expiry = default(DateTime?), bool? Valid = false, bool? Expired = true, LicenseInformationLimits Limits = default(LicenseInformationLimits), List<LicenseInformationPlugins> Plugins = default(List<LicenseInformationPlugins>))
        {
            this.Id = Id;
            this.DisplayName = DisplayName;
            this.Edition = Edition;
            this.Flavour = Flavour;
            this.Expiry = Expiry;
            // use default value if no "Valid" provided
            if (Valid == null)
            {
                this.Valid = false;
            }
            else
            {
                this.Valid = Valid;
            }
            // use default value if no "Expired" provided
            if (Expired == null)
            {
                this.Expired = true;
            }
            else
            {
                this.Expired = Expired;
            }
            this.Limits = Limits;
            this.Plugins = Plugins;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Gets or Sets Edition
        /// </summary>
        [DataMember(Name = "edition", EmitDefaultValue = false)]
        public string Edition { get; set; }
        /// <summary>
        /// Gets or Sets Flavour
        /// </summary>
        [DataMember(Name = "flavour", EmitDefaultValue = false)]
        public string Flavour { get; set; }
        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name = "expiry", EmitDefaultValue = false)]
        public DateTime? Expiry { get; set; }
        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "valid", EmitDefaultValue = false)]
        public bool? Valid { get; set; }
        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name = "expired", EmitDefaultValue = false)]
        public bool? Expired { get; set; }
        /// <summary>
        /// Gets or Sets Limits
        /// </summary>
        [DataMember(Name = "limits", EmitDefaultValue = false)]
        public LicenseInformationLimits Limits { get; set; }
        /// <summary>
        /// Gets or Sets Plugins
        /// </summary>
        [DataMember(Name = "plugins", EmitDefaultValue = false)]
        public List<LicenseInformationPlugins> Plugins { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseInformation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  Flavour: ").Append(Flavour).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LicenseInformation);
        }

        /// <summary>
        /// Returns true if LicenseInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of LicenseInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) &&
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) &&
                (
                    this.Edition == other.Edition ||
                    this.Edition != null &&
                    this.Edition.Equals(other.Edition)
                ) &&
                (
                    this.Flavour == other.Flavour ||
                    this.Flavour != null &&
                    this.Flavour.Equals(other.Flavour)
                ) &&
                (
                    this.Expiry == other.Expiry ||
                    this.Expiry != null &&
                    this.Expiry.Equals(other.Expiry)
                ) &&
                (
                    this.Valid == other.Valid ||
                    this.Valid != null &&
                    this.Valid.Equals(other.Valid)
                ) &&
                (
                    this.Expired == other.Expired ||
                    this.Expired != null &&
                    this.Expired.Equals(other.Expired)
                ) &&
                (
                    this.Limits == other.Limits ||
                    this.Limits != null &&
                    this.Limits.Equals(other.Limits)
                ) &&
                (
                    this.Plugins == other.Plugins ||
                    this.Plugins != null &&
                    this.Plugins.SequenceEqual(other.Plugins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Edition != null)
                    hash = hash * 59 + this.Edition.GetHashCode();
                if (this.Flavour != null)
                    hash = hash * 59 + this.Flavour.GetHashCode();
                if (this.Expiry != null)
                    hash = hash * 59 + this.Expiry.GetHashCode();
                if (this.Valid != null)
                    hash = hash * 59 + this.Valid.GetHashCode();
                if (this.Expired != null)
                    hash = hash * 59 + this.Expired.GetHashCode();
                if (this.Limits != null)
                    hash = hash * 59 + this.Limits.GetHashCode();
                if (this.Plugins != null)
                    hash = hash * 59 + this.Plugins.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
