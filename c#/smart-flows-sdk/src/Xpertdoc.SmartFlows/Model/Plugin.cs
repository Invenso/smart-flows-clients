/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// Plugin
    /// </summary>
    [DataContract]
    public partial class Plugin : IEquatable<Plugin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Plugin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Plugin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Plugin" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="DisplayName">DisplayName (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="ConnectorType">ConnectorType.</param>
        /// <param name="InputDataset">InputDataset.</param>
        /// <param name="FlowSteps">FlowSteps.</param>
        public Plugin(string Id = default(string), string DisplayName = default(string), string Description = default(string), IdWithName ConnectorType = default(IdWithName), IdWithName InputDataset = default(IdWithName), List<IdWithName> FlowSteps = default(List<IdWithName>))
        {
            // to ensure "DisplayName" is required (not null)
            if (DisplayName == null)
            {
                throw new InvalidDataException("DisplayName is a required property for Plugin and cannot be null");
            }
            else
            {
                this.DisplayName = DisplayName;
            }
            this.Id = Id;
            this.Description = Description;
            this.ConnectorType = ConnectorType;
            this.InputDataset = InputDataset;
            this.FlowSteps = FlowSteps;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorType
        /// </summary>
        [DataMember(Name = "connectorType", EmitDefaultValue = false)]
        public IdWithName ConnectorType { get; set; }

        /// <summary>
        /// Gets or Sets InputDataset
        /// </summary>
        [DataMember(Name = "inputDataset", EmitDefaultValue = false)]
        public IdWithName InputDataset { get; set; }

        /// <summary>
        /// Gets or Sets FlowSteps
        /// </summary>
        [DataMember(Name = "flowSteps", EmitDefaultValue = false)]
        public List<IdWithName> FlowSteps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Plugin {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ConnectorType: ").Append(ConnectorType).Append("\n");
            sb.Append("  InputDataset: ").Append(InputDataset).Append("\n");
            sb.Append("  FlowSteps: ").Append(FlowSteps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Plugin);
        }

        /// <summary>
        /// Returns true if Plugin instances are equal
        /// </summary>
        /// <param name="input">Instance of Plugin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Plugin input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.ConnectorType == input.ConnectorType ||
                    (this.ConnectorType != null &&
                    this.ConnectorType.Equals(input.ConnectorType))
                ) &&
                (
                    this.InputDataset == input.InputDataset ||
                    (this.InputDataset != null &&
                    this.InputDataset.Equals(input.InputDataset))
                ) &&
                (
                    this.FlowSteps == input.FlowSteps ||
                    this.FlowSteps != null &&
                    this.FlowSteps.SequenceEqual(input.FlowSteps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ConnectorType != null)
                    hashCode = hashCode * 59 + this.ConnectorType.GetHashCode();
                if (this.InputDataset != null)
                    hashCode = hashCode * 59 + this.InputDataset.GetHashCode();
                if (this.FlowSteps != null)
                    hashCode = hashCode * 59 + this.FlowSteps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 255.", new[] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 2048.", new[] { "Description" });
            }

            yield break;
        }
    }

}
