/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// FlowExecutionStateOutput
    /// </summary>
    [DataContract]
    public partial class FlowExecutionStateOutput : IEquatable<FlowExecutionStateOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowExecutionStateOutput" /> class.
        /// </summary>
        /// <param name="Parts">Parts.</param>
        /// <param name="Schema">Schema.</param>
        /// <param name="Model">Model.</param>
        /// <param name="Form">Form.</param>
        public FlowExecutionStateOutput(List<FlowExecutionStateOutputParts> Parts = default(List<FlowExecutionStateOutputParts>), Object Schema = default(Object), Object Model = default(Object), List<Object> Form = default(List<Object>))
        {
            this.Parts = Parts;
            this.Schema = Schema;
            this.Model = Model;
            this.Form = Form;
        }

        /// <summary>
        /// Gets or Sets Parts
        /// </summary>
        [DataMember(Name = "parts", EmitDefaultValue = false)]
        public List<FlowExecutionStateOutputParts> Parts { get; set; }
        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public Object Schema { get; set; }
        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public Object Model { get; set; }
        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name = "form", EmitDefaultValue = false)]
        public List<Object> Form { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowExecutionStateOutput {\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlowExecutionStateOutput);
        }

        /// <summary>
        /// Returns true if FlowExecutionStateOutput instances are equal
        /// </summary>
        /// <param name="other">Instance of FlowExecutionStateOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowExecutionStateOutput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Parts == other.Parts ||
                    this.Parts != null &&
                    this.Parts.SequenceEqual(other.Parts)
                ) &&
                (
                    this.Schema == other.Schema ||
                    this.Schema != null &&
                    this.Schema.Equals(other.Schema)
                ) &&
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) &&
                (
                    this.Form == other.Form ||
                    this.Form != null &&
                    this.Form.SequenceEqual(other.Form)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Parts != null)
                    hash = hash * 59 + this.Parts.GetHashCode();
                if (this.Schema != null)
                    hash = hash * 59 + this.Schema.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Form != null)
                    hash = hash * 59 + this.Form.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
