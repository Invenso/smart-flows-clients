/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DocGenSettingsResultOoxml
    /// </summary>
    [DataContract]
    public partial class DocGenSettingsResultOoxml :  IEquatable<DocGenSettingsResultOoxml>, IValidatableObject
    {
        /// <summary>
        /// Defines Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum Docx for value: docx
            /// </summary>
            [EnumMember(Value = "docx")]
            Docx = 1,
            
            /// <summary>
            /// Enum Dotx for value: dotx
            /// </summary>
            [EnumMember(Value = "dotx")]
            Dotx = 2,
            
            /// <summary>
            /// Enum Docm for value: docm
            /// </summary>
            [EnumMember(Value = "docm")]
            Docm = 3,
            
            /// <summary>
            /// Enum Dotm for value: dotm
            /// </summary>
            [EnumMember(Value = "dotm")]
            Dotm = 4,
            
            /// <summary>
            /// Enum Flatopc for value: flatopc
            /// </summary>
            [EnumMember(Value = "flatopc")]
            Flatopc = 5
        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Defines Compliance
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplianceEnum
        {
            
            /// <summary>
            /// Enum Iso295002008strict for value: iso_29500_2008_strict
            /// </summary>
            [EnumMember(Value = "iso_29500_2008_strict")]
            Iso295002008strict = 1,
            
            /// <summary>
            /// Enum Ecma3762006 for value: ecma_376_2006
            /// </summary>
            [EnumMember(Value = "ecma_376_2006")]
            Ecma3762006 = 2,
            
            /// <summary>
            /// Enum Iso295002008transitional for value: iso_29500_2008_transitional
            /// </summary>
            [EnumMember(Value = "iso_29500_2008_transitional")]
            Iso295002008transitional = 3
        }

        /// <summary>
        /// Gets or Sets Compliance
        /// </summary>
        [DataMember(Name="compliance", EmitDefaultValue=false)]
        public ComplianceEnum? Compliance { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenSettingsResultOoxml" /> class.
        /// </summary>
        /// <param name="Format">Format.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Compliance">Compliance (default to ComplianceEnum.Ecma3762006).</param>
        public DocGenSettingsResultOoxml(FormatEnum? Format = default(FormatEnum?), string Password = default(string), ComplianceEnum? Compliance = ComplianceEnum.Ecma3762006)
        {
            this.Format = Format;
            this.Password = Password;
            // use default value if no "Compliance" provided
            if (Compliance == null)
            {
                this.Compliance = ComplianceEnum.Ecma3762006;
            }
            else
            {
                this.Compliance = Compliance;
            }
        }
        

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenSettingsResultOoxml {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocGenSettingsResultOoxml);
        }

        /// <summary>
        /// Returns true if DocGenSettingsResultOoxml instances are equal
        /// </summary>
        /// <param name="input">Instance of DocGenSettingsResultOoxml to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenSettingsResultOoxml input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Compliance == input.Compliance ||
                    (this.Compliance != null &&
                    this.Compliance.Equals(input.Compliance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Compliance != null)
                    hashCode = hashCode * 59 + this.Compliance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
