/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// FlowSwitchState
    /// </summary>
    [DataContract]
    public partial class FlowSwitchState : IEquatable<FlowSwitchState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowSwitchState" /> class.
        /// </summary>
        /// <param name="CaseValue">CaseValue.</param>
        /// <param name="CaseBody">CaseBody.</param>
        public FlowSwitchState(string CaseValue = default(string), List<FlowZoneState> CaseBody = default(List<FlowZoneState>))
        {
            this.CaseValue = CaseValue;
            this.CaseBody = CaseBody;
        }

        /// <summary>
        /// Gets or Sets CaseValue
        /// </summary>
        [DataMember(Name = "caseValue", EmitDefaultValue = false)]
        public string CaseValue { get; set; }
        /// <summary>
        /// Gets or Sets CaseBody
        /// </summary>
        [DataMember(Name = "caseBody", EmitDefaultValue = false)]
        public List<FlowZoneState> CaseBody { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowSwitchState {\n");
            sb.Append("  CaseValue: ").Append(CaseValue).Append("\n");
            sb.Append("  CaseBody: ").Append(CaseBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlowSwitchState);
        }

        /// <summary>
        /// Returns true if FlowSwitchState instances are equal
        /// </summary>
        /// <param name="other">Instance of FlowSwitchState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowSwitchState other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.CaseValue == other.CaseValue ||
                    this.CaseValue != null &&
                    this.CaseValue.Equals(other.CaseValue)
                ) &&
                (
                    this.CaseBody == other.CaseBody ||
                    this.CaseBody != null &&
                    this.CaseBody.SequenceEqual(other.CaseBody)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CaseValue != null)
                    hash = hash * 59 + this.CaseValue.GetHashCode();
                if (this.CaseBody != null)
                    hash = hash * 59 + this.CaseBody.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
