/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// JpsPrintProps
    /// </summary>
    [DataContract]
    public partial class JpsPrintProps : IEquatable<JpsPrintProps>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Duplexing
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DuplexingEnum
        {

            /// <summary>
            /// Enum Default for "default"
            /// </summary>
            [EnumMember(Value = "default")]
            Default,

            /// <summary>
            /// Enum OneSided for "oneSided"
            /// </summary>
            [EnumMember(Value = "oneSided")]
            OneSided,

            /// <summary>
            /// Enum TwoSidedLongEdge for "twoSidedLongEdge"
            /// </summary>
            [EnumMember(Value = "twoSidedLongEdge")]
            TwoSidedLongEdge,

            /// <summary>
            /// Enum TwoSidedShortEdge for "twoSidedShortEdge"
            /// </summary>
            [EnumMember(Value = "twoSidedShortEdge")]
            TwoSidedShortEdge
        }

        /// <summary>
        /// Gets or Sets Collate
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CollateEnum
        {

            /// <summary>
            /// Enum Default for "default"
            /// </summary>
            [EnumMember(Value = "default")]
            Default,

            /// <summary>
            /// Enum True for "true"
            /// </summary>
            [EnumMember(Value = "true")]
            True,

            /// <summary>
            /// Enum False for "false"
            /// </summary>
            [EnumMember(Value = "false")]
            False
        }

        /// <summary>
        /// Gets or Sets Chromaticity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChromaticityEnum
        {

            /// <summary>
            /// Enum Default for "default"
            /// </summary>
            [EnumMember(Value = "default")]
            Default,

            /// <summary>
            /// Enum Monochrome for "monochrome"
            /// </summary>
            [EnumMember(Value = "monochrome")]
            Monochrome,

            /// <summary>
            /// Enum Color for "color"
            /// </summary>
            [EnumMember(Value = "color")]
            Color
        }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationEnum
        {

            /// <summary>
            /// Enum Default for "default"
            /// </summary>
            [EnumMember(Value = "default")]
            Default,

            /// <summary>
            /// Enum Portrait for "portrait"
            /// </summary>
            [EnumMember(Value = "portrait")]
            Portrait,

            /// <summary>
            /// Enum Landscape for "landscape"
            /// </summary>
            [EnumMember(Value = "landscape")]
            Landscape
        }

        /// <summary>
        /// Gets or Sets Duplexing
        /// </summary>
        [DataMember(Name = "duplexing", EmitDefaultValue = false)]
        public DuplexingEnum? Duplexing { get; set; }
        /// <summary>
        /// Gets or Sets Collate
        /// </summary>
        [DataMember(Name = "collate", EmitDefaultValue = false)]
        public CollateEnum? Collate { get; set; }
        /// <summary>
        /// Gets or Sets Chromaticity
        /// </summary>
        [DataMember(Name = "chromaticity", EmitDefaultValue = false)]
        public ChromaticityEnum? Chromaticity { get; set; }
        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name = "orientation", EmitDefaultValue = false)]
        public OrientationEnum? Orientation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JpsPrintProps" /> class.
        /// </summary>
        /// <param name="Duplexing">Duplexing.</param>
        /// <param name="Collate">Collate.</param>
        /// <param name="Chromaticity">Chromaticity.</param>
        /// <param name="Orientation">Orientation.</param>
        /// <param name="PaperSource">PaperSource.</param>
        /// <param name="FirstPagePaperSource">FirstPagePaperSource.</param>
        /// <param name="PaperSize">PaperSize.</param>
        public JpsPrintProps(DuplexingEnum? Duplexing = default(DuplexingEnum?), CollateEnum? Collate = default(CollateEnum?), ChromaticityEnum? Chromaticity = default(ChromaticityEnum?), OrientationEnum? Orientation = default(OrientationEnum?), string PaperSource = default(string), string FirstPagePaperSource = default(string), string PaperSize = default(string))
        {
            this.Duplexing = Duplexing;
            this.Collate = Collate;
            this.Chromaticity = Chromaticity;
            this.Orientation = Orientation;
            this.PaperSource = PaperSource;
            this.FirstPagePaperSource = FirstPagePaperSource;
            this.PaperSize = PaperSize;
        }

        /// <summary>
        /// Gets or Sets PaperSource
        /// </summary>
        [DataMember(Name = "paperSource", EmitDefaultValue = false)]
        public string PaperSource { get; set; }
        /// <summary>
        /// Gets or Sets FirstPagePaperSource
        /// </summary>
        [DataMember(Name = "firstPagePaperSource", EmitDefaultValue = false)]
        public string FirstPagePaperSource { get; set; }
        /// <summary>
        /// Gets or Sets PaperSize
        /// </summary>
        [DataMember(Name = "paperSize", EmitDefaultValue = false)]
        public string PaperSize { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JpsPrintProps {\n");
            sb.Append("  Duplexing: ").Append(Duplexing).Append("\n");
            sb.Append("  Collate: ").Append(Collate).Append("\n");
            sb.Append("  Chromaticity: ").Append(Chromaticity).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  PaperSource: ").Append(PaperSource).Append("\n");
            sb.Append("  FirstPagePaperSource: ").Append(FirstPagePaperSource).Append("\n");
            sb.Append("  PaperSize: ").Append(PaperSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as JpsPrintProps);
        }

        /// <summary>
        /// Returns true if JpsPrintProps instances are equal
        /// </summary>
        /// <param name="other">Instance of JpsPrintProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JpsPrintProps other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Duplexing == other.Duplexing ||
                    this.Duplexing != null &&
                    this.Duplexing.Equals(other.Duplexing)
                ) &&
                (
                    this.Collate == other.Collate ||
                    this.Collate != null &&
                    this.Collate.Equals(other.Collate)
                ) &&
                (
                    this.Chromaticity == other.Chromaticity ||
                    this.Chromaticity != null &&
                    this.Chromaticity.Equals(other.Chromaticity)
                ) &&
                (
                    this.Orientation == other.Orientation ||
                    this.Orientation != null &&
                    this.Orientation.Equals(other.Orientation)
                ) &&
                (
                    this.PaperSource == other.PaperSource ||
                    this.PaperSource != null &&
                    this.PaperSource.Equals(other.PaperSource)
                ) &&
                (
                    this.FirstPagePaperSource == other.FirstPagePaperSource ||
                    this.FirstPagePaperSource != null &&
                    this.FirstPagePaperSource.Equals(other.FirstPagePaperSource)
                ) &&
                (
                    this.PaperSize == other.PaperSize ||
                    this.PaperSize != null &&
                    this.PaperSize.Equals(other.PaperSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Duplexing != null)
                    hash = hash * 59 + this.Duplexing.GetHashCode();
                if (this.Collate != null)
                    hash = hash * 59 + this.Collate.GetHashCode();
                if (this.Chromaticity != null)
                    hash = hash * 59 + this.Chromaticity.GetHashCode();
                if (this.Orientation != null)
                    hash = hash * 59 + this.Orientation.GetHashCode();
                if (this.PaperSource != null)
                    hash = hash * 59 + this.PaperSource.GetHashCode();
                if (this.FirstPagePaperSource != null)
                    hash = hash * 59 + this.FirstPagePaperSource.GetHashCode();
                if (this.PaperSize != null)
                    hash = hash * 59 + this.PaperSize.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
