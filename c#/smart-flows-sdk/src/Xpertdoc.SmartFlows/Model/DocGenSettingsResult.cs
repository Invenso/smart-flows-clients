/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// DocGenSettingsResult
    /// </summary>
    [DataContract]
    public partial class DocGenSettingsResult : IEquatable<DocGenSettingsResult>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentEnum
        {

            /// <summary>
            /// Enum ReturnContent for "returnContent"
            /// </summary>
            [EnumMember(Value = "returnContent")]
            ReturnContent,

            /// <summary>
            /// Enum StoreContent for "storeContent"
            /// </summary>
            [EnumMember(Value = "storeContent")]
            StoreContent,

            /// <summary>
            /// Enum StoreAndReturnContent for "storeAndReturnContent"
            /// </summary>
            [EnumMember(Value = "storeAndReturnContent")]
            StoreAndReturnContent,

            /// <summary>
            /// Enum NoStoreNoReturn for "noStoreNoReturn"
            /// </summary>
            [EnumMember(Value = "noStoreNoReturn")]
            NoStoreNoReturn
        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {

            /// <summary>
            /// Enum Ooxml for "ooxml"
            /// </summary>
            [EnumMember(Value = "ooxml")]
            Ooxml,

            /// <summary>
            /// Enum Pdf for "pdf"
            /// </summary>
            [EnumMember(Value = "pdf")]
            Pdf,

            /// <summary>
            /// Enum Html for "html"
            /// </summary>
            [EnumMember(Value = "html")]
            Html,

            /// <summary>
            /// Enum Text for "text"
            /// </summary>
            [EnumMember(Value = "text")]
            Text,

            /// <summary>
            /// Enum Xps for "xps"
            /// </summary>
            [EnumMember(Value = "xps")]
            Xps,

            /// <summary>
            /// Enum Odt for "odt"
            /// </summary>
            [EnumMember(Value = "odt")]
            Odt,

            /// <summary>
            /// Enum Rtf for "rtf"
            /// </summary>
            [EnumMember(Value = "rtf")]
            Rtf,

            /// <summary>
            /// Enum Image for "image"
            /// </summary>
            [EnumMember(Value = "image")]
            Image
        }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public ContentEnum? Content { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenSettingsResult" /> class.
        /// </summary>
        /// <param name="Content">Content (default to ContentEnum.StoreContent).</param>
        /// <param name="ChartData">ChartData.</param>
        /// <param name="Format">Format (default to FormatEnum.Pdf).</param>
        /// <param name="Ooxml">Ooxml.</param>
        /// <param name="Image">Image.</param>
        /// <param name="Pdf">Pdf.</param>
        /// <param name="Html">Html.</param>
        /// <param name="Text">Text.</param>
        /// <param name="Odt">Odt.</param>
        public DocGenSettingsResult(ContentEnum? Content = ContentEnum.StoreContent, DocGenSettingsResultChartData ChartData = default(DocGenSettingsResultChartData), FormatEnum? Format = FormatEnum.Pdf, DocGenSettingsResultOoxml Ooxml = default(DocGenSettingsResultOoxml), DocGenSettingsResultImage Image = default(DocGenSettingsResultImage), DocGenSettingsResultPdf Pdf = default(DocGenSettingsResultPdf), DocGenSettingsResultHtml Html = default(DocGenSettingsResultHtml), DocGenSettingsResultText Text = default(DocGenSettingsResultText), DocGenSettingsResultOdt Odt = default(DocGenSettingsResultOdt))
        {
            // use default value if no "Content" provided
            if (Content == null)
            {
                this.Content = ContentEnum.StoreContent;
            }
            else
            {
                this.Content = Content;
            }
            this.ChartData = ChartData;
            // use default value if no "Format" provided
            if (Format == null)
            {
                this.Format = FormatEnum.Pdf;
            }
            else
            {
                this.Format = Format;
            }
            this.Ooxml = Ooxml;
            this.Image = Image;
            this.Pdf = Pdf;
            this.Html = Html;
            this.Text = Text;
            this.Odt = Odt;
        }

        /// <summary>
        /// Gets or Sets ChartData
        /// </summary>
        [DataMember(Name = "chartData", EmitDefaultValue = false)]
        public DocGenSettingsResultChartData ChartData { get; set; }
        /// <summary>
        /// Gets or Sets Ooxml
        /// </summary>
        [DataMember(Name = "ooxml", EmitDefaultValue = false)]
        public DocGenSettingsResultOoxml Ooxml { get; set; }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public DocGenSettingsResultImage Image { get; set; }
        /// <summary>
        /// Gets or Sets Pdf
        /// </summary>
        [DataMember(Name = "pdf", EmitDefaultValue = false)]
        public DocGenSettingsResultPdf Pdf { get; set; }
        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name = "html", EmitDefaultValue = false)]
        public DocGenSettingsResultHtml Html { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public DocGenSettingsResultText Text { get; set; }
        /// <summary>
        /// Gets or Sets Odt
        /// </summary>
        [DataMember(Name = "odt", EmitDefaultValue = false)]
        public DocGenSettingsResultOdt Odt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenSettingsResult {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ChartData: ").Append(ChartData).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Ooxml: ").Append(Ooxml).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Pdf: ").Append(Pdf).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Odt: ").Append(Odt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocGenSettingsResult);
        }

        /// <summary>
        /// Returns true if DocGenSettingsResult instances are equal
        /// </summary>
        /// <param name="other">Instance of DocGenSettingsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenSettingsResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) &&
                (
                    this.ChartData == other.ChartData ||
                    this.ChartData != null &&
                    this.ChartData.Equals(other.ChartData)
                ) &&
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) &&
                (
                    this.Ooxml == other.Ooxml ||
                    this.Ooxml != null &&
                    this.Ooxml.Equals(other.Ooxml)
                ) &&
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                ) &&
                (
                    this.Pdf == other.Pdf ||
                    this.Pdf != null &&
                    this.Pdf.Equals(other.Pdf)
                ) &&
                (
                    this.Html == other.Html ||
                    this.Html != null &&
                    this.Html.Equals(other.Html)
                ) &&
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) &&
                (
                    this.Odt == other.Odt ||
                    this.Odt != null &&
                    this.Odt.Equals(other.Odt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.ChartData != null)
                    hash = hash * 59 + this.ChartData.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Ooxml != null)
                    hash = hash * 59 + this.Ooxml.GetHashCode();
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                if (this.Pdf != null)
                    hash = hash * 59 + this.Pdf.GetHashCode();
                if (this.Html != null)
                    hash = hash * 59 + this.Html.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Odt != null)
                    hash = hash * 59 + this.Odt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
