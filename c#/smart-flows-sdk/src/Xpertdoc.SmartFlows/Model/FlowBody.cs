/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Xpertdoc.SmartFlows.Client.SwaggerDateConverter;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// FlowBody
    /// </summary>
    [DataContract]
    public partial class FlowBody :  IEquatable<FlowBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowBody" /> class.
        /// </summary>
        /// <param name="PostProcessingSteps">PostProcessingSteps.</param>
        /// <param name="PreZones">PreZones.</param>
        /// <param name="GenDocZone">GenDocZone.</param>
        /// <param name="PostZones">PostZones.</param>
        public FlowBody(List<IdWithName> PostProcessingSteps = default(List<IdWithName>), List<FlowZone> PreZones = default(List<FlowZone>), FlowZone GenDocZone = default(FlowZone), List<FlowZone> PostZones = default(List<FlowZone>))
        {
            this.PostProcessingSteps = PostProcessingSteps;
            this.PreZones = PreZones;
            this.GenDocZone = GenDocZone;
            this.PostZones = PostZones;
        }
        
        /// <summary>
        /// Gets or Sets PostProcessingSteps
        /// </summary>
        [DataMember(Name="postProcessingSteps", EmitDefaultValue=false)]
        public List<IdWithName> PostProcessingSteps { get; set; }

        /// <summary>
        /// Gets or Sets PreZones
        /// </summary>
        [DataMember(Name="preZones", EmitDefaultValue=false)]
        public List<FlowZone> PreZones { get; set; }

        /// <summary>
        /// Gets or Sets GenDocZone
        /// </summary>
        [DataMember(Name="genDocZone", EmitDefaultValue=false)]
        public FlowZone GenDocZone { get; set; }

        /// <summary>
        /// Gets or Sets PostZones
        /// </summary>
        [DataMember(Name="postZones", EmitDefaultValue=false)]
        public List<FlowZone> PostZones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowBody {\n");
            sb.Append("  PostProcessingSteps: ").Append(PostProcessingSteps).Append("\n");
            sb.Append("  PreZones: ").Append(PreZones).Append("\n");
            sb.Append("  GenDocZone: ").Append(GenDocZone).Append("\n");
            sb.Append("  PostZones: ").Append(PostZones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowBody);
        }

        /// <summary>
        /// Returns true if FlowBody instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PostProcessingSteps == input.PostProcessingSteps ||
                    this.PostProcessingSteps != null &&
                    this.PostProcessingSteps.SequenceEqual(input.PostProcessingSteps)
                ) && 
                (
                    this.PreZones == input.PreZones ||
                    this.PreZones != null &&
                    this.PreZones.SequenceEqual(input.PreZones)
                ) && 
                (
                    this.GenDocZone == input.GenDocZone ||
                    (this.GenDocZone != null &&
                    this.GenDocZone.Equals(input.GenDocZone))
                ) && 
                (
                    this.PostZones == input.PostZones ||
                    this.PostZones != null &&
                    this.PostZones.SequenceEqual(input.PostZones)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostProcessingSteps != null)
                    hashCode = hashCode * 59 + this.PostProcessingSteps.GetHashCode();
                if (this.PreZones != null)
                    hashCode = hashCode * 59 + this.PreZones.GetHashCode();
                if (this.GenDocZone != null)
                    hashCode = hashCode * 59 + this.GenDocZone.GetHashCode();
                if (this.PostZones != null)
                    hashCode = hashCode * 59 + this.PostZones.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
