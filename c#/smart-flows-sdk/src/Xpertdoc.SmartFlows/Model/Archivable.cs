/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Xpertdoc.SmartFlows.Model
{
    /// <summary>
    /// Archivable
    /// </summary>
    [DataContract]
    public partial class Archivable : IEquatable<Archivable>, IValidatableObject
    {
        /// <summary>
        /// Defines ArchiveType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ArchiveTypeEnum
        {

            /// <summary>
            /// Enum Explicit for value: explicit
            /// </summary>
            [EnumMember(Value = "explicit")]
            Explicit = 1,

            /// <summary>
            /// Enum Dependency for value: dependency
            /// </summary>
            [EnumMember(Value = "dependency")]
            Dependency = 2
        }

        /// <summary>
        /// Gets or Sets ArchiveType
        /// </summary>
        [DataMember(Name = "archiveType", EmitDefaultValue = false)]
        public ArchiveTypeEnum? ArchiveType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Archivable" /> class.
        /// </summary>
        /// <param name="Identifier">Identifier.</param>
        /// <param name="ArchiveType">ArchiveType.</param>
        /// <param name="Definition">Definition.</param>
        /// <param name="Checksum">Checksum.</param>
        /// <param name="Contents">Contents.</param>
        /// <param name="OutboundDependencies">OutboundDependencies.</param>
        public Archivable(IdWithName Identifier = default(IdWithName), ArchiveTypeEnum? ArchiveType = default(ArchiveTypeEnum?), string Definition = default(string), string Checksum = default(string), List<ArchivableContent> Contents = default(List<ArchivableContent>), List<DependencyTreeNode> OutboundDependencies = default(List<DependencyTreeNode>))
        {
            this.Identifier = Identifier;
            this.ArchiveType = ArchiveType;
            this.Definition = Definition;
            this.Checksum = Checksum;
            this.Contents = Contents;
            this.OutboundDependencies = OutboundDependencies;
        }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public IdWithName Identifier { get; set; }


        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public string Definition { get; set; }

        /// <summary>
        /// Gets or Sets Checksum
        /// </summary>
        [DataMember(Name = "checksum", EmitDefaultValue = false)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public List<ArchivableContent> Contents { get; set; }

        /// <summary>
        /// Gets or Sets OutboundDependencies
        /// </summary>
        [DataMember(Name = "outboundDependencies", EmitDefaultValue = false)]
        public List<DependencyTreeNode> OutboundDependencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Archivable {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  ArchiveType: ").Append(ArchiveType).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  OutboundDependencies: ").Append(OutboundDependencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Archivable);
        }

        /// <summary>
        /// Returns true if Archivable instances are equal
        /// </summary>
        /// <param name="input">Instance of Archivable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Archivable input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) &&
                (
                    this.ArchiveType == input.ArchiveType ||
                    (this.ArchiveType != null &&
                    this.ArchiveType.Equals(input.ArchiveType))
                ) &&
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) &&
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                ) &&
                (
                    this.Contents == input.Contents ||
                    this.Contents != null &&
                    this.Contents.SequenceEqual(input.Contents)
                ) &&
                (
                    this.OutboundDependencies == input.OutboundDependencies ||
                    this.OutboundDependencies != null &&
                    this.OutboundDependencies.SequenceEqual(input.OutboundDependencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.ArchiveType != null)
                    hashCode = hashCode * 59 + this.ArchiveType.GetHashCode();
                if (this.Definition != null)
                    hashCode = hashCode * 59 + this.Definition.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                if (this.OutboundDependencies != null)
                    hashCode = hashCode * 59 + this.OutboundDependencies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
