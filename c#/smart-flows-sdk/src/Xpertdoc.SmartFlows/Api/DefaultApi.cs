/* 
 * SmartFlows
 *
 * This describes the REST api for one SmartFlows project 
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using Xpertdoc.SmartFlows.Client;
using Xpertdoc.SmartFlows.Model;

namespace Xpertdoc.SmartFlows.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;assets&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Asset</returns>
        Asset AddAsset(BinaryDataHolder body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;assets&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> AddAssetWithHttpInfo(BinaryDataHolder body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about the login methods
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationInfo</returns>
        AuthenticationInfo AuthenticateGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about the login methods
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationInfo</returns>
        ApiResponse<AuthenticationInfo> AuthenticateGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using user/password information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>Authentication</returns>
        Authentication AuthenticateLoginPost(Login body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using user/password information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>ApiResponse of Authentication</returns>
        ApiResponse<Authentication> AuthenticateLoginPostWithHttpInfo(Login body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using OAuth2 authorization code
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>Authentication</returns>
        Authentication AuthenticateOauth2Post(Oauth2Parameters body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using OAuth2 authorization code
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>ApiResponse of Authentication</returns>
        ApiResponse<Authentication> AuthenticateOauth2PostWithHttpInfo(Oauth2Parameters body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>FlowExecutionProgress</returns>
        FlowExecutionProgress CancelFlowExecution(string execution);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        ApiResponse<FlowExecutionProgress> CancelFlowExecutionWithHttpInfo(string execution);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear all settings and revert to default settings for one settings type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns></returns>
        void ClearSubSettings(string settingsType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear all settings and revert to default settings for one settings type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearSubSettingsWithHttpInfo(string settingsType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Continue an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>FlowExecutionProgress</returns>
        FlowExecutionProgress ContinueFlowExecution(string execution, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Continue an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        ApiResponse<FlowExecutionProgress> ContinueFlowExecutionWithHttpInfo(string execution, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a backup of all objects in the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CreateBackup(bool? includeHistory = null, bool? includeSensitiveData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a backup of all objects in the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CreateBackupWithHttpInfo(bool? includeHistory = null, bool? includeSensitiveData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Connector&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>Connector</returns>
        Connector CreateConnector(Connector body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Connector&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        ApiResponse<Connector> CreateConnectorWithHttpInfo(Connector body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Dataset&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Dataset</returns>
        Dataset CreateDataset(Dataset body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Dataset&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> CreateDatasetWithHttpInfo(Dataset body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add data that conforms to a dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>Data</returns>
        Data CreateDatasetData(string datasetId, Data body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add data that conforms to a dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>ApiResponse of Data</returns>
        ApiResponse<Data> CreateDatasetDataWithHttpInfo(string datasetId, Data body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create preview of given template(ref) with given data(ref)
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>List&lt;GeneratedDocument&gt;</returns>
        List<GeneratedDocument> CreateDocument(DocGenSettings body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create preview of given template(ref) with given data(ref)
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>ApiResponse of List&lt;GeneratedDocument&gt;</returns>
        ApiResponse<List<GeneratedDocument>> CreateDocumentWithHttpInfo(DocGenSettings body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export file for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CreateExport(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export file for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CreateExportWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>FlatArchive</returns>
        FlatArchive CreateFlatExport(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>ApiResponse of FlatArchive</returns>
        ApiResponse<FlatArchive> CreateFlatExportWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Flow</returns>
        Flow CreateFlow(Flow body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>ApiResponse of Flow</returns>
        ApiResponse<Flow> CreateFlowWithHttpInfo(Flow body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new language that is supported
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>Language</returns>
        Language CreateLanguage(Language body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new language that is supported
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>ApiResponse of Language</returns>
        ApiResponse<Language> CreateLanguageWithHttpInfo(Language body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new printer that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>Printer</returns>
        Printer CreatePrinter(Printer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new printer that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>ApiResponse of Printer</returns>
        ApiResponse<Printer> CreatePrinterWithHttpInfo(Printer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a tagGroup object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TagGroup</returns>
        TagGroup CreateTagGroup(TagGroup body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a tagGroup object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TagGroup</returns>
        ApiResponse<TagGroup> CreateTagGroupWithHttpInfo(TagGroup body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;templates&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Template</returns>
        Template CreateTemplate(Template body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;templates&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CreateTemplateWithHttpInfo(Template body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>User</returns>
        User CreateUser(User body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserWithHttpInfo(User body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns></returns>
        void DeleteAsset(string assetId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetWithHttpInfo(string assetId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns></returns>
        void DeleteConnector(string connectorId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConnectorWithHttpInfo(string connectorId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single data object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns></returns>
        void DeleteData(string dataId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single data object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDataWithHttpInfo(string dataId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns></returns>
        void DeleteDataset(string datasetId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDatasetWithHttpInfo(string datasetId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns></returns>
        void DeleteFlow(string flow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFlowWithHttpInfo(string flow);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns></returns>
        void DeleteLanguage(string language, bool? force = null, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLanguageWithHttpInfo(string language, bool? force = null, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns></returns>
        void DeletePrinter(string printer, bool? force = null, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePrinterWithHttpInfo(string printer, bool? force = null, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns></returns>
        void DeleteTagGroup(string tagGroupId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTagGroupWithHttpInfo(string tagGroupId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns></returns>
        void DeleteTemplate(string templateId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo(string templateId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the content for the given language of the given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns></returns>
        void DeleteTemplateContent(string templateId, string lang = null, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the content for the given language of the given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateContentWithHttpInfo(string templateId, string lang = null, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single user. You cannot delete the last admin user.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns></returns>
        void DeleteUser(string user, bool? force = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single user. You cannot delete the last admin user.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(string user, bool? force = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns></returns>
        void ExecuteFlatImport(FlatArchive body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteFlatImportWithHttpInfo(FlatArchive body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Execute a flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>FlowExecutionProgress</returns>
        FlowExecutionProgress ExecuteFlow(string flowId = null, string datasetId = null, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Execute a flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        ApiResponse<FlowExecutionProgress> ExecuteFlowWithHttpInfo(string flowId = null, string datasetId = null, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns></returns>
        void ExecuteImport(RestoreContext body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteImportWithHttpInfo(RestoreContext body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check whether the data with the given id exists
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns></returns>
        void ExistsData(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check whether the data with the given id exists
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExistsDataWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;FlowExecution&gt;</returns>
        List<FlowExecution> GetAllFlowExecutions(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowExecution&gt;</returns>
        ApiResponse<List<FlowExecution>> GetAllFlowExecutionsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>Asset</returns>
        Asset GetAsset(string assetId, bool? includeContent = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> GetAssetWithHttpInfo(string assetId, bool? includeContent = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns></returns>
        void GetAssetContent(string assetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAssetContentWithHttpInfo(string assetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Asset&gt;</returns>
        List<Asset> GetAssets(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Asset&gt;</returns>
        ApiResponse<List<Asset>> GetAssetsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Connector</returns>
        Connector GetConnector(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of Connector</returns>
        ApiResponse<Connector> GetConnectorWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connectorType object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>ConnectorType</returns>
        ConnectorType GetConnectorType(string connectorTypeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connectorType object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>ApiResponse of ConnectorType</returns>
        ApiResponse<ConnectorType> GetConnectorTypeWithHttpInfo(string connectorTypeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ConnectorType&gt;</returns>
        List<ConnectorType> GetConnectorTypes();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ConnectorType&gt;</returns>
        ApiResponse<List<ConnectorType>> GetConnectorTypesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Connector&gt;</returns>
        List<Connector> GetConnectors(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Connector&gt;</returns>
        ApiResponse<List<Connector>> GetConnectorsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the current user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User GetCurrentUser();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the current user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetCurrentUserWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve information about previously added data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Data</returns>
        Data GetData(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve information about previously added data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of Data</returns>
        ApiResponse<Data> GetDataWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the actual data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDataContent(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the actual data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDataContentWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a sample for the metadata used when generating documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDataMetadata(string templateName = null, string projectName = null, string creator = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a sample for the metadata used when generating documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDataMetadataWithHttpInfo(string templateName = null, string projectName = null, string creator = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the data as sent to the document preview
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDataPreview(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the data as sent to the document preview
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDataPreviewWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>Dataset</returns>
        Dataset GetDataset(string datasetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> GetDatasetWithHttpInfo(string datasetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all datas that are linked to the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>List&lt;Data&gt;</returns>
        List<Data> GetDatasetDatas(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all datas that are linked to the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>ApiResponse of List&lt;Data&gt;</returns>
        ApiResponse<List<Data>> GetDatasetDatasWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entity references to the primary entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;IdWithName&gt;</returns>
        List<IdWithName> GetDatasetEntityReferences(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entity references to the primary entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;IdWithName&gt;</returns>
        ApiResponse<List<IdWithName>> GetDatasetEntityReferencesWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of available entities in the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>List&lt;EntityDefinition&gt;</returns>
        List<EntityDefinition> GetDatasetLayout(Dataset body = null, bool? primaryOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of available entities in the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;EntityDefinition&gt;</returns>
        ApiResponse<List<EntityDefinition>> GetDatasetLayoutWithHttpInfo(Dataset body = null, bool? primaryOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        List<Dataset> GetDatasets(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        ApiResponse<List<Dataset>> GetDatasetsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>Datasource</returns>
        Datasource GetDatasource(string datasourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>ApiResponse of Datasource</returns>
        ApiResponse<Datasource> GetDatasourceWithHttpInfo(string datasourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations for the entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>EntityDefinition</returns>
        EntityDefinition GetDatasourceEntityLayout(string datasourceId, string entityName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations for the entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>ApiResponse of EntityDefinition</returns>
        ApiResponse<EntityDefinition> GetDatasourceEntityLayoutWithHttpInfo(string datasourceId, string entityName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations that are available in the datasource
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>DatasourceLayout</returns>
        DatasourceLayout GetDatasourceLayout(string datasourceId, bool? full = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations that are available in the datasource
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>ApiResponse of DatasourceLayout</returns>
        ApiResponse<DatasourceLayout> GetDatasourceLayoutWithHttpInfo(string datasourceId, bool? full = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single datasourcetype object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>DatasourceType</returns>
        DatasourceType GetDatasourceType(string datasourceTypeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single datasourcetype object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>ApiResponse of DatasourceType</returns>
        ApiResponse<DatasourceType> GetDatasourceTypeWithHttpInfo(string datasourceTypeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DatasourceType&gt;</returns>
        List<DatasourceType> GetDatasourceTypes();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DatasourceType&gt;</returns>
        ApiResponse<List<DatasourceType>> GetDatasourceTypesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Datasource&gt;</returns>
        List<Datasource> GetDatasources(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Datasource&gt;</returns>
        ApiResponse<List<Datasource>> GetDatasourcesWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Language</returns>
        Language GetDefaultLanguage();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Language</returns>
        ApiResponse<Language> GetDefaultLanguageWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Printer</returns>
        Printer GetDefaultPrinter();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Printer</returns>
        ApiResponse<Printer> GetDefaultPrinterWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the dependencies of the object with the given id
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>DependencyTree</returns>
        DependencyTree GetDependencies(string objectType, string objectId, string direction = null, string depth = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the dependencies of the object with the given id
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>ApiResponse of DependencyTree</returns>
        ApiResponse<DependencyTree> GetDependenciesWithHttpInfo(string objectType, string objectId, string direction = null, string depth = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single document object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Document</returns>
        Document GetDocument(string documentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single document object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> GetDocumentWithHttpInfo(string documentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the document
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns></returns>
        byte[] GetDocumentContent(string documentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the document
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDocumentContentWithHttpInfo(string documentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> GetDocuments(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> GetDocumentsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the supported template expression functions
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;ExpressionFunction&gt;</returns>
        List<ExpressionFunction> GetExpressionFunctions(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the supported template expression functions
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;ExpressionFunction&gt;</returns>
        ApiResponse<List<ExpressionFunction>> GetExpressionFunctionsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves users exposed by the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetExternalUsers(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves users exposed by the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetExternalUsersWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Asset&gt;</returns>
        List<Asset> GetFilteredAssets(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Asset&gt;</returns>
        ApiResponse<List<Asset>> GetFilteredAssetsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Connector&gt;</returns>
        List<Connector> GetFilteredConnectors(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Connector&gt;</returns>
        ApiResponse<List<Connector>> GetFilteredConnectorsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        List<Dataset> GetFilteredDatasets(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        ApiResponse<List<Dataset>> GetFilteredDatasetsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Datasource&gt;</returns>
        List<Datasource> GetFilteredDatasources(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Datasource&gt;</returns>
        ApiResponse<List<Datasource>> GetFilteredDatasourcesWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> GetFilteredDocuments(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> GetFilteredDocumentsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;FlowExecution&gt;</returns>
        List<FlowExecution> GetFilteredFlowExecutions(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowExecution&gt;</returns>
        ApiResponse<List<FlowExecution>> GetFilteredFlowExecutionsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Printer&gt;</returns>
        List<Printer> GetFilteredPrinters(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Printer&gt;</returns>
        ApiResponse<List<Printer>> GetFilteredPrintersWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;TagGroup&gt;</returns>
        List<TagGroup> GetFilteredTagGroups(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;TagGroup&gt;</returns>
        ApiResponse<List<TagGroup>> GetFilteredTagGroupsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> GetFilteredTemplates(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> GetFilteredTemplatesWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetFilteredUsers(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetFilteredUsersWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single flow from the server
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>Flow</returns>
        Flow GetFlow(string flow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single flow from the server
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>ApiResponse of Flow</returns>
        ApiResponse<Flow> GetFlowWithHttpInfo(string flow);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>FlowContract</returns>
        FlowContract GetFlowContract(string flow, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>ApiResponse of FlowContract</returns>
        ApiResponse<FlowContract> GetFlowContractWithHttpInfo(string flow, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the state of a single execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>FlowExecution</returns>
        FlowExecution GetFlowExecution(string execution);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the state of a single execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>ApiResponse of FlowExecution</returns>
        ApiResponse<FlowExecution> GetFlowExecutionWithHttpInfo(string execution);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find out the progress of an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>FlowExecutionProgress</returns>
        FlowExecutionProgress GetFlowExecutionProgress(string execution, int? timeout = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find out the progress of an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        ApiResponse<FlowExecutionProgress> GetFlowExecutionProgressWithHttpInfo(string execution, int? timeout = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns statistics for flow executions, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Statistics</returns>
        Statistics GetFlowExecutionStatistics(string groupTimeBy = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns statistics for flow executions, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of Statistics</returns>
        ApiResponse<Statistics> GetFlowExecutionStatisticsWithHttpInfo(string groupTimeBy = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for this flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;FlowExecution&gt;</returns>
        List<FlowExecution> GetFlowExecutions(string flow, int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for this flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowExecution&gt;</returns>
        ApiResponse<List<FlowExecution>> GetFlowExecutionsWithHttpInfo(string flow, int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Object</returns>
        Object GetFlowSettings(string step, string property, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetFlowSettingsWithHttpInfo(string step, string property, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get definition of a specific flow step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>FlowStep</returns>
        FlowStep GetFlowStep(string step);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get definition of a specific flow step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>ApiResponse of FlowStep</returns>
        ApiResponse<FlowStep> GetFlowStepWithHttpInfo(string step);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the possible flow steps
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FlowStep&gt;</returns>
        List<FlowStep> GetFlowSteps();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the possible flow steps
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FlowStep&gt;</returns>
        ApiResponse<List<FlowStep>> GetFlowStepsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image of the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetFlowThumbnail(string flow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image of the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetFlowThumbnailWithHttpInfo(string flow);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the flows defined on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Flow&gt;</returns>
        List<Flow> GetFlows(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the flows defined on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Flow&gt;</returns>
        ApiResponse<List<Flow>> GetFlowsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Format a number, date, time or dateTime using the given pattern
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>FormattedValue</returns>
        FormattedValue GetFormattedValue(string value, string pattern, string type, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Format a number, date, time or dateTime using the given pattern
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>ApiResponse of FormattedValue</returns>
        ApiResponse<FormattedValue> GetFormattedValueWithHttpInfo(string value, string pattern, string type, string locale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>Language</returns>
        Language GetLanguage(string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>ApiResponse of Language</returns>
        ApiResponse<Language> GetLanguageWithHttpInfo(string language);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the supported languages
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Language&gt;</returns>
        List<Language> GetLanguages();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the supported languages
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Language&gt;</returns>
        ApiResponse<List<Language>> GetLanguagesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the currently installed license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LicenseInformation</returns>
        LicenseInformation GetLicense();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the currently installed license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LicenseInformation</returns>
        ApiResponse<LicenseInformation> GetLicenseWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets defined by plugins
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Dataset&gt;</returns>
        List<Dataset> GetPluginDatasets();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets defined by plugins
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        ApiResponse<List<Dataset>> GetPluginDatasetsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all Plugins registered in this project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Plugin&gt;</returns>
        List<Plugin> GetPlugins();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all Plugins registered in this project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Plugin&gt;</returns>
        ApiResponse<List<Plugin>> GetPluginsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Printer</returns>
        Printer GetPrinter(string printer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>ApiResponse of Printer</returns>
        ApiResponse<Printer> GetPrinterWithHttpInfo(string printer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Printer&gt;</returns>
        List<Printer> GetPrinters();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Printer&gt;</returns>
        ApiResponse<List<Printer>> GetPrintersWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all security roles
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Role&gt;</returns>
        List<Role> GetRoles();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all security roles
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        ApiResponse<List<Role>> GetRolesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all settings
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        Settings GetSettings();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all settings
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> GetSettingsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Object</returns>
        Object GetSubSettings(string settingsType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSubSettingsWithHttpInfo(string settingsType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of supported features
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Feature&gt;</returns>
        List<Feature> GetSupportedFeatures();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of supported features
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Feature&gt;</returns>
        ApiResponse<List<Feature>> GetSupportedFeaturesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the currency symbols that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;CurrencySymbol&gt;</returns>
        List<CurrencySymbol> GetSystemCurrencySymbols(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the currency symbols that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;CurrencySymbol&gt;</returns>
        ApiResponse<List<CurrencySymbol>> GetSystemCurrencySymbolsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LanguageDefinition</returns>
        LanguageDefinition GetSystemDefaultLanguage();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LanguageDefinition</returns>
        ApiResponse<LanguageDefinition> GetSystemDefaultLanguageWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemInfo</returns>
        SystemInfo GetSystemInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemInfo</returns>
        ApiResponse<SystemInfo> GetSystemInfoWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the languages that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>List&lt;LanguageDefinition&gt;</returns>
        List<LanguageDefinition> GetSystemLanguages(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the languages that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;LanguageDefinition&gt;</returns>
        ApiResponse<List<LanguageDefinition>> GetSystemLanguagesWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printerdefinition
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>PrinterDefinition</returns>
        PrinterDefinition GetSystemPrinter(string printer, bool? includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printerdefinition
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>ApiResponse of PrinterDefinition</returns>
        ApiResponse<PrinterDefinition> GetSystemPrinterWithHttpInfo(string printer, bool? includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of the available printers on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>List&lt;PrinterDefinition&gt;</returns>
        List<PrinterDefinition> GetSystemPrinters(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of the available printers on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;PrinterDefinition&gt;</returns>
        ApiResponse<List<PrinterDefinition>> GetSystemPrintersWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the time zones that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetSystemTimeZones();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the time zones that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetSystemTimeZonesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>TagGroup</returns>
        TagGroup GetTagGroup(string tagGroupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>ApiResponse of TagGroup</returns>
        ApiResponse<TagGroup> GetTagGroupWithHttpInfo(string tagGroupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;TagGroup&gt;</returns>
        List<TagGroup> GetTagGroups(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;TagGroup&gt;</returns>
        ApiResponse<List<TagGroup>> GetTagGroupsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>Template</returns>
        Template GetTemplate(string templateId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetTemplateWithHttpInfo(string templateId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the template for the given language.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTemplateContent(string templateId, string lang = null, string version = null, bool? includeMeta = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the template for the given language.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTemplateContentWithHttpInfo(string templateId, string lang = null, string version = null, bool? includeMeta = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show the history of a given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>List&lt;Version&gt;</returns>
        List<Model.Version> GetTemplateHistory(string templateId, string lang = null, int? page = null, int? size = null, string sort = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show the history of a given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>ApiResponse of List&lt;Version&gt;</returns>
        ApiResponse<List<Model.Version>> GetTemplateHistoryWithHttpInfo(string templateId, string lang = null, int? page = null, int? size = null, string sort = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve info about the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>TemplateLanguage</returns>
        TemplateLanguage GetTemplateLanguage(string templateId, string lang);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve info about the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>ApiResponse of TemplateLanguage</returns>
        ApiResponse<TemplateLanguage> GetTemplateLanguageWithHttpInfo(string templateId, string lang);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the schema of the fields that are usabel in the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTemplateSchema(string templateId, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the schema of the fields that are usabel in the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTemplateSchemaWithHttpInfo(string templateId, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> GetTemplates(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> GetTemplatesWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>User</returns>
        User GetUser(string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetUsers(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetUsersWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Install a new license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>LicenseInformation</returns>
        LicenseInformation InstallLicense(byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Install a new license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>ApiResponse of LicenseInformation</returns>
        ApiResponse<LicenseInformation> InstallLicenseWithHttpInfo(byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Parse the given expression
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ParseExpressionResponse</returns>
        ParseExpressionResponse ParseExpression(ParseExpressionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Parse the given expression
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of ParseExpressionResponse</returns>
        ApiResponse<ParseExpressionResponse> ParseExpressionWithHttpInfo(ParseExpressionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Can be used for external calls to the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>string</returns>
        string PostFlowCallback(string callbackId, string executionId = null, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Can be used for external calls to the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostFlowCallbackWithHttpInfo(string callbackId, string executionId = null, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>ImportInformation</returns>
        ImportInformation PrepareImport(byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>ApiResponse of ImportInformation</returns>
        ApiResponse<ImportInformation> PrepareImportWithHttpInfo(byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh the state of the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns></returns>
        void RefreshConnector(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh the state of the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RefreshConnectorWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns></returns>
        void RestoreBackup(byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreBackupWithHttpInfo(byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run one or all cleanup processes now
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>List&lt;CleanupActionStatus&gt;</returns>
        List<CleanupActionStatus> RunCleanup(string action = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run one or all cleanup processes now
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>ApiResponse of List&lt;CleanupActionStatus&gt;</returns>
        ApiResponse<List<CleanupActionStatus>> RunCleanupWithHttpInfo(string action = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Language</returns>
        Language SetDefaultLanguage(Language body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of Language</returns>
        ApiResponse<Language> SetDefaultLanguageWithHttpInfo(Language body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Printer</returns>
        Printer SetDefaultPrinter(Printer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>ApiResponse of Printer</returns>
        ApiResponse<Printer> SetDefaultPrinterWithHttpInfo(Printer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>LanguageDefinition</returns>
        LanguageDefinition SetSystemDefaultLanguage(LanguageDefinition body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of LanguageDefinition</returns>
        ApiResponse<LanguageDefinition> SetSystemDefaultLanguageWithHttpInfo(LanguageDefinition body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - start
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ConnectorStage</returns>
        ConnectorStage SetupConnector(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - start
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        ApiResponse<ConnectorStage> SetupConnectorWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Connector</returns>
        Connector SetupConnectorCancel(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        ApiResponse<Connector> SetupConnectorCancelWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - get the current step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ConnectorStage</returns>
        ConnectorStage SetupConnectorCurrent(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - get the current step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        ApiResponse<ConnectorStage> SetupConnectorCurrentWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finish the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Connector</returns>
        Connector SetupConnectorFinish(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finish the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        ApiResponse<Connector> SetupConnectorFinishWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the next step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ConnectorStage</returns>
        ConnectorStage SetupConnectorNext(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the next step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        ApiResponse<ConnectorStage> SetupConnectorNextWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the previous step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ConnectorStage</returns>
        ConnectorStage SetupConnectorPrevious(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the previous step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        ApiResponse<ConnectorStage> SetupConnectorPreviousWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Syncs all users with the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SyncResult</returns>
        SyncResult SyncExternalUsers();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Syncs all users with the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SyncResult</returns>
        ApiResponse<SyncResult> SyncExternalUsersWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test if the connection to the connector can be made successfully
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>OperationStatus</returns>
        OperationStatus TestConnector(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test if the connection to the connector can be made successfully
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of OperationStatus</returns>
        ApiResponse<OperationStatus> TestConnectorWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send a test document to the printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns></returns>
        void TestPrinter(string printer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send a test document to the printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestPrinterWithHttpInfo(string printer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>Asset</returns>
        Asset UpdateAsset(string assetId, Asset body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> UpdateAssetWithHttpInfo(string assetId, Asset body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns></returns>
        void UpdateAssetContent(string assetId, byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAssetContentWithHttpInfo(string assetId, byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>Connector</returns>
        Connector UpdateConnector(string connectorId, Connector body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        ApiResponse<Connector> UpdateConnectorWithHttpInfo(string connectorId, Connector body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>Data</returns>
        Data UpdateData(string dataId, Data body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>ApiResponse of Data</returns>
        ApiResponse<Data> UpdateDataWithHttpInfo(string dataId, Data body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>Dataset</returns>
        Dataset UpdateDataset(string datasetId, Dataset body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string datasetId, Dataset body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Flow</returns>
        Flow UpdateFlow(string flow, Flow body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>ApiResponse of Flow</returns>
        ApiResponse<Flow> UpdateFlowWithHttpInfo(string flow, Flow body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Language</returns>
        Language UpdateLanguage(string language, Language body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of Language</returns>
        ApiResponse<Language> UpdateLanguageWithHttpInfo(string language, Language body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Printer</returns>
        Printer UpdatePrinter(string printer, Printer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>ApiResponse of Printer</returns>
        ApiResponse<Printer> UpdatePrinterWithHttpInfo(string printer, Printer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update settings of one type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>Object</returns>
        Object UpdateSubSettings(string settingsType, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update settings of one type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateSubSettingsWithHttpInfo(string settingsType, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the tag group
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>TagGroup</returns>
        TagGroup UpdateTagGroup(string tagGroupId, TagGroup body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the tag group
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>ApiResponse of TagGroup</returns>
        ApiResponse<TagGroup> UpdateTagGroupWithHttpInfo(string tagGroupId, TagGroup body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>Template</returns>
        Template UpdateTemplate(string templateId, Template body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> UpdateTemplateWithHttpInfo(string templateId, Template body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns></returns>
        void UpdateTemplateContent(string templateId, string lang = null, string description = null, byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTemplateContentWithHttpInfo(string templateId, string lang = null, string description = null, byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>User</returns>
        User UpdateUser(string user, User body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo(string user, User body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;assets&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> AddAssetAsync(BinaryDataHolder body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;assets&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> AddAssetAsyncWithHttpInfo(BinaryDataHolder body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about the login methods
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationInfo</returns>
        System.Threading.Tasks.Task<AuthenticationInfo> AuthenticateGetAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about the login methods
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationInfo>> AuthenticateGetAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using user/password information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>Task of Authentication</returns>
        System.Threading.Tasks.Task<Authentication> AuthenticateLoginPostAsync(Login body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using user/password information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>Task of ApiResponse (Authentication)</returns>
        System.Threading.Tasks.Task<ApiResponse<Authentication>> AuthenticateLoginPostAsyncWithHttpInfo(Login body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using OAuth2 authorization code
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>Task of Authentication</returns>
        System.Threading.Tasks.Task<Authentication> AuthenticateOauth2PostAsync(Oauth2Parameters body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate a user using OAuth2 authorization code
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>Task of ApiResponse (Authentication)</returns>
        System.Threading.Tasks.Task<ApiResponse<Authentication>> AuthenticateOauth2PostAsyncWithHttpInfo(Oauth2Parameters body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        System.Threading.Tasks.Task<FlowExecutionProgress> CancelFlowExecutionAsync(string execution);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> CancelFlowExecutionAsyncWithHttpInfo(string execution);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear all settings and revert to default settings for one settings type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearSubSettingsAsync(string settingsType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear all settings and revert to default settings for one settings type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearSubSettingsAsyncWithHttpInfo(string settingsType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Continue an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        System.Threading.Tasks.Task<FlowExecutionProgress> ContinueFlowExecutionAsync(string execution, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Continue an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> ContinueFlowExecutionAsyncWithHttpInfo(string execution, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a backup of all objects in the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CreateBackupAsync(bool? includeHistory = null, bool? includeSensitiveData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a backup of all objects in the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CreateBackupAsyncWithHttpInfo(bool? includeHistory = null, bool? includeSensitiveData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Connector&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>Task of Connector</returns>
        System.Threading.Tasks.Task<Connector> CreateConnectorAsync(Connector body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Connector&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        System.Threading.Tasks.Task<ApiResponse<Connector>> CreateConnectorAsyncWithHttpInfo(Connector body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Dataset&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(Dataset body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;Dataset&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> CreateDatasetAsyncWithHttpInfo(Dataset body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add data that conforms to a dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>Task of Data</returns>
        System.Threading.Tasks.Task<Data> CreateDatasetDataAsync(string datasetId, Data body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add data that conforms to a dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>Task of ApiResponse (Data)</returns>
        System.Threading.Tasks.Task<ApiResponse<Data>> CreateDatasetDataAsyncWithHttpInfo(string datasetId, Data body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create preview of given template(ref) with given data(ref)
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>Task of List&lt;GeneratedDocument&gt;</returns>
        System.Threading.Tasks.Task<List<GeneratedDocument>> CreateDocumentAsync(DocGenSettings body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create preview of given template(ref) with given data(ref)
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GeneratedDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GeneratedDocument>>> CreateDocumentAsyncWithHttpInfo(DocGenSettings body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export file for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CreateExportAsync(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export file for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CreateExportAsyncWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of FlatArchive</returns>
        System.Threading.Tasks.Task<FlatArchive> CreateFlatExportAsync(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an export for the given request
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (FlatArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlatArchive>> CreateFlatExportAsyncWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of Flow</returns>
        System.Threading.Tasks.Task<Flow> CreateFlowAsync(Flow body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of ApiResponse (Flow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flow>> CreateFlowAsyncWithHttpInfo(Flow body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new language that is supported
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>Task of Language</returns>
        System.Threading.Tasks.Task<Language> CreateLanguageAsync(Language body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new language that is supported
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        System.Threading.Tasks.Task<ApiResponse<Language>> CreateLanguageAsyncWithHttpInfo(Language body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new printer that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>Task of Printer</returns>
        System.Threading.Tasks.Task<Printer> CreatePrinterAsync(Printer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new printer that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Printer>> CreatePrinterAsyncWithHttpInfo(Printer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a tagGroup object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TagGroup</returns>
        System.Threading.Tasks.Task<TagGroup> CreateTagGroupAsync(TagGroup body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a tagGroup object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TagGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagGroup>> CreateTagGroupAsyncWithHttpInfo(TagGroup body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;templates&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CreateTemplateAsync(Template body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a &#x60;templates&#x60; object to the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CreateTemplateAsyncWithHttpInfo(Template body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserAsync(User body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserAsyncWithHttpInfo(User body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetAsync(string assetId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAsyncWithHttpInfo(string assetId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConnectorAsync(string connectorId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorAsyncWithHttpInfo(string connectorId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single data object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDataAsync(string dataId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single data object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataAsyncWithHttpInfo(string dataId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDatasetAsync(string datasetId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDatasetAsyncWithHttpInfo(string datasetId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFlowAsync(string flow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFlowAsyncWithHttpInfo(string flow);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLanguageAsync(string language, bool? force = null, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLanguageAsyncWithHttpInfo(string language, bool? force = null, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePrinterAsync(string printer, bool? force = null, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePrinterAsyncWithHttpInfo(string printer, bool? force = null, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTagGroupAsync(string tagGroupId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTagGroupAsyncWithHttpInfo(string tagGroupId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateAsync(string templateId, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo(string templateId, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the content for the given language of the given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateContentAsync(string templateId, string lang = null, bool? deleteInbound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the content for the given language of the given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateContentAsyncWithHttpInfo(string templateId, string lang = null, bool? deleteInbound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single user. You cannot delete the last admin user.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(string user, bool? force = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a single user. You cannot delete the last admin user.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo(string user, bool? force = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteFlatImportAsync(FlatArchive body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteFlatImportAsyncWithHttpInfo(FlatArchive body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Execute a flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        System.Threading.Tasks.Task<FlowExecutionProgress> ExecuteFlowAsync(string flowId = null, string datasetId = null, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Execute a flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> ExecuteFlowAsyncWithHttpInfo(string flowId = null, string datasetId = null, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteImportAsync(RestoreContext body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteImportAsyncWithHttpInfo(RestoreContext body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check whether the data with the given id exists
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExistsDataAsync(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check whether the data with the given id exists
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExistsDataAsyncWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;FlowExecution&gt;</returns>
        System.Threading.Tasks.Task<List<FlowExecution>> GetAllFlowExecutionsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FlowExecution&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlowExecution>>> GetAllFlowExecutionsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> GetAssetAsync(string assetId, bool? includeContent = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single asset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetAsyncWithHttpInfo(string assetId, bool? includeContent = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAssetContentAsync(string assetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAssetContentAsyncWithHttpInfo(string assetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Asset&gt;</returns>
        System.Threading.Tasks.Task<List<Asset>> GetAssetsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Asset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Asset>>> GetAssetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of Connector</returns>
        System.Threading.Tasks.Task<Connector> GetConnectorAsync(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connector object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        System.Threading.Tasks.Task<ApiResponse<Connector>> GetConnectorAsyncWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connectorType object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>Task of ConnectorType</returns>
        System.Threading.Tasks.Task<ConnectorType> GetConnectorTypeAsync(string connectorTypeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single connectorType object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>Task of ApiResponse (ConnectorType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorType>> GetConnectorTypeAsyncWithHttpInfo(string connectorTypeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ConnectorType&gt;</returns>
        System.Threading.Tasks.Task<List<ConnectorType>> GetConnectorTypesAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ConnectorType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConnectorType>>> GetConnectorTypesAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Connector&gt;</returns>
        System.Threading.Tasks.Task<List<Connector>> GetConnectorsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Connector&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Connector>>> GetConnectorsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the current user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetCurrentUserAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the current user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve information about previously added data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of Data</returns>
        System.Threading.Tasks.Task<Data> GetDataAsync(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve information about previously added data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse (Data)</returns>
        System.Threading.Tasks.Task<ApiResponse<Data>> GetDataAsyncWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the actual data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDataContentAsync(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the actual data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDataContentAsyncWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a sample for the metadata used when generating documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDataMetadataAsync(string templateName = null, string projectName = null, string creator = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a sample for the metadata used when generating documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDataMetadataAsyncWithHttpInfo(string templateName = null, string projectName = null, string creator = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the data as sent to the document preview
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDataPreviewAsync(string dataId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the data as sent to the document preview
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDataPreviewAsyncWithHttpInfo(string dataId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> GetDatasetAsync(string datasetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single dataset object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> GetDatasetAsyncWithHttpInfo(string datasetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all datas that are linked to the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>Task of List&lt;Data&gt;</returns>
        System.Threading.Tasks.Task<List<Data>> GetDatasetDatasAsync(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all datas that are linked to the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Data&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Data>>> GetDatasetDatasAsyncWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entity references to the primary entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;IdWithName&gt;</returns>
        System.Threading.Tasks.Task<List<IdWithName>> GetDatasetEntityReferencesAsync(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves entity references to the primary entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IdWithName&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdWithName>>> GetDatasetEntityReferencesAsyncWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of available entities in the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>Task of List&lt;EntityDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<EntityDefinition>> GetDatasetLayoutAsync(Dataset body = null, bool? primaryOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of available entities in the given dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityDefinition>>> GetDatasetLayoutAsyncWithHttpInfo(Dataset body = null, bool? primaryOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        System.Threading.Tasks.Task<List<Dataset>> GetDatasetsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> GetDatasetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>Task of Datasource</returns>
        System.Threading.Tasks.Task<Datasource> GetDatasourceAsync(string datasourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Datasource>> GetDatasourceAsyncWithHttpInfo(string datasourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations for the entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>Task of EntityDefinition</returns>
        System.Threading.Tasks.Task<EntityDefinition> GetDatasourceEntityLayoutAsync(string datasourceId, string entityName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations for the entity
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>Task of ApiResponse (EntityDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityDefinition>> GetDatasourceEntityLayoutAsyncWithHttpInfo(string datasourceId, string entityName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations that are available in the datasource
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>Task of DatasourceLayout</returns>
        System.Threading.Tasks.Task<DatasourceLayout> GetDatasourceLayoutAsync(string datasourceId, bool? full = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields and relations that are available in the datasource
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>Task of ApiResponse (DatasourceLayout)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasourceLayout>> GetDatasourceLayoutAsyncWithHttpInfo(string datasourceId, bool? full = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single datasourcetype object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>Task of DatasourceType</returns>
        System.Threading.Tasks.Task<DatasourceType> GetDatasourceTypeAsync(string datasourceTypeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single datasourcetype object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>Task of ApiResponse (DatasourceType)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasourceType>> GetDatasourceTypeAsyncWithHttpInfo(string datasourceTypeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DatasourceType&gt;</returns>
        System.Threading.Tasks.Task<List<DatasourceType>> GetDatasourceTypesAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DatasourceType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatasourceType>>> GetDatasourceTypesAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Datasource&gt;</returns>
        System.Threading.Tasks.Task<List<Datasource>> GetDatasourcesAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Datasource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Datasource>>> GetDatasourcesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Language</returns>
        System.Threading.Tasks.Task<Language> GetDefaultLanguageAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Language)</returns>
        System.Threading.Tasks.Task<ApiResponse<Language>> GetDefaultLanguageAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Printer</returns>
        System.Threading.Tasks.Task<Printer> GetDefaultPrinterAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Printer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Printer>> GetDefaultPrinterAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the dependencies of the object with the given id
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>Task of DependencyTree</returns>
        System.Threading.Tasks.Task<DependencyTree> GetDependenciesAsync(string objectType, string objectId, string direction = null, string depth = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the dependencies of the object with the given id
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>Task of ApiResponse (DependencyTree)</returns>
        System.Threading.Tasks.Task<ApiResponse<DependencyTree>> GetDependenciesAsyncWithHttpInfo(string objectType, string objectId, string direction = null, string depth = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single document object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> GetDocumentAsync(string documentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single document object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> GetDocumentAsyncWithHttpInfo(string documentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the document
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDocumentContentAsync(string documentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the document
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDocumentContentAsyncWithHttpInfo(string documentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> GetDocumentsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> GetDocumentsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the supported template expression functions
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;ExpressionFunction&gt;</returns>
        System.Threading.Tasks.Task<List<ExpressionFunction>> GetExpressionFunctionsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all the supported template expression functions
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExpressionFunction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExpressionFunction>>> GetExpressionFunctionsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves users exposed by the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetExternalUsersAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves users exposed by the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetExternalUsersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Asset&gt;</returns>
        System.Threading.Tasks.Task<List<Asset>> GetFilteredAssetsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all assets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Asset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Asset>>> GetFilteredAssetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Connector&gt;</returns>
        System.Threading.Tasks.Task<List<Connector>> GetFilteredConnectorsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Connector&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Connector>>> GetFilteredConnectorsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        System.Threading.Tasks.Task<List<Dataset>> GetFilteredDatasetsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> GetFilteredDatasetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Datasource&gt;</returns>
        System.Threading.Tasks.Task<List<Datasource>> GetFilteredDatasourcesAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Datasource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Datasource>>> GetFilteredDatasourcesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> GetFilteredDocumentsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all documents using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> GetFilteredDocumentsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;FlowExecution&gt;</returns>
        System.Threading.Tasks.Task<List<FlowExecution>> GetFilteredFlowExecutionsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for all flows, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FlowExecution&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlowExecution>>> GetFilteredFlowExecutionsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Printer&gt;</returns>
        System.Threading.Tasks.Task<List<Printer>> GetFilteredPrintersAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Printer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Printer>>> GetFilteredPrintersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;TagGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TagGroup>> GetFilteredTagGroupsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TagGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TagGroup>>> GetFilteredTagGroupsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> GetFilteredTemplatesAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetFilteredTemplatesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetFilteredUsersAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users using a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetFilteredUsersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single flow from the server
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>Task of Flow</returns>
        System.Threading.Tasks.Task<Flow> GetFlowAsync(string flow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single flow from the server
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>Task of ApiResponse (Flow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flow>> GetFlowAsyncWithHttpInfo(string flow);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>Task of FlowContract</returns>
        System.Threading.Tasks.Task<FlowContract> GetFlowContractAsync(string flow, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>Task of ApiResponse (FlowContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowContract>> GetFlowContractAsyncWithHttpInfo(string flow, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the state of a single execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of FlowExecution</returns>
        System.Threading.Tasks.Task<FlowExecution> GetFlowExecutionAsync(string execution);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the state of a single execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of ApiResponse (FlowExecution)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowExecution>> GetFlowExecutionAsyncWithHttpInfo(string execution);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find out the progress of an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        System.Threading.Tasks.Task<FlowExecutionProgress> GetFlowExecutionProgressAsync(string execution, int? timeout = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find out the progress of an existing execution
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> GetFlowExecutionProgressAsyncWithHttpInfo(string execution, int? timeout = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns statistics for flow executions, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of Statistics</returns>
        System.Threading.Tasks.Task<Statistics> GetFlowExecutionStatisticsAsync(string groupTimeBy = null, FilterGroupNode filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns statistics for flow executions, by a complex filter
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (Statistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Statistics>> GetFlowExecutionStatisticsAsyncWithHttpInfo(string groupTimeBy = null, FilterGroupNode filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for this flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;FlowExecution&gt;</returns>
        System.Threading.Tasks.Task<List<FlowExecution>> GetFlowExecutionsAsync(string flow, int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all executions for this flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FlowExecution&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlowExecution>>> GetFlowExecutionsAsyncWithHttpInfo(string flow, int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetFlowSettingsAsync(string step, string property, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFlowSettingsAsyncWithHttpInfo(string step, string property, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get definition of a specific flow step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>Task of FlowStep</returns>
        System.Threading.Tasks.Task<FlowStep> GetFlowStepAsync(string step);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get definition of a specific flow step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>Task of ApiResponse (FlowStep)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowStep>> GetFlowStepAsyncWithHttpInfo(string step);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the possible flow steps
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FlowStep&gt;</returns>
        System.Threading.Tasks.Task<List<FlowStep>> GetFlowStepsAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the possible flow steps
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FlowStep&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlowStep>>> GetFlowStepsAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image of the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetFlowThumbnailAsync(string flow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image of the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFlowThumbnailAsyncWithHttpInfo(string flow);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the flows defined on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Flow&gt;</returns>
        System.Threading.Tasks.Task<List<Flow>> GetFlowsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the flows defined on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Flow&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Flow>>> GetFlowsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Format a number, date, time or dateTime using the given pattern
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>Task of FormattedValue</returns>
        System.Threading.Tasks.Task<FormattedValue> GetFormattedValueAsync(string value, string pattern, string type, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Format a number, date, time or dateTime using the given pattern
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>Task of ApiResponse (FormattedValue)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormattedValue>> GetFormattedValueAsyncWithHttpInfo(string value, string pattern, string type, string locale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>Task of Language</returns>
        System.Threading.Tasks.Task<Language> GetLanguageAsync(string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        System.Threading.Tasks.Task<ApiResponse<Language>> GetLanguageAsyncWithHttpInfo(string language);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the supported languages
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Language&gt;</returns>
        System.Threading.Tasks.Task<List<Language>> GetLanguagesAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the supported languages
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Language&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Language>>> GetLanguagesAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the currently installed license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LicenseInformation</returns>
        System.Threading.Tasks.Task<LicenseInformation> GetLicenseAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the currently installed license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LicenseInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicenseInformation>> GetLicenseAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets defined by plugins
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        System.Threading.Tasks.Task<List<Dataset>> GetPluginDatasetsAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all datasets defined by plugins
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> GetPluginDatasetsAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all Plugins registered in this project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Plugin&gt;</returns>
        System.Threading.Tasks.Task<List<Plugin>> GetPluginsAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all Plugins registered in this project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Plugin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Plugin>>> GetPluginsAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of Printer</returns>
        System.Threading.Tasks.Task<Printer> GetPrinterAsync(string printer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Printer>> GetPrinterAsyncWithHttpInfo(string printer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Printer&gt;</returns>
        System.Threading.Tasks.Task<List<Printer>> GetPrintersAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all printers that can be used to print documents
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Printer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Printer>>> GetPrintersAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all security roles
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Role&gt;</returns>
        System.Threading.Tasks.Task<List<Role>> GetRolesAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all security roles
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Role>>> GetRolesAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all settings
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> GetSettingsAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all settings
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> GetSettingsAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSubSettingsAsync(string settingsType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSubSettingsAsyncWithHttpInfo(string settingsType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of supported features
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Feature&gt;</returns>
        System.Threading.Tasks.Task<List<Feature>> GetSupportedFeaturesAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of supported features
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Feature&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Feature>>> GetSupportedFeaturesAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the currency symbols that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;CurrencySymbol&gt;</returns>
        System.Threading.Tasks.Task<List<CurrencySymbol>> GetSystemCurrencySymbolsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the currency symbols that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencySymbol&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencySymbol>>> GetSystemCurrencySymbolsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LanguageDefinition</returns>
        System.Threading.Tasks.Task<LanguageDefinition> GetSystemDefaultLanguageAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LanguageDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<LanguageDefinition>> GetSystemDefaultLanguageAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemInfo</returns>
        System.Threading.Tasks.Task<SystemInfo> GetSystemInfoAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system information
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemInfo>> GetSystemInfoAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the languages that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>Task of List&lt;LanguageDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<LanguageDefinition>> GetSystemLanguagesAsync(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the languages that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;LanguageDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LanguageDefinition>>> GetSystemLanguagesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printerdefinition
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>Task of PrinterDefinition</returns>
        System.Threading.Tasks.Task<PrinterDefinition> GetSystemPrinterAsync(string printer, bool? includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single printerdefinition
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>Task of ApiResponse (PrinterDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrinterDefinition>> GetSystemPrinterAsyncWithHttpInfo(string printer, bool? includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of the available printers on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>Task of List&lt;PrinterDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<PrinterDefinition>> GetSystemPrintersAsync(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of the available printers on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;PrinterDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PrinterDefinition>>> GetSystemPrintersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the time zones that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetSystemTimeZonesAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the time zones that are availabled on the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetSystemTimeZonesAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>Task of TagGroup</returns>
        System.Threading.Tasks.Task<TagGroup> GetTagGroupAsync(string tagGroupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single tag group object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>Task of ApiResponse (TagGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagGroup>> GetTagGroupAsyncWithHttpInfo(string tagGroupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;TagGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TagGroup>> GetTagGroupsAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all tag groups
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TagGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TagGroup>>> GetTagGroupsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> GetTemplateAsync(string templateId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a single template object
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateAsyncWithHttpInfo(string templateId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the template for the given language.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTemplateContentAsync(string templateId, string lang = null, string version = null, bool? includeMeta = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the content of the template for the given language.
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTemplateContentAsyncWithHttpInfo(string templateId, string lang = null, string version = null, bool? includeMeta = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show the history of a given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>Task of List&lt;Version&gt;</returns>
        System.Threading.Tasks.Task<List<Model.Version>> GetTemplateHistoryAsync(string templateId, string lang = null, int? page = null, int? size = null, string sort = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show the history of a given template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Version&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Model.Version>>> GetTemplateHistoryAsyncWithHttpInfo(string templateId, string lang = null, int? page = null, int? size = null, string sort = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve info about the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>Task of TemplateLanguage</returns>
        System.Threading.Tasks.Task<TemplateLanguage> GetTemplateLanguageAsync(string templateId, string lang);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve info about the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>Task of ApiResponse (TemplateLanguage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateLanguage>> GetTemplateLanguageAsyncWithHttpInfo(string templateId, string lang);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the schema of the fields that are usabel in the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTemplateSchemaAsync(string templateId, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the schema of the fields that are usabel in the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTemplateSchemaAsyncWithHttpInfo(string templateId, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> GetTemplatesAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all templates
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetTemplatesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo(string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetUsersAsync(int? page = null, int? size = null, string sort = null, string filter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all users
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUsersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Install a new license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>Task of LicenseInformation</returns>
        System.Threading.Tasks.Task<LicenseInformation> InstallLicenseAsync(byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Install a new license
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>Task of ApiResponse (LicenseInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicenseInformation>> InstallLicenseAsyncWithHttpInfo(byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Parse the given expression
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ParseExpressionResponse</returns>
        System.Threading.Tasks.Task<ParseExpressionResponse> ParseExpressionAsync(ParseExpressionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Parse the given expression
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (ParseExpressionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParseExpressionResponse>> ParseExpressionAsyncWithHttpInfo(ParseExpressionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Can be used for external calls to the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostFlowCallbackAsync(string callbackId, string executionId = null, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Can be used for external calls to the flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostFlowCallbackAsyncWithHttpInfo(string callbackId, string executionId = null, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of ImportInformation</returns>
        System.Threading.Tasks.Task<ImportInformation> PrepareImportAsync(byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of ApiResponse (ImportInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportInformation>> PrepareImportAsyncWithHttpInfo(byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh the state of the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RefreshConnectorAsync(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh the state of the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefreshConnectorAsyncWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreBackupAsync(byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import the content from the given archive
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreBackupAsyncWithHttpInfo(byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run one or all cleanup processes now
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>Task of List&lt;CleanupActionStatus&gt;</returns>
        System.Threading.Tasks.Task<List<CleanupActionStatus>> RunCleanupAsync(string action = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run one or all cleanup processes now
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CleanupActionStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CleanupActionStatus>>> RunCleanupAsyncWithHttpInfo(string action = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of Language</returns>
        System.Threading.Tasks.Task<Language> SetDefaultLanguageAsync(Language body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        System.Threading.Tasks.Task<ApiResponse<Language>> SetDefaultLanguageAsyncWithHttpInfo(Language body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of Printer</returns>
        System.Threading.Tasks.Task<Printer> SetDefaultPrinterAsync(Printer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default printer for the project
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Printer>> SetDefaultPrinterAsyncWithHttpInfo(Printer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of LanguageDefinition</returns>
        System.Threading.Tasks.Task<LanguageDefinition> SetSystemDefaultLanguageAsync(LanguageDefinition body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the default language for the system
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (LanguageDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<LanguageDefinition>> SetSystemDefaultLanguageAsyncWithHttpInfo(LanguageDefinition body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - start
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ConnectorStage</returns>
        System.Threading.Tasks.Task<ConnectorStage> SetupConnectorAsync(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - start
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorAsyncWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of Connector</returns>
        System.Threading.Tasks.Task<Connector> SetupConnectorCancelAsync(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        System.Threading.Tasks.Task<ApiResponse<Connector>> SetupConnectorCancelAsyncWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - get the current step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ConnectorStage</returns>
        System.Threading.Tasks.Task<ConnectorStage> SetupConnectorCurrentAsync(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - get the current step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorCurrentAsyncWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finish the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of Connector</returns>
        System.Threading.Tasks.Task<Connector> SetupConnectorFinishAsync(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finish the connector setup
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        System.Threading.Tasks.Task<ApiResponse<Connector>> SetupConnectorFinishAsyncWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the next step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ConnectorStage</returns>
        System.Threading.Tasks.Task<ConnectorStage> SetupConnectorNextAsync(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the next step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorNextAsyncWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the previous step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ConnectorStage</returns>
        System.Threading.Tasks.Task<ConnectorStage> SetupConnectorPreviousAsync(string connectorId, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Setup the connector - go to the previous step
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorPreviousAsyncWithHttpInfo(string connectorId, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Syncs all users with the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SyncResult</returns>
        System.Threading.Tasks.Task<SyncResult> SyncExternalUsersAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Syncs all users with the login connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SyncResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyncResult>> SyncExternalUsersAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test if the connection to the connector can be made successfully
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of OperationStatus</returns>
        System.Threading.Tasks.Task<OperationStatus> TestConnectorAsync(string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test if the connection to the connector can be made successfully
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (OperationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationStatus>> TestConnectorAsyncWithHttpInfo(string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send a test document to the printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestPrinterAsync(string printer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send a test document to the printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestPrinterAsyncWithHttpInfo(string printer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> UpdateAssetAsync(string assetId, Asset body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> UpdateAssetAsyncWithHttpInfo(string assetId, Asset body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAssetContentAsync(string assetId, byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the asset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAssetContentAsyncWithHttpInfo(string assetId, byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>Task of Connector</returns>
        System.Threading.Tasks.Task<Connector> UpdateConnectorAsync(string connectorId, Connector body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the connector
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        System.Threading.Tasks.Task<ApiResponse<Connector>> UpdateConnectorAsyncWithHttpInfo(string connectorId, Connector body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>Task of Data</returns>
        System.Threading.Tasks.Task<Data> UpdateDataAsync(string dataId, Data body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the data
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Data)</returns>
        System.Threading.Tasks.Task<ApiResponse<Data>> UpdateDataAsyncWithHttpInfo(string dataId, Data body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string datasetId, Dataset body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the dataset
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> UpdateDatasetAsyncWithHttpInfo(string datasetId, Dataset body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of Flow</returns>
        System.Threading.Tasks.Task<Flow> UpdateFlowAsync(string flow, Flow body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single flow
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of ApiResponse (Flow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flow>> UpdateFlowAsyncWithHttpInfo(string flow, Flow body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of Language</returns>
        System.Threading.Tasks.Task<Language> UpdateLanguageAsync(string language, Language body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        System.Threading.Tasks.Task<ApiResponse<Language>> UpdateLanguageAsyncWithHttpInfo(string language, Language body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of Printer</returns>
        System.Threading.Tasks.Task<Printer> UpdatePrinterAsync(string printer, Printer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single printer
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Printer>> UpdatePrinterAsyncWithHttpInfo(string printer, Printer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update settings of one type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateSubSettingsAsync(string settingsType, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update settings of one type
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSubSettingsAsyncWithHttpInfo(string settingsType, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the tag group
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>Task of TagGroup</returns>
        System.Threading.Tasks.Task<TagGroup> UpdateTagGroupAsync(string tagGroupId, TagGroup body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the tag group
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (TagGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagGroup>> UpdateTagGroupAsyncWithHttpInfo(string tagGroupId, TagGroup body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> UpdateTemplateAsync(string templateId, Template body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the template
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> UpdateTemplateAsyncWithHttpInfo(string templateId, Template body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTemplateContentAsync(string templateId, string lang = null, string description = null, byte[] body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the content of the template for the given language
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTemplateContentAsyncWithHttpInfo(string templateId, string lang = null, string description = null, byte[] body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync(string user, User body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a single user
        /// </remarks>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo(string user, User body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Xpertdoc.SmartFlows.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Xpertdoc.SmartFlows.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Xpertdoc.SmartFlows.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xpertdoc.SmartFlows.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Add a &#x60;assets&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Asset</returns>
        public Asset AddAsset(BinaryDataHolder body = null)
        {
            ApiResponse<Asset> localVarResponse = AddAssetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a &#x60;assets&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse<Asset> AddAssetWithHttpInfo(BinaryDataHolder body = null)
        {

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  Add a &#x60;assets&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> AddAssetAsync(BinaryDataHolder body = null)
        {
            ApiResponse<Asset> localVarResponse = await AddAssetAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a &#x60;assets&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> AddAssetAsyncWithHttpInfo(BinaryDataHolder body = null)
        {

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  Get info about the login methods
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationInfo</returns>
        public AuthenticationInfo AuthenticateGet()
        {
            ApiResponse<AuthenticationInfo> localVarResponse = AuthenticateGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get info about the login methods
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationInfo</returns>
        public ApiResponse<AuthenticationInfo> AuthenticateGetWithHttpInfo()
        {

            var localVarPath = "/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationInfo)));
        }

        /// <summary>
        ///  Get info about the login methods
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationInfo</returns>
        public async System.Threading.Tasks.Task<AuthenticationInfo> AuthenticateGetAsync()
        {
            ApiResponse<AuthenticationInfo> localVarResponse = await AuthenticateGetAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get info about the login methods
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationInfo>> AuthenticateGetAsyncWithHttpInfo()
        {

            var localVarPath = "/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationInfo)));
        }

        /// <summary>
        ///  Authenticate a user using user/password information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>Authentication</returns>
        public Authentication AuthenticateLoginPost(Login body = null)
        {
            ApiResponse<Authentication> localVarResponse = AuthenticateLoginPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Authenticate a user using user/password information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>ApiResponse of Authentication</returns>
        public ApiResponse<Authentication> AuthenticateLoginPostWithHttpInfo(Login body = null)
        {

            var localVarPath = "/authenticate/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authentication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Authentication)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authentication)));
        }

        /// <summary>
        ///  Authenticate a user using user/password information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>Task of Authentication</returns>
        public async System.Threading.Tasks.Task<Authentication> AuthenticateLoginPostAsync(Login body = null)
        {
            ApiResponse<Authentication> localVarResponse = await AuthenticateLoginPostAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Authenticate a user using user/password information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The login information (optional)</param>
        /// <returns>Task of ApiResponse (Authentication)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Authentication>> AuthenticateLoginPostAsyncWithHttpInfo(Login body = null)
        {

            var localVarPath = "/authenticate/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authentication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Authentication)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authentication)));
        }

        /// <summary>
        ///  Authenticate a user using OAuth2 authorization code
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>Authentication</returns>
        public Authentication AuthenticateOauth2Post(Oauth2Parameters body = null)
        {
            ApiResponse<Authentication> localVarResponse = AuthenticateOauth2PostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Authenticate a user using OAuth2 authorization code
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>ApiResponse of Authentication</returns>
        public ApiResponse<Authentication> AuthenticateOauth2PostWithHttpInfo(Oauth2Parameters body = null)
        {

            var localVarPath = "/authenticate/oauth2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateOauth2Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authentication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Authentication)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authentication)));
        }

        /// <summary>
        ///  Authenticate a user using OAuth2 authorization code
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>Task of Authentication</returns>
        public async System.Threading.Tasks.Task<Authentication> AuthenticateOauth2PostAsync(Oauth2Parameters body = null)
        {
            ApiResponse<Authentication> localVarResponse = await AuthenticateOauth2PostAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Authenticate a user using OAuth2 authorization code
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The authorization code (optional)</param>
        /// <returns>Task of ApiResponse (Authentication)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Authentication>> AuthenticateOauth2PostAsyncWithHttpInfo(Oauth2Parameters body = null)
        {

            var localVarPath = "/authenticate/oauth2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateOauth2Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authentication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Authentication)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authentication)));
        }

        /// <summary>
        ///  Cancel an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>FlowExecutionProgress</returns>
        public FlowExecutionProgress CancelFlowExecution(string execution)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = CancelFlowExecutionWithHttpInfo(execution);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancel an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        public ApiResponse<FlowExecutionProgress> CancelFlowExecutionWithHttpInfo(string execution)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->CancelFlowExecution");

            var localVarPath = "/flows/executions/{execution}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFlowExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Cancel an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        public async System.Threading.Tasks.Task<FlowExecutionProgress> CancelFlowExecutionAsync(string execution)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = await CancelFlowExecutionAsyncWithHttpInfo(execution);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancel an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> CancelFlowExecutionAsyncWithHttpInfo(string execution)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->CancelFlowExecution");

            var localVarPath = "/flows/executions/{execution}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFlowExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Clear all settings and revert to default settings for one settings type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns></returns>
        public void ClearSubSettings(string settingsType)
        {
            ClearSubSettingsWithHttpInfo(settingsType);
        }

        /// <summary>
        ///  Clear all settings and revert to default settings for one settings type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClearSubSettingsWithHttpInfo(string settingsType)
        {
            // verify the required parameter 'settingsType' is set
            if (settingsType == null)
                throw new ApiException(400, "Missing required parameter 'settingsType' when calling DefaultApi->ClearSubSettings");

            var localVarPath = "/settings/{settingsType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsType != null) localVarPathParams.Add("settingsType", Configuration.ApiClient.ParameterToString(settingsType)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearSubSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Clear all settings and revert to default settings for one settings type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearSubSettingsAsync(string settingsType)
        {
            await ClearSubSettingsAsyncWithHttpInfo(settingsType);

        }

        /// <summary>
        ///  Clear all settings and revert to default settings for one settings type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearSubSettingsAsyncWithHttpInfo(string settingsType)
        {
            // verify the required parameter 'settingsType' is set
            if (settingsType == null)
                throw new ApiException(400, "Missing required parameter 'settingsType' when calling DefaultApi->ClearSubSettings");

            var localVarPath = "/settings/{settingsType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsType != null) localVarPathParams.Add("settingsType", Configuration.ApiClient.ParameterToString(settingsType)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearSubSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Continue an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>FlowExecutionProgress</returns>
        public FlowExecutionProgress ContinueFlowExecution(string execution, Object body = null)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = ContinueFlowExecutionWithHttpInfo(execution, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Continue an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        public ApiResponse<FlowExecutionProgress> ContinueFlowExecutionWithHttpInfo(string execution, Object body = null)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->ContinueFlowExecution");

            var localVarPath = "/flows/executions/{execution}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContinueFlowExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Continue an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        public async System.Threading.Tasks.Task<FlowExecutionProgress> ContinueFlowExecutionAsync(string execution, Object body = null)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = await ContinueFlowExecutionAsyncWithHttpInfo(execution, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Continue an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="body">The object responding to the schema of the executionProgress object (optional)</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> ContinueFlowExecutionAsyncWithHttpInfo(string execution, Object body = null)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->ContinueFlowExecution");

            var localVarPath = "/flows/executions/{execution}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContinueFlowExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Create a backup of all objects in the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CreateBackup(bool? includeHistory = null, bool? includeSensitiveData = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = CreateBackupWithHttpInfo(includeHistory, includeSensitiveData);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a backup of all objects in the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> CreateBackupWithHttpInfo(bool? includeHistory = null, bool? includeSensitiveData = null)
        {

            var localVarPath = "/system/backup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeHistory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistory", includeHistory)); // query parameter
            if (includeSensitiveData != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSensitiveData", includeSensitiveData)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBackup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Create a backup of all objects in the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CreateBackupAsync(bool? includeHistory = null, bool? includeSensitiveData = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await CreateBackupAsyncWithHttpInfo(includeHistory, includeSensitiveData);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a backup of all objects in the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to true)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CreateBackupAsyncWithHttpInfo(bool? includeHistory = null, bool? includeSensitiveData = null)
        {

            var localVarPath = "/system/backup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeHistory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistory", includeHistory)); // query parameter
            if (includeSensitiveData != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSensitiveData", includeSensitiveData)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBackup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Add a &#x60;Connector&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>Connector</returns>
        public Connector CreateConnector(Connector body = null)
        {
            ApiResponse<Connector> localVarResponse = CreateConnectorWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a &#x60;Connector&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        public ApiResponse<Connector> CreateConnectorWithHttpInfo(Connector body = null)
        {

            var localVarPath = "/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Add a &#x60;Connector&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>Task of Connector</returns>
        public async System.Threading.Tasks.Task<Connector> CreateConnectorAsync(Connector body = null)
        {
            ApiResponse<Connector> localVarResponse = await CreateConnectorAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a &#x60;Connector&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The connector to add (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Connector>> CreateConnectorAsyncWithHttpInfo(Connector body = null)
        {

            var localVarPath = "/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Add a &#x60;Dataset&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Dataset</returns>
        public Dataset CreateDataset(Dataset body = null)
        {
            ApiResponse<Dataset> localVarResponse = CreateDatasetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a &#x60;Dataset&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Dataset</returns>
        public ApiResponse<Dataset> CreateDatasetWithHttpInfo(Dataset body = null)
        {

            var localVarPath = "/datasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dataset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dataset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dataset)));
        }

        /// <summary>
        ///  Add a &#x60;Dataset&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(Dataset body = null)
        {
            ApiResponse<Dataset> localVarResponse = await CreateDatasetAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a &#x60;Dataset&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dataset>> CreateDatasetAsyncWithHttpInfo(Dataset body = null)
        {

            var localVarPath = "/datasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dataset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dataset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dataset)));
        }

        /// <summary>
        ///  Add data that conforms to a dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>Data</returns>
        public Data CreateDatasetData(string datasetId, Data body = null)
        {
            ApiResponse<Data> localVarResponse = CreateDatasetDataWithHttpInfo(datasetId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add data that conforms to a dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>ApiResponse of Data</returns>
        public ApiResponse<Data> CreateDatasetDataWithHttpInfo(string datasetId, Data body = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->CreateDatasetData");

            var localVarPath = "/datasets/{datasetId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDatasetData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        ///  Add data that conforms to a dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>Task of Data</returns>
        public async System.Threading.Tasks.Task<Data> CreateDatasetDataAsync(string datasetId, Data body = null)
        {
            ApiResponse<Data> localVarResponse = await CreateDatasetDataAsyncWithHttpInfo(datasetId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add data that conforms to a dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The data object to create (optional)</param>
        /// <returns>Task of ApiResponse (Data)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Data>> CreateDatasetDataAsyncWithHttpInfo(string datasetId, Data body = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->CreateDatasetData");

            var localVarPath = "/datasets/{datasetId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDatasetData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        ///  Create preview of given template(ref) with given data(ref)
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>List&lt;GeneratedDocument&gt;</returns>
        public List<GeneratedDocument> CreateDocument(DocGenSettings body = null)
        {
            ApiResponse<List<GeneratedDocument>> localVarResponse = CreateDocumentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create preview of given template(ref) with given data(ref)
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>ApiResponse of List&lt;GeneratedDocument&gt;</returns>
        public ApiResponse<List<GeneratedDocument>> CreateDocumentWithHttpInfo(DocGenSettings body = null)
        {

            var localVarPath = "/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeneratedDocument>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GeneratedDocument>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeneratedDocument>)));
        }

        /// <summary>
        ///  Create preview of given template(ref) with given data(ref)
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>Task of List&lt;GeneratedDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<GeneratedDocument>> CreateDocumentAsync(DocGenSettings body = null)
        {
            ApiResponse<List<GeneratedDocument>> localVarResponse = await CreateDocumentAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Create preview of given template(ref) with given data(ref)
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The parameters to create the document with (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GeneratedDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GeneratedDocument>>> CreateDocumentAsyncWithHttpInfo(DocGenSettings body = null)
        {

            var localVarPath = "/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeneratedDocument>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GeneratedDocument>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeneratedDocument>)));
        }

        /// <summary>
        ///  Create an export file for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CreateExport(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = CreateExportWithHttpInfo(body, includeHistory, includeSensitiveData);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an export file for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> CreateExportWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {

            var localVarPath = "/system/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeHistory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistory", includeHistory)); // query parameter
            if (includeSensitiveData != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSensitiveData", includeSensitiveData)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Create an export file for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CreateExportAsync(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await CreateExportAsyncWithHttpInfo(body, includeHistory, includeSensitiveData);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Create an export file for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CreateExportAsyncWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {

            var localVarPath = "/system/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeHistory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistory", includeHistory)); // query parameter
            if (includeSensitiveData != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSensitiveData", includeSensitiveData)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Create an export for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>FlatArchive</returns>
        public FlatArchive CreateFlatExport(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {
            ApiResponse<FlatArchive> localVarResponse = CreateFlatExportWithHttpInfo(body, includeHistory, includeSensitiveData);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an export for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>ApiResponse of FlatArchive</returns>
        public ApiResponse<FlatArchive> CreateFlatExportWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {

            var localVarPath = "/system/export/flat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeHistory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistory", includeHistory)); // query parameter
            if (includeSensitiveData != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSensitiveData", includeSensitiveData)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFlatExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlatArchive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlatArchive)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlatArchive)));
        }

        /// <summary>
        ///  Create an export for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of FlatArchive</returns>
        public async System.Threading.Tasks.Task<FlatArchive> CreateFlatExportAsync(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {
            ApiResponse<FlatArchive> localVarResponse = await CreateFlatExportAsyncWithHttpInfo(body, includeHistory, includeSensitiveData);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Create an export for the given request
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the archive to create (optional)</param>
        /// <param name="includeHistory">Whether to include the complete history of templates (optional, default to false)</param>
        /// <param name="includeSensitiveData">Whether to include possible sensitive data (passwords from connectors e.a.) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (FlatArchive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlatArchive>> CreateFlatExportAsyncWithHttpInfo(ArchiveRequest body = null, bool? includeHistory = null, bool? includeSensitiveData = null)
        {

            var localVarPath = "/system/export/flat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeHistory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistory", includeHistory)); // query parameter
            if (includeSensitiveData != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSensitiveData", includeSensitiveData)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFlatExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlatArchive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlatArchive)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlatArchive)));
        }

        /// <summary>
        ///  Add a new flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Flow</returns>
        public Flow CreateFlow(Flow body = null)
        {
            ApiResponse<Flow> localVarResponse = CreateFlowWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>ApiResponse of Flow</returns>
        public ApiResponse<Flow> CreateFlowWithHttpInfo(Flow body = null)
        {

            var localVarPath = "/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Flow)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flow)));
        }

        /// <summary>
        ///  Add a new flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of Flow</returns>
        public async System.Threading.Tasks.Task<Flow> CreateFlowAsync(Flow body = null)
        {
            ApiResponse<Flow> localVarResponse = await CreateFlowAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of ApiResponse (Flow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flow>> CreateFlowAsyncWithHttpInfo(Flow body = null)
        {

            var localVarPath = "/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Flow)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flow)));
        }

        /// <summary>
        ///  Add a new language that is supported
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>Language</returns>
        public Language CreateLanguage(Language body = null)
        {
            ApiResponse<Language> localVarResponse = CreateLanguageWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new language that is supported
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>ApiResponse of Language</returns>
        public ApiResponse<Language> CreateLanguageWithHttpInfo(Language body = null)
        {

            var localVarPath = "/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Add a new language that is supported
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>Task of Language</returns>
        public async System.Threading.Tasks.Task<Language> CreateLanguageAsync(Language body = null)
        {
            ApiResponse<Language> localVarResponse = await CreateLanguageAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new language that is supported
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the language to create (optional)</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Language>> CreateLanguageAsyncWithHttpInfo(Language body = null)
        {

            var localVarPath = "/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Add a new printer that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>Printer</returns>
        public Printer CreatePrinter(Printer body = null)
        {
            ApiResponse<Printer> localVarResponse = CreatePrinterWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new printer that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>ApiResponse of Printer</returns>
        public ApiResponse<Printer> CreatePrinterWithHttpInfo(Printer body = null)
        {

            var localVarPath = "/printers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Add a new printer that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>Task of Printer</returns>
        public async System.Threading.Tasks.Task<Printer> CreatePrinterAsync(Printer body = null)
        {
            ApiResponse<Printer> localVarResponse = await CreatePrinterAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new printer that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the printer to create (optional)</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Printer>> CreatePrinterAsyncWithHttpInfo(Printer body = null)
        {

            var localVarPath = "/printers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Add a tagGroup object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TagGroup</returns>
        public TagGroup CreateTagGroup(TagGroup body = null)
        {
            ApiResponse<TagGroup> localVarResponse = CreateTagGroupWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a tagGroup object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TagGroup</returns>
        public ApiResponse<TagGroup> CreateTagGroupWithHttpInfo(TagGroup body = null)
        {

            var localVarPath = "/taggroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagGroup)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagGroup)));
        }

        /// <summary>
        ///  Add a tagGroup object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TagGroup</returns>
        public async System.Threading.Tasks.Task<TagGroup> CreateTagGroupAsync(TagGroup body = null)
        {
            ApiResponse<TagGroup> localVarResponse = await CreateTagGroupAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a tagGroup object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TagGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagGroup>> CreateTagGroupAsyncWithHttpInfo(TagGroup body = null)
        {

            var localVarPath = "/taggroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagGroup)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagGroup)));
        }

        /// <summary>
        ///  Add a &#x60;templates&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Template</returns>
        public Template CreateTemplate(Template body = null)
        {
            ApiResponse<Template> localVarResponse = CreateTemplateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a &#x60;templates&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse<Template> CreateTemplateWithHttpInfo(Template body = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        ///  Add a &#x60;templates&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CreateTemplateAsync(Template body = null)
        {
            ApiResponse<Template> localVarResponse = await CreateTemplateAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a &#x60;templates&#x60; object to the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> CreateTemplateAsyncWithHttpInfo(Template body = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        ///  Add a new user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>User</returns>
        public User CreateUser(User body = null)
        {
            ApiResponse<User> localVarResponse = CreateUserWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> CreateUserWithHttpInfo(User body = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Add a new user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserAsync(User body = null)
        {
            ApiResponse<User> localVarResponse = await CreateUserAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The settings for the user to create (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> CreateUserAsyncWithHttpInfo(User body = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Remove a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteAsset(string assetId, bool? deleteInbound = null)
        {
            DeleteAssetWithHttpInfo(assetId, deleteInbound);
        }

        /// <summary>
        ///  Remove a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssetWithHttpInfo(string assetId, bool? deleteInbound = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->DeleteAsset");

            var localVarPath = "/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetAsync(string assetId, bool? deleteInbound = null)
        {
            await DeleteAssetAsyncWithHttpInfo(assetId, deleteInbound);

        }

        /// <summary>
        ///  Remove a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="deleteInbound">When true, all items linked to this asset will also be deleted. When false, an error is returned when there is some link to this asset (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAsyncWithHttpInfo(string assetId, bool? deleteInbound = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->DeleteAsset");

            var localVarPath = "/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteConnector(string connectorId, bool? deleteInbound = null)
        {
            DeleteConnectorWithHttpInfo(connectorId, deleteInbound);
        }

        /// <summary>
        ///  Remove a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteConnectorWithHttpInfo(string connectorId, bool? deleteInbound = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->DeleteConnector");

            var localVarPath = "/connectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConnectorAsync(string connectorId, bool? deleteInbound = null)
        {
            await DeleteConnectorAsyncWithHttpInfo(connectorId, deleteInbound);

        }

        /// <summary>
        ///  Remove a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this connector (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorAsyncWithHttpInfo(string connectorId, bool? deleteInbound = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->DeleteConnector");

            var localVarPath = "/connectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single data object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteData(string dataId, bool? deleteInbound = null)
        {
            DeleteDataWithHttpInfo(dataId, deleteInbound);
        }

        /// <summary>
        ///  Remove a single data object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDataWithHttpInfo(string dataId, bool? deleteInbound = null)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->DeleteData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single data object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDataAsync(string dataId, bool? deleteInbound = null)
        {
            await DeleteDataAsyncWithHttpInfo(dataId, deleteInbound);

        }

        /// <summary>
        ///  Remove a single data object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="deleteInbound">When true, all items linked to this data will also be deleted. When false, an error is returned when there is some link to this data (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataAsyncWithHttpInfo(string dataId, bool? deleteInbound = null)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->DeleteData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteDataset(string datasetId, bool? deleteInbound = null)
        {
            DeleteDatasetWithHttpInfo(datasetId, deleteInbound);
        }

        /// <summary>
        ///  Remove a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDatasetWithHttpInfo(string datasetId, bool? deleteInbound = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->DeleteDataset");

            var localVarPath = "/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDatasetAsync(string datasetId, bool? deleteInbound = null)
        {
            await DeleteDatasetAsyncWithHttpInfo(datasetId, deleteInbound);

        }

        /// <summary>
        ///  Remove a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDatasetAsyncWithHttpInfo(string datasetId, bool? deleteInbound = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->DeleteDataset");

            var localVarPath = "/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns></returns>
        public void DeleteFlow(string flow)
        {
            DeleteFlowWithHttpInfo(flow);
        }

        /// <summary>
        ///  Remove a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFlowWithHttpInfo(string flow)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->DeleteFlow");

            var localVarPath = "/flows/{flow}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFlowAsync(string flow)
        {
            await DeleteFlowAsyncWithHttpInfo(flow);

        }

        /// <summary>
        ///  Remove a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFlowAsyncWithHttpInfo(string flow)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->DeleteFlow");

            var localVarPath = "/flows/{flow}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteLanguage(string language, bool? force = null, bool? deleteInbound = null)
        {
            DeleteLanguageWithHttpInfo(language, force, deleteInbound);
        }

        /// <summary>
        ///  Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLanguageWithHttpInfo(string language, bool? force = null, bool? deleteInbound = null)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling DefaultApi->DeleteLanguage");

            var localVarPath = "/languages/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLanguageAsync(string language, bool? force = null, bool? deleteInbound = null)
        {
            await DeleteLanguageAsyncWithHttpInfo(language, force, deleteInbound);

        }

        /// <summary>
        ///  Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) language in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this language will also be deleted. When false, an error is returned when there is some link to this language (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLanguageAsyncWithHttpInfo(string language, bool? force = null, bool? deleteInbound = null)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling DefaultApi->DeleteLanguage");

            var localVarPath = "/languages/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns></returns>
        public void DeletePrinter(string printer, bool? force = null, bool? deleteInbound = null)
        {
            DeletePrinterWithHttpInfo(printer, force, deleteInbound);
        }

        /// <summary>
        ///  Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePrinterWithHttpInfo(string printer, bool? force = null, bool? deleteInbound = null)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->DeletePrinter");

            var localVarPath = "/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePrinterAsync(string printer, bool? force = null, bool? deleteInbound = null)
        {
            await DeletePrinterAsyncWithHttpInfo(printer, force, deleteInbound);

        }

        /// <summary>
        ///  Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="force">true if you want to delete the last (and by definition then default) printer in the project (optional, default to false)</param>
        /// <param name="deleteInbound">When true, all items linked to this dataset will also be deleted. When false, an error is returned when there is some link to this dataset (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePrinterAsyncWithHttpInfo(string printer, bool? force = null, bool? deleteInbound = null)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->DeletePrinter");

            var localVarPath = "/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteTagGroup(string tagGroupId, bool? deleteInbound = null)
        {
            DeleteTagGroupWithHttpInfo(tagGroupId, deleteInbound);
        }

        /// <summary>
        ///  Remove a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTagGroupWithHttpInfo(string tagGroupId, bool? deleteInbound = null)
        {
            // verify the required parameter 'tagGroupId' is set
            if (tagGroupId == null)
                throw new ApiException(400, "Missing required parameter 'tagGroupId' when calling DefaultApi->DeleteTagGroup");

            var localVarPath = "/taggroups/{tagGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagGroupId != null) localVarPathParams.Add("tagGroupId", Configuration.ApiClient.ParameterToString(tagGroupId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTagGroupAsync(string tagGroupId, bool? deleteInbound = null)
        {
            await DeleteTagGroupAsyncWithHttpInfo(tagGroupId, deleteInbound);

        }

        /// <summary>
        ///  Remove a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="deleteInbound">When true, all tags linked to this tag group will also be deleted. When false, an error is returned when there is some link to this tag group (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTagGroupAsyncWithHttpInfo(string tagGroupId, bool? deleteInbound = null)
        {
            // verify the required parameter 'tagGroupId' is set
            if (tagGroupId == null)
                throw new ApiException(400, "Missing required parameter 'tagGroupId' when calling DefaultApi->DeleteTagGroup");

            var localVarPath = "/taggroups/{tagGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagGroupId != null) localVarPathParams.Add("tagGroupId", Configuration.ApiClient.ParameterToString(tagGroupId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteTemplate(string templateId, bool? deleteInbound = null)
        {
            DeleteTemplateWithHttpInfo(templateId, deleteInbound);
        }

        /// <summary>
        ///  Remove a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateWithHttpInfo(string templateId, bool? deleteInbound = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->DeleteTemplate");

            var localVarPath = "/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateAsync(string templateId, bool? deleteInbound = null)
        {
            await DeleteTemplateAsyncWithHttpInfo(templateId, deleteInbound);

        }

        /// <summary>
        ///  Remove a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="deleteInbound">When true, all items linked to this template will also be deleted. When false, an error is returned when there is some link to this template (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo(string templateId, bool? deleteInbound = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->DeleteTemplate");

            var localVarPath = "/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove the content for the given language of the given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteTemplateContent(string templateId, string lang = null, bool? deleteInbound = null)
        {
            DeleteTemplateContentWithHttpInfo(templateId, lang, deleteInbound);
        }

        /// <summary>
        ///  Remove the content for the given language of the given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateContentWithHttpInfo(string templateId, string lang = null, bool? deleteInbound = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->DeleteTemplateContent");

            var localVarPath = "/templates/{templateId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove the content for the given language of the given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateContentAsync(string templateId, string lang = null, bool? deleteInbound = null)
        {
            await DeleteTemplateContentAsyncWithHttpInfo(templateId, lang, deleteInbound);

        }

        /// <summary>
        ///  Remove the content for the given language of the given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="deleteInbound">When true, all items linked to this connector will also be deleted. When false, an error is returned when there is some link to this standard template (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateContentAsyncWithHttpInfo(string templateId, string lang = null, bool? deleteInbound = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->DeleteTemplateContent");

            var localVarPath = "/templates/{templateId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (deleteInbound != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteInbound", deleteInbound)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single user. You cannot delete the last admin user.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteUser(string user, bool? force = null)
        {
            DeleteUserWithHttpInfo(user, force);
        }

        /// <summary>
        ///  Remove a single user. You cannot delete the last admin user.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo(string user, bool? force = null)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->DeleteUser");

            var localVarPath = "/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove a single user. You cannot delete the last admin user.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(string user, bool? force = null)
        {
            await DeleteUserAsyncWithHttpInfo(user, force);

        }

        /// <summary>
        ///  Remove a single user. You cannot delete the last admin user.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="force">true if you want to delete the last admin user (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo(string user, bool? force = null)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->DeleteUser");

            var localVarPath = "/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns></returns>
        public void ExecuteFlatImport(FlatArchive body = null)
        {
            ExecuteFlatImportWithHttpInfo(body);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExecuteFlatImportWithHttpInfo(FlatArchive body = null)
        {

            var localVarPath = "/system/import/flat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteFlatImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteFlatImportAsync(FlatArchive body = null)
        {
            await ExecuteFlatImportAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The flat archive content (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteFlatImportAsyncWithHttpInfo(FlatArchive body = null)
        {

            var localVarPath = "/system/import/flat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteFlatImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Execute a flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>FlowExecutionProgress</returns>
        public FlowExecutionProgress ExecuteFlow(string flowId = null, string datasetId = null, Object body = null)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = ExecuteFlowWithHttpInfo(flowId, datasetId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Execute a flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        public ApiResponse<FlowExecutionProgress> ExecuteFlowWithHttpInfo(string flowId = null, string datasetId = null, Object body = null)
        {

            var localVarPath = "/flows/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flowId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "flowId", flowId)); // query parameter
            if (datasetId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasetId", datasetId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Execute a flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        public async System.Threading.Tasks.Task<FlowExecutionProgress> ExecuteFlowAsync(string flowId = null, string datasetId = null, Object body = null)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = await ExecuteFlowAsyncWithHttpInfo(flowId, datasetId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Execute a flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowId">The id of the flow. (optional)</param>
        /// <param name="datasetId">The id of the dataset the flow input conforms to. Optional if flowId is present or no data is sent. (optional)</param>
        /// <param name="body">The input object for the flow (optional)</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> ExecuteFlowAsyncWithHttpInfo(string flowId = null, string datasetId = null, Object body = null)
        {

            var localVarPath = "/flows/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flowId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "flowId", flowId)); // query parameter
            if (datasetId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasetId", datasetId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns></returns>
        public void ExecuteImport(RestoreContext body = null)
        {
            ExecuteImportWithHttpInfo(body);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExecuteImportWithHttpInfo(RestoreContext body = null)
        {

            var localVarPath = "/system/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteImportAsync(RestoreContext body = null)
        {
            await ExecuteImportAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive with mappings for the unresolved entities (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteImportAsyncWithHttpInfo(RestoreContext body = null)
        {

            var localVarPath = "/system/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Check whether the data with the given id exists
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns></returns>
        public void ExistsData(string dataId)
        {
            ExistsDataWithHttpInfo(dataId);
        }

        /// <summary>
        ///  Check whether the data with the given id exists
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExistsDataWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->ExistsData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExistsData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Check whether the data with the given id exists
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExistsDataAsync(string dataId)
        {
            await ExistsDataAsyncWithHttpInfo(dataId);

        }

        /// <summary>
        ///  Check whether the data with the given id exists
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExistsDataAsyncWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->ExistsData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExistsData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Returns all executions for all flows
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;FlowExecution&gt;</returns>
        public List<FlowExecution> GetAllFlowExecutions(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<FlowExecution>> localVarResponse = GetAllFlowExecutionsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all executions for all flows
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowExecution&gt;</returns>
        public ApiResponse<List<FlowExecution>> GetAllFlowExecutionsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/flows/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFlowExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowExecution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowExecution>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowExecution>)));
        }

        /// <summary>
        ///  Returns all executions for all flows
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;FlowExecution&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlowExecution>> GetAllFlowExecutionsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<FlowExecution>> localVarResponse = await GetAllFlowExecutionsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all executions for all flows
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FlowExecution&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FlowExecution>>> GetAllFlowExecutionsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/flows/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFlowExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowExecution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowExecution>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowExecution>)));
        }

        /// <summary>
        ///  Retrieve a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>Asset</returns>
        public Asset GetAsset(string assetId, bool? includeContent = null)
        {
            ApiResponse<Asset> localVarResponse = GetAssetWithHttpInfo(assetId, includeContent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse<Asset> GetAssetWithHttpInfo(string assetId, bool? includeContent = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->GetAsset");

            var localVarPath = "/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (includeContent != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeContent", includeContent)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  Retrieve a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> GetAssetAsync(string assetId, bool? includeContent = null)
        {
            ApiResponse<Asset> localVarResponse = await GetAssetAsyncWithHttpInfo(assetId, includeContent);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single asset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="includeContent">true to return content with the asset (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetAsyncWithHttpInfo(string assetId, bool? includeContent = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->GetAsset");

            var localVarPath = "/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (includeContent != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeContent", includeContent)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  Return the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns></returns>
        public void GetAssetContent(string assetId)
        {
            GetAssetContentWithHttpInfo(assetId);
        }

        /// <summary>
        ///  Return the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetAssetContentWithHttpInfo(string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->GetAssetContent");

            var localVarPath = "/assets/{assetId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octetstream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Return the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAssetContentAsync(string assetId)
        {
            await GetAssetContentAsyncWithHttpInfo(assetId);

        }

        /// <summary>
        ///  Return the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAssetContentAsyncWithHttpInfo(string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->GetAssetContent");

            var localVarPath = "/assets/{assetId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octetstream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Returns all assets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Asset&gt;</returns>
        public List<Asset> GetAssets(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Asset>> localVarResponse = GetAssetsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all assets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Asset&gt;</returns>
        public ApiResponse<List<Asset>> GetAssetsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Asset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asset>)));
        }

        /// <summary>
        ///  Returns all assets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Asset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Asset>> GetAssetsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Asset>> localVarResponse = await GetAssetsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all assets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Asset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Asset>>> GetAssetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Asset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asset>)));
        }

        /// <summary>
        ///  Retrieve a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Connector</returns>
        public Connector GetConnector(string connectorId)
        {
            ApiResponse<Connector> localVarResponse = GetConnectorWithHttpInfo(connectorId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of Connector</returns>
        public ApiResponse<Connector> GetConnectorWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->GetConnector");

            var localVarPath = "/connectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Retrieve a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of Connector</returns>
        public async System.Threading.Tasks.Task<Connector> GetConnectorAsync(string connectorId)
        {
            ApiResponse<Connector> localVarResponse = await GetConnectorAsyncWithHttpInfo(connectorId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single connector object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Connector>> GetConnectorAsyncWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->GetConnector");

            var localVarPath = "/connectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Retrieve a single connectorType object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>ConnectorType</returns>
        public ConnectorType GetConnectorType(string connectorTypeId)
        {
            ApiResponse<ConnectorType> localVarResponse = GetConnectorTypeWithHttpInfo(connectorTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single connectorType object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>ApiResponse of ConnectorType</returns>
        public ApiResponse<ConnectorType> GetConnectorTypeWithHttpInfo(string connectorTypeId)
        {
            // verify the required parameter 'connectorTypeId' is set
            if (connectorTypeId == null)
                throw new ApiException(400, "Missing required parameter 'connectorTypeId' when calling DefaultApi->GetConnectorType");

            var localVarPath = "/connectors/types/{connectorTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorTypeId != null) localVarPathParams.Add("connectorTypeId", Configuration.ApiClient.ParameterToString(connectorTypeId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectorType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorType)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorType)));
        }

        /// <summary>
        ///  Retrieve a single connectorType object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>Task of ConnectorType</returns>
        public async System.Threading.Tasks.Task<ConnectorType> GetConnectorTypeAsync(string connectorTypeId)
        {
            ApiResponse<ConnectorType> localVarResponse = await GetConnectorTypeAsyncWithHttpInfo(connectorTypeId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single connectorType object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorTypeId">The id of the connector type</param>
        /// <returns>Task of ApiResponse (ConnectorType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorType>> GetConnectorTypeAsyncWithHttpInfo(string connectorTypeId)
        {
            // verify the required parameter 'connectorTypeId' is set
            if (connectorTypeId == null)
                throw new ApiException(400, "Missing required parameter 'connectorTypeId' when calling DefaultApi->GetConnectorType");

            var localVarPath = "/connectors/types/{connectorTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorTypeId != null) localVarPathParams.Add("connectorTypeId", Configuration.ApiClient.ParameterToString(connectorTypeId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectorType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorType)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorType)));
        }

        /// <summary>
        ///  Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ConnectorType&gt;</returns>
        public List<ConnectorType> GetConnectorTypes()
        {
            ApiResponse<List<ConnectorType>> localVarResponse = GetConnectorTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ConnectorType&gt;</returns>
        public ApiResponse<List<ConnectorType>> GetConnectorTypesWithHttpInfo()
        {

            var localVarPath = "/connectors/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectorTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConnectorType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConnectorType>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConnectorType>)));
        }

        /// <summary>
        ///  Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ConnectorType&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConnectorType>> GetConnectorTypesAsync()
        {
            ApiResponse<List<ConnectorType>> localVarResponse = await GetConnectorTypesAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all &#x60;ConnectorType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ConnectorType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ConnectorType>>> GetConnectorTypesAsyncWithHttpInfo()
        {

            var localVarPath = "/connectors/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectorTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConnectorType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConnectorType>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConnectorType>)));
        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Connector&gt;</returns>
        public List<Connector> GetConnectors(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Connector>> localVarResponse = GetConnectorsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Connector&gt;</returns>
        public ApiResponse<List<Connector>> GetConnectorsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Connector>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Connector>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Connector>)));
        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Connector&gt;</returns>
        public async System.Threading.Tasks.Task<List<Connector>> GetConnectorsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Connector>> localVarResponse = await GetConnectorsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Connector&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Connector>>> GetConnectorsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Connector>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Connector>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Connector>)));
        }

        /// <summary>
        ///  Gets the current user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User GetCurrentUser()
        {
            ApiResponse<User> localVarResponse = GetCurrentUserWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the current user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> GetCurrentUserWithHttpInfo()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Gets the current user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetCurrentUserAsync()
        {
            ApiResponse<User> localVarResponse = await GetCurrentUserAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the current user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieve information about previously added data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Data</returns>
        public Data GetData(string dataId)
        {
            ApiResponse<Data> localVarResponse = GetDataWithHttpInfo(dataId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve information about previously added data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of Data</returns>
        public ApiResponse<Data> GetDataWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->GetData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        ///  Retrieve information about previously added data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of Data</returns>
        public async System.Threading.Tasks.Task<Data> GetDataAsync(string dataId)
        {
            ApiResponse<Data> localVarResponse = await GetDataAsyncWithHttpInfo(dataId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve information about previously added data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse (Data)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Data>> GetDataAsyncWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->GetData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        ///  Retrieve the actual data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDataContent(string dataId)
        {
            ApiResponse<System.IO.Stream> localVarResponse = GetDataContentWithHttpInfo(dataId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the actual data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDataContentWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->GetDataContent");

            var localVarPath = "/data/{dataId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieve the actual data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDataContentAsync(string dataId)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await GetDataContentAsyncWithHttpInfo(dataId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve the actual data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDataContentAsyncWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->GetDataContent");

            var localVarPath = "/data/{dataId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieve a sample for the metadata used when generating documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDataMetadata(string templateName = null, string projectName = null, string creator = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = GetDataMetadataWithHttpInfo(templateName, projectName, creator);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a sample for the metadata used when generating documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDataMetadataWithHttpInfo(string templateName = null, string projectName = null, string creator = null)
        {

            var localVarPath = "/data/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "templateName", templateName)); // query parameter
            if (projectName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "projectName", projectName)); // query parameter
            if (creator != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "creator", creator)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieve a sample for the metadata used when generating documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDataMetadataAsync(string templateName = null, string projectName = null, string creator = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await GetDataMetadataAsyncWithHttpInfo(templateName, projectName, creator);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a sample for the metadata used when generating documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template to use (optional)</param>
        /// <param name="projectName">The name of the project to use (optional)</param>
        /// <param name="creator">The name of the creator to use (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDataMetadataAsyncWithHttpInfo(string templateName = null, string projectName = null, string creator = null)
        {

            var localVarPath = "/data/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "templateName", templateName)); // query parameter
            if (projectName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "projectName", projectName)); // query parameter
            if (creator != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "creator", creator)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieve the data as sent to the document preview
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDataPreview(string dataId)
        {
            ApiResponse<System.IO.Stream> localVarResponse = GetDataPreviewWithHttpInfo(dataId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the data as sent to the document preview
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDataPreviewWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->GetDataPreview");

            var localVarPath = "/data/{dataId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieve the data as sent to the document preview
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDataPreviewAsync(string dataId)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await GetDataPreviewAsyncWithHttpInfo(dataId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve the data as sent to the document preview
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data as returned by the dataset data endpoint</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDataPreviewAsyncWithHttpInfo(string dataId)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->GetDataPreview");

            var localVarPath = "/data/{dataId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieve a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>Dataset</returns>
        public Dataset GetDataset(string datasetId)
        {
            ApiResponse<Dataset> localVarResponse = GetDatasetWithHttpInfo(datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>ApiResponse of Dataset</returns>
        public ApiResponse<Dataset> GetDatasetWithHttpInfo(string datasetId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->GetDataset");

            var localVarPath = "/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dataset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dataset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dataset)));
        }

        /// <summary>
        ///  Retrieve a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> GetDatasetAsync(string datasetId)
        {
            ApiResponse<Dataset> localVarResponse = await GetDatasetAsyncWithHttpInfo(datasetId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single dataset object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dataset>> GetDatasetAsyncWithHttpInfo(string datasetId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->GetDataset");

            var localVarPath = "/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dataset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dataset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dataset)));
        }

        /// <summary>
        ///  Retrieve all datas that are linked to the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>List&lt;Data&gt;</returns>
        public List<Data> GetDatasetDatas(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Data>> localVarResponse = GetDatasetDatasWithHttpInfo(datasetId, page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all datas that are linked to the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>ApiResponse of List&lt;Data&gt;</returns>
        public ApiResponse<List<Data>> GetDatasetDatasWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->GetDatasetDatas");

            var localVarPath = "/datasets/{datasetId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasetDatas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Data>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Data>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Data>)));
        }

        /// <summary>
        ///  Retrieve all datas that are linked to the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>Task of List&lt;Data&gt;</returns>
        public async System.Threading.Tasks.Task<List<Data>> GetDatasetDatasAsync(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Data>> localVarResponse = await GetDatasetDatasAsyncWithHttpInfo(datasetId, page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all datas that are linked to the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (dataset cannot be specified) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Data&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Data>>> GetDatasetDatasAsyncWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->GetDatasetDatas");

            var localVarPath = "/datasets/{datasetId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasetDatas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Data>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Data>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Data>)));
        }

        /// <summary>
        ///  Retrieves entity references to the primary entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;IdWithName&gt;</returns>
        public List<IdWithName> GetDatasetEntityReferences(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<IdWithName>> localVarResponse = GetDatasetEntityReferencesWithHttpInfo(datasetId, page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves entity references to the primary entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;IdWithName&gt;</returns>
        public ApiResponse<List<IdWithName>> GetDatasetEntityReferencesWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->GetDatasetEntityReferences");

            var localVarPath = "/datasets/{datasetId}/entityrefs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasetEntityReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdWithName>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdWithName>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdWithName>)));
        }

        /// <summary>
        ///  Retrieves entity references to the primary entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;IdWithName&gt;</returns>
        public async System.Threading.Tasks.Task<List<IdWithName>> GetDatasetEntityReferencesAsync(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<IdWithName>> localVarResponse = await GetDatasetEntityReferencesAsyncWithHttpInfo(datasetId, page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves entity references to the primary entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IdWithName&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IdWithName>>> GetDatasetEntityReferencesAsyncWithHttpInfo(string datasetId, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->GetDatasetEntityReferences");

            var localVarPath = "/datasets/{datasetId}/entityrefs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasetEntityReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdWithName>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdWithName>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdWithName>)));
        }

        /// <summary>
        ///  Get a list of available entities in the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>List&lt;EntityDefinition&gt;</returns>
        public List<EntityDefinition> GetDatasetLayout(Dataset body = null, bool? primaryOnly = null)
        {
            ApiResponse<List<EntityDefinition>> localVarResponse = GetDatasetLayoutWithHttpInfo(body, primaryOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of available entities in the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;EntityDefinition&gt;</returns>
        public ApiResponse<List<EntityDefinition>> GetDatasetLayoutWithHttpInfo(Dataset body = null, bool? primaryOnly = null)
        {

            var localVarPath = "/datasets/layout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (primaryOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "primaryOnly", primaryOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasetLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityDefinition>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityDefinition>)));
        }

        /// <summary>
        ///  Get a list of available entities in the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>Task of List&lt;EntityDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityDefinition>> GetDatasetLayoutAsync(Dataset body = null, bool? primaryOnly = null)
        {
            ApiResponse<List<EntityDefinition>> localVarResponse = await GetDatasetLayoutAsyncWithHttpInfo(body, primaryOnly);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of available entities in the given dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="primaryOnly">Return only the entities that can be primary entities when set to true (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntityDefinition>>> GetDatasetLayoutAsyncWithHttpInfo(Dataset body = null, bool? primaryOnly = null)
        {

            var localVarPath = "/datasets/layout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (primaryOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "primaryOnly", primaryOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasetLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityDefinition>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityDefinition>)));
        }

        /// <summary>
        ///  Returns all datasets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        public List<Dataset> GetDatasets(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Dataset>> localVarResponse = GetDatasetsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all datasets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        public ApiResponse<List<Dataset>> GetDatasetsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/datasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dataset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dataset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dataset>)));
        }

        /// <summary>
        ///  Returns all datasets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dataset>> GetDatasetsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Dataset>> localVarResponse = await GetDatasetsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all datasets
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> GetDatasetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/datasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dataset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dataset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dataset>)));
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>Datasource</returns>
        public Datasource GetDatasource(string datasourceId)
        {
            ApiResponse<Datasource> localVarResponse = GetDatasourceWithHttpInfo(datasourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>ApiResponse of Datasource</returns>
        public ApiResponse<Datasource> GetDatasourceWithHttpInfo(string datasourceId)
        {
            // verify the required parameter 'datasourceId' is set
            if (datasourceId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceId' when calling DefaultApi->GetDatasource");

            var localVarPath = "/datasources/{datasourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceId != null) localVarPathParams.Add("datasourceId", Configuration.ApiClient.ParameterToString(datasourceId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Datasource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Datasource)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Datasource)));
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>Task of Datasource</returns>
        public async System.Threading.Tasks.Task<Datasource> GetDatasourceAsync(string datasourceId)
        {
            ApiResponse<Datasource> localVarResponse = await GetDatasourceAsyncWithHttpInfo(datasourceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Datasource>> GetDatasourceAsyncWithHttpInfo(string datasourceId)
        {
            // verify the required parameter 'datasourceId' is set
            if (datasourceId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceId' when calling DefaultApi->GetDatasource");

            var localVarPath = "/datasources/{datasourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceId != null) localVarPathParams.Add("datasourceId", Configuration.ApiClient.ParameterToString(datasourceId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Datasource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Datasource)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Datasource)));
        }

        /// <summary>
        ///  Returns all the fields and relations for the entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>EntityDefinition</returns>
        public EntityDefinition GetDatasourceEntityLayout(string datasourceId, string entityName)
        {
            ApiResponse<EntityDefinition> localVarResponse = GetDatasourceEntityLayoutWithHttpInfo(datasourceId, entityName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the fields and relations for the entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>ApiResponse of EntityDefinition</returns>
        public ApiResponse<EntityDefinition> GetDatasourceEntityLayoutWithHttpInfo(string datasourceId, string entityName)
        {
            // verify the required parameter 'datasourceId' is set
            if (datasourceId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceId' when calling DefaultApi->GetDatasourceEntityLayout");
            // verify the required parameter 'entityName' is set
            if (entityName == null)
                throw new ApiException(400, "Missing required parameter 'entityName' when calling DefaultApi->GetDatasourceEntityLayout");

            var localVarPath = "/datasources/{datasourceId}/layout/{entityName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceId != null) localVarPathParams.Add("datasourceId", Configuration.ApiClient.ParameterToString(datasourceId)); // path parameter
            if (entityName != null) localVarPathParams.Add("entityName", Configuration.ApiClient.ParameterToString(entityName)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceEntityLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityDefinition)));
        }

        /// <summary>
        ///  Returns all the fields and relations for the entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>Task of EntityDefinition</returns>
        public async System.Threading.Tasks.Task<EntityDefinition> GetDatasourceEntityLayoutAsync(string datasourceId, string entityName)
        {
            ApiResponse<EntityDefinition> localVarResponse = await GetDatasourceEntityLayoutAsyncWithHttpInfo(datasourceId, entityName);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all the fields and relations for the entity
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="entityName">The name of the entity</param>
        /// <returns>Task of ApiResponse (EntityDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityDefinition>> GetDatasourceEntityLayoutAsyncWithHttpInfo(string datasourceId, string entityName)
        {
            // verify the required parameter 'datasourceId' is set
            if (datasourceId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceId' when calling DefaultApi->GetDatasourceEntityLayout");
            // verify the required parameter 'entityName' is set
            if (entityName == null)
                throw new ApiException(400, "Missing required parameter 'entityName' when calling DefaultApi->GetDatasourceEntityLayout");

            var localVarPath = "/datasources/{datasourceId}/layout/{entityName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceId != null) localVarPathParams.Add("datasourceId", Configuration.ApiClient.ParameterToString(datasourceId)); // path parameter
            if (entityName != null) localVarPathParams.Add("entityName", Configuration.ApiClient.ParameterToString(entityName)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceEntityLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityDefinition)));
        }

        /// <summary>
        ///  Returns all the fields and relations that are available in the datasource
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>DatasourceLayout</returns>
        public DatasourceLayout GetDatasourceLayout(string datasourceId, bool? full = null)
        {
            ApiResponse<DatasourceLayout> localVarResponse = GetDatasourceLayoutWithHttpInfo(datasourceId, full);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the fields and relations that are available in the datasource
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>ApiResponse of DatasourceLayout</returns>
        public ApiResponse<DatasourceLayout> GetDatasourceLayoutWithHttpInfo(string datasourceId, bool? full = null)
        {
            // verify the required parameter 'datasourceId' is set
            if (datasourceId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceId' when calling DefaultApi->GetDatasourceLayout");

            var localVarPath = "/datasources/{datasourceId}/layout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceId != null) localVarPathParams.Add("datasourceId", Configuration.ApiClient.ParameterToString(datasourceId)); // path parameter
            if (full != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DatasourceLayout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DatasourceLayout)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DatasourceLayout)));
        }

        /// <summary>
        ///  Returns all the fields and relations that are available in the datasource
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>Task of DatasourceLayout</returns>
        public async System.Threading.Tasks.Task<DatasourceLayout> GetDatasourceLayoutAsync(string datasourceId, bool? full = null)
        {
            ApiResponse<DatasourceLayout> localVarResponse = await GetDatasourceLayoutAsyncWithHttpInfo(datasourceId, full);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all the fields and relations that are available in the datasource
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceId">The id of the datasource</param>
        /// <param name="full">True to return the entire layout at once, false to return only the entity information. Defaults to datasource default. (optional)</param>
        /// <returns>Task of ApiResponse (DatasourceLayout)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DatasourceLayout>> GetDatasourceLayoutAsyncWithHttpInfo(string datasourceId, bool? full = null)
        {
            // verify the required parameter 'datasourceId' is set
            if (datasourceId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceId' when calling DefaultApi->GetDatasourceLayout");

            var localVarPath = "/datasources/{datasourceId}/layout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceId != null) localVarPathParams.Add("datasourceId", Configuration.ApiClient.ParameterToString(datasourceId)); // path parameter
            if (full != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DatasourceLayout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DatasourceLayout)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DatasourceLayout)));
        }

        /// <summary>
        ///  Retrieve a single datasourcetype object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>DatasourceType</returns>
        public DatasourceType GetDatasourceType(string datasourceTypeId)
        {
            ApiResponse<DatasourceType> localVarResponse = GetDatasourceTypeWithHttpInfo(datasourceTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single datasourcetype object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>ApiResponse of DatasourceType</returns>
        public ApiResponse<DatasourceType> GetDatasourceTypeWithHttpInfo(string datasourceTypeId)
        {
            // verify the required parameter 'datasourceTypeId' is set
            if (datasourceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceTypeId' when calling DefaultApi->GetDatasourceType");

            var localVarPath = "/datasources/types/{datasourceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceTypeId != null) localVarPathParams.Add("datasourceTypeId", Configuration.ApiClient.ParameterToString(datasourceTypeId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DatasourceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DatasourceType)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DatasourceType)));
        }

        /// <summary>
        ///  Retrieve a single datasourcetype object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>Task of DatasourceType</returns>
        public async System.Threading.Tasks.Task<DatasourceType> GetDatasourceTypeAsync(string datasourceTypeId)
        {
            ApiResponse<DatasourceType> localVarResponse = await GetDatasourceTypeAsyncWithHttpInfo(datasourceTypeId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single datasourcetype object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceTypeId">The id of the datasource type</param>
        /// <returns>Task of ApiResponse (DatasourceType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DatasourceType>> GetDatasourceTypeAsyncWithHttpInfo(string datasourceTypeId)
        {
            // verify the required parameter 'datasourceTypeId' is set
            if (datasourceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'datasourceTypeId' when calling DefaultApi->GetDatasourceType");

            var localVarPath = "/datasources/types/{datasourceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasourceTypeId != null) localVarPathParams.Add("datasourceTypeId", Configuration.ApiClient.ParameterToString(datasourceTypeId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DatasourceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DatasourceType)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DatasourceType)));
        }

        /// <summary>
        ///  Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DatasourceType&gt;</returns>
        public List<DatasourceType> GetDatasourceTypes()
        {
            ApiResponse<List<DatasourceType>> localVarResponse = GetDatasourceTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DatasourceType&gt;</returns>
        public ApiResponse<List<DatasourceType>> GetDatasourceTypesWithHttpInfo()
        {

            var localVarPath = "/datasources/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatasourceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatasourceType>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatasourceType>)));
        }

        /// <summary>
        ///  Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DatasourceType&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatasourceType>> GetDatasourceTypesAsync()
        {
            ApiResponse<List<DatasourceType>> localVarResponse = await GetDatasourceTypesAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all &#x60;DatasourceType&#x60; objects for this project.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DatasourceType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatasourceType>>> GetDatasourceTypesAsyncWithHttpInfo()
        {

            var localVarPath = "/datasources/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasourceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatasourceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatasourceType>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatasourceType>)));
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Datasource&gt;</returns>
        public List<Datasource> GetDatasources(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Datasource>> localVarResponse = GetDatasourcesWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Datasource&gt;</returns>
        public ApiResponse<List<Datasource>> GetDatasourcesWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/datasources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Datasource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Datasource>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Datasource>)));
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Datasource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Datasource>> GetDatasourcesAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Datasource>> localVarResponse = await GetDatasourcesAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Datasource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Datasource>>> GetDatasourcesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/datasources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDatasources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Datasource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Datasource>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Datasource>)));
        }

        /// <summary>
        ///  Get the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Language</returns>
        public Language GetDefaultLanguage()
        {
            ApiResponse<Language> localVarResponse = GetDefaultLanguageWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Language</returns>
        public ApiResponse<Language> GetDefaultLanguageWithHttpInfo()
        {

            var localVarPath = "/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Get the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Language</returns>
        public async System.Threading.Tasks.Task<Language> GetDefaultLanguageAsync()
        {
            ApiResponse<Language> localVarResponse = await GetDefaultLanguageAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Language)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Language>> GetDefaultLanguageAsyncWithHttpInfo()
        {

            var localVarPath = "/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Get the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Printer</returns>
        public Printer GetDefaultPrinter()
        {
            ApiResponse<Printer> localVarResponse = GetDefaultPrinterWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Printer</returns>
        public ApiResponse<Printer> GetDefaultPrinterWithHttpInfo()
        {

            var localVarPath = "/printers/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Get the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Printer</returns>
        public async System.Threading.Tasks.Task<Printer> GetDefaultPrinterAsync()
        {
            ApiResponse<Printer> localVarResponse = await GetDefaultPrinterAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Printer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Printer>> GetDefaultPrinterAsyncWithHttpInfo()
        {

            var localVarPath = "/printers/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Get the dependencies of the object with the given id
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>DependencyTree</returns>
        public DependencyTree GetDependencies(string objectType, string objectId, string direction = null, string depth = null)
        {
            ApiResponse<DependencyTree> localVarResponse = GetDependenciesWithHttpInfo(objectType, objectId, direction, depth);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the dependencies of the object with the given id
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>ApiResponse of DependencyTree</returns>
        public ApiResponse<DependencyTree> GetDependenciesWithHttpInfo(string objectType, string objectId, string direction = null, string depth = null)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling DefaultApi->GetDependencies");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling DefaultApi->GetDependencies");

            var localVarPath = "/dependencies/{objectType}/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectType != null) localVarPathParams.Add("objectType", Configuration.ApiClient.ParameterToString(objectType)); // path parameter
            if (objectId != null) localVarPathParams.Add("objectId", Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDependencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DependencyTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DependencyTree)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DependencyTree)));
        }

        /// <summary>
        ///  Get the dependencies of the object with the given id
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>Task of DependencyTree</returns>
        public async System.Threading.Tasks.Task<DependencyTree> GetDependenciesAsync(string objectType, string objectId, string direction = null, string depth = null)
        {
            ApiResponse<DependencyTree> localVarResponse = await GetDependenciesAsyncWithHttpInfo(objectType, objectId, direction, depth);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the dependencies of the object with the given id
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">The type of the object to get the dependencies of (definitions/objectType)</param>
        /// <param name="objectId">The id of the object to get the dependencies of</param>
        /// <param name="direction">Whether the inbound or outbound relations or both are requested (optional, default to inbound)</param>
        /// <param name="depth">Whether only the direct relations or all the transitive relations are requested (optional, default to direct)</param>
        /// <returns>Task of ApiResponse (DependencyTree)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DependencyTree>> GetDependenciesAsyncWithHttpInfo(string objectType, string objectId, string direction = null, string depth = null)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling DefaultApi->GetDependencies");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling DefaultApi->GetDependencies");

            var localVarPath = "/dependencies/{objectType}/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectType != null) localVarPathParams.Add("objectType", Configuration.ApiClient.ParameterToString(objectType)); // path parameter
            if (objectId != null) localVarPathParams.Add("objectId", Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDependencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DependencyTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DependencyTree)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DependencyTree)));
        }

        /// <summary>
        ///  Retrieve a single document object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Document</returns>
        public Document GetDocument(string documentId)
        {
            ApiResponse<Document> localVarResponse = GetDocumentWithHttpInfo(documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single document object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>ApiResponse of Document</returns>
        public ApiResponse<Document> GetDocumentWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DefaultApi->GetDocument");

            var localVarPath = "/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        ///  Retrieve a single document object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> GetDocumentAsync(string documentId)
        {
            ApiResponse<Document> localVarResponse = await GetDocumentAsyncWithHttpInfo(documentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single document object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Document>> GetDocumentAsyncWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DefaultApi->GetDocument");

            var localVarPath = "/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        ///  Return the content of the document
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns></returns>
        public byte[] GetDocumentContent(string documentId)
        {
            Object obj = GetDocumentContentWithHttpInfo(documentId);
            if (obj == null)
                return null;
            BinaryFormatter bf = new BinaryFormatter();
            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
            {
                bf.Serialize(ms, obj);
                return ms.ToArray();
            }
        }

        /// <summary>
        ///  Return the content of the document
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetDocumentContentWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DefaultApi->GetDocumentContent");

            var localVarPath = "/documents/{documentId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Return the content of the document
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDocumentContentAsync(string documentId)
        {
            await GetDocumentContentAsyncWithHttpInfo(documentId);

        }

        /// <summary>
        ///  Return the content of the document
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">The id of the document</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDocumentContentAsyncWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DefaultApi->GetDocumentContent");

            var localVarPath = "/documents/{documentId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Returns all documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> GetDocuments(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Document>> localVarResponse = GetDocumentsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ApiResponse<List<Document>> GetDocumentsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Document>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        ///  Returns all documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> GetDocumentsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Document>> localVarResponse = await GetDocumentsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Document>>> GetDocumentsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Document>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        ///  List all the supported template expression functions
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;ExpressionFunction&gt;</returns>
        public List<ExpressionFunction> GetExpressionFunctions(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<ExpressionFunction>> localVarResponse = GetExpressionFunctionsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all the supported template expression functions
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;ExpressionFunction&gt;</returns>
        public ApiResponse<List<ExpressionFunction>> GetExpressionFunctionsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/system/expression/functions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExpressionFunctions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExpressionFunction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ExpressionFunction>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExpressionFunction>)));
        }

        /// <summary>
        ///  List all the supported template expression functions
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;ExpressionFunction&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExpressionFunction>> GetExpressionFunctionsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<ExpressionFunction>> localVarResponse = await GetExpressionFunctionsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  List all the supported template expression functions
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExpressionFunction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExpressionFunction>>> GetExpressionFunctionsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/system/expression/functions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExpressionFunctions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExpressionFunction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ExpressionFunction>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExpressionFunction>)));
        }

        /// <summary>
        ///  Retrieves users exposed by the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetExternalUsers(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<User>> localVarResponse = GetExternalUsersWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves users exposed by the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> GetExternalUsersWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/users/external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Retrieves users exposed by the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetExternalUsersAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<User>> localVarResponse = await GetExternalUsersAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves users exposed by the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> GetExternalUsersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/users/external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Returns all assets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Asset&gt;</returns>
        public List<Asset> GetFilteredAssets(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Asset>> localVarResponse = GetFilteredAssetsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all assets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Asset&gt;</returns>
        public ApiResponse<List<Asset>> GetFilteredAssetsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/assets/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Asset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asset>)));
        }

        /// <summary>
        ///  Returns all assets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Asset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Asset>> GetFilteredAssetsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Asset>> localVarResponse = await GetFilteredAssetsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all assets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Asset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Asset>>> GetFilteredAssetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/assets/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Asset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asset>)));
        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Connector&gt;</returns>
        public List<Connector> GetFilteredConnectors(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Connector>> localVarResponse = GetFilteredConnectorsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Connector&gt;</returns>
        public ApiResponse<List<Connector>> GetFilteredConnectorsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/connectors/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Connector>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Connector>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Connector>)));
        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Connector&gt;</returns>
        public async System.Threading.Tasks.Task<List<Connector>> GetFilteredConnectorsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Connector>> localVarResponse = await GetFilteredConnectorsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Connector&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Connector>>> GetFilteredConnectorsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/connectors/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Connector>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Connector>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Connector>)));
        }

        /// <summary>
        ///  Returns all datasets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Dataset&gt;</returns>
        public List<Dataset> GetFilteredDatasets(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Dataset>> localVarResponse = GetFilteredDatasetsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all datasets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        public ApiResponse<List<Dataset>> GetFilteredDatasetsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/datasets/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredDatasets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dataset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dataset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dataset>)));
        }

        /// <summary>
        ///  Returns all datasets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dataset>> GetFilteredDatasetsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Dataset>> localVarResponse = await GetFilteredDatasetsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all datasets using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> GetFilteredDatasetsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/datasets/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredDatasets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dataset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dataset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dataset>)));
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Datasource&gt;</returns>
        public List<Datasource> GetFilteredDatasources(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Datasource>> localVarResponse = GetFilteredDatasourcesWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Datasource&gt;</returns>
        public ApiResponse<List<Datasource>> GetFilteredDatasourcesWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/datasources/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredDatasources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Datasource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Datasource>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Datasource>)));
        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Datasource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Datasource>> GetFilteredDatasourcesAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Datasource>> localVarResponse = await GetFilteredDatasourcesAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Datasource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Datasource>>> GetFilteredDatasourcesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/datasources/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredDatasources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Datasource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Datasource>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Datasource>)));
        }

        /// <summary>
        ///  Returns all documents using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> GetFilteredDocuments(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Document>> localVarResponse = GetFilteredDocumentsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all documents using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ApiResponse<List<Document>> GetFilteredDocumentsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/documents/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Document>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        ///  Returns all documents using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> GetFilteredDocumentsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Document>> localVarResponse = await GetFilteredDocumentsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all documents using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Document>>> GetFilteredDocumentsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/documents/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Document>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        ///  Returns all executions for all flows, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;FlowExecution&gt;</returns>
        public List<FlowExecution> GetFilteredFlowExecutions(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<FlowExecution>> localVarResponse = GetFilteredFlowExecutionsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all executions for all flows, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowExecution&gt;</returns>
        public ApiResponse<List<FlowExecution>> GetFilteredFlowExecutionsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/flows/executions/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredFlowExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowExecution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowExecution>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowExecution>)));
        }

        /// <summary>
        ///  Returns all executions for all flows, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;FlowExecution&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlowExecution>> GetFilteredFlowExecutionsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<FlowExecution>> localVarResponse = await GetFilteredFlowExecutionsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all executions for all flows, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FlowExecution&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FlowExecution>>> GetFilteredFlowExecutionsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/flows/executions/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredFlowExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowExecution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowExecution>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowExecution>)));
        }

        /// <summary>
        ///  Lists all printers using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Printer&gt;</returns>
        public List<Printer> GetFilteredPrinters(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Printer>> localVarResponse = GetFilteredPrintersWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all printers using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Printer&gt;</returns>
        public ApiResponse<List<Printer>> GetFilteredPrintersWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/printers/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredPrinters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Printer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Printer>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Printer>)));
        }

        /// <summary>
        ///  Lists all printers using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Printer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Printer>> GetFilteredPrintersAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Printer>> localVarResponse = await GetFilteredPrintersAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all printers using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Printer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Printer>>> GetFilteredPrintersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/printers/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredPrinters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Printer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Printer>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Printer>)));
        }

        /// <summary>
        ///  Returns all tag groups using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;TagGroup&gt;</returns>
        public List<TagGroup> GetFilteredTagGroups(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<TagGroup>> localVarResponse = GetFilteredTagGroupsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all tag groups using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;TagGroup&gt;</returns>
        public ApiResponse<List<TagGroup>> GetFilteredTagGroupsWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/taggroups/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredTagGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TagGroup>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroup>)));
        }

        /// <summary>
        ///  Returns all tag groups using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;TagGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TagGroup>> GetFilteredTagGroupsAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<TagGroup>> localVarResponse = await GetFilteredTagGroupsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all tag groups using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TagGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TagGroup>>> GetFilteredTagGroupsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/taggroups/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredTagGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TagGroup>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroup>)));
        }

        /// <summary>
        ///  Returns all templates using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> GetFilteredTemplates(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Template>> localVarResponse = GetFilteredTemplatesWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all templates using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse<List<Template>> GetFilteredTemplatesWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/templates/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        ///  Returns all templates using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> GetFilteredTemplatesAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<Template>> localVarResponse = await GetFilteredTemplatesAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all templates using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetFilteredTemplatesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/templates/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        ///  Lists all users using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetFilteredUsers(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<User>> localVarResponse = GetFilteredUsersWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all users using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> GetFilteredUsersWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/users/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Lists all users using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetFilteredUsersAsync(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {
            ApiResponse<List<User>> localVarResponse = await GetFilteredUsersAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all users using a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> GetFilteredUsersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/users/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilteredUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Get a single flow from the server
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>Flow</returns>
        public Flow GetFlow(string flow)
        {
            ApiResponse<Flow> localVarResponse = GetFlowWithHttpInfo(flow);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a single flow from the server
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>ApiResponse of Flow</returns>
        public ApiResponse<Flow> GetFlowWithHttpInfo(string flow)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlow");

            var localVarPath = "/flows/{flow}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Flow)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flow)));
        }

        /// <summary>
        ///  Get a single flow from the server
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>Task of Flow</returns>
        public async System.Threading.Tasks.Task<Flow> GetFlowAsync(string flow)
        {
            ApiResponse<Flow> localVarResponse = await GetFlowAsyncWithHttpInfo(flow);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a single flow from the server
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow</param>
        /// <returns>Task of ApiResponse (Flow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flow>> GetFlowAsyncWithHttpInfo(string flow)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlow");

            var localVarPath = "/flows/{flow}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Flow)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flow)));
        }

        /// <summary>
        ///  Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>FlowContract</returns>
        public FlowContract GetFlowContract(string flow, Object body = null)
        {
            ApiResponse<FlowContract> localVarResponse = GetFlowContractWithHttpInfo(flow, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>ApiResponse of FlowContract</returns>
        public ApiResponse<FlowContract> GetFlowContractWithHttpInfo(string flow, Object body = null)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlowContract");

            var localVarPath = "/flows/{flow}/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowContract)));
        }

        /// <summary>
        ///  Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>Task of FlowContract</returns>
        public async System.Threading.Tasks.Task<FlowContract> GetFlowContractAsync(string flow, Object body = null)
        {
            ApiResponse<FlowContract> localVarResponse = await GetFlowContractAsyncWithHttpInfo(flow, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The path property of the flow step</param>
        /// <param name="body">The possible fields and their possible values, matching the input schema (optional)</param>
        /// <returns>Task of ApiResponse (FlowContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowContract>> GetFlowContractAsyncWithHttpInfo(string flow, Object body = null)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlowContract");

            var localVarPath = "/flows/{flow}/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowContract)));
        }

        /// <summary>
        ///  Get the state of a single execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>FlowExecution</returns>
        public FlowExecution GetFlowExecution(string execution)
        {
            ApiResponse<FlowExecution> localVarResponse = GetFlowExecutionWithHttpInfo(execution);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the state of a single execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>ApiResponse of FlowExecution</returns>
        public ApiResponse<FlowExecution> GetFlowExecutionWithHttpInfo(string execution)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->GetFlowExecution");

            var localVarPath = "/flows/executions/{execution}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecution)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecution)));
        }

        /// <summary>
        ///  Get the state of a single execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of FlowExecution</returns>
        public async System.Threading.Tasks.Task<FlowExecution> GetFlowExecutionAsync(string execution)
        {
            ApiResponse<FlowExecution> localVarResponse = await GetFlowExecutionAsyncWithHttpInfo(execution);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the state of a single execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <returns>Task of ApiResponse (FlowExecution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowExecution>> GetFlowExecutionAsyncWithHttpInfo(string execution)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->GetFlowExecution");

            var localVarPath = "/flows/executions/{execution}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecution)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecution)));
        }

        /// <summary>
        ///  Find out the progress of an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>FlowExecutionProgress</returns>
        public FlowExecutionProgress GetFlowExecutionProgress(string execution, int? timeout = null)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = GetFlowExecutionProgressWithHttpInfo(execution, timeout);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find out the progress of an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>ApiResponse of FlowExecutionProgress</returns>
        public ApiResponse<FlowExecutionProgress> GetFlowExecutionProgressWithHttpInfo(string execution, int? timeout = null)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->GetFlowExecutionProgress");

            var localVarPath = "/flows/executions/{execution}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter
            if (timeout != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeout", timeout)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecutionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Find out the progress of an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>Task of FlowExecutionProgress</returns>
        public async System.Threading.Tasks.Task<FlowExecutionProgress> GetFlowExecutionProgressAsync(string execution, int? timeout = null)
        {
            ApiResponse<FlowExecutionProgress> localVarResponse = await GetFlowExecutionProgressAsyncWithHttpInfo(execution, timeout);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Find out the progress of an existing execution
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="execution">The id of the flow execution</param>
        /// <param name="timeout">The timeout in seconds, defaults to 30 (optional)</param>
        /// <returns>Task of ApiResponse (FlowExecutionProgress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowExecutionProgress>> GetFlowExecutionProgressAsyncWithHttpInfo(string execution, int? timeout = null)
        {
            // verify the required parameter 'execution' is set
            if (execution == null)
                throw new ApiException(400, "Missing required parameter 'execution' when calling DefaultApi->GetFlowExecutionProgress");

            var localVarPath = "/flows/executions/{execution}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (execution != null) localVarPathParams.Add("execution", Configuration.ApiClient.ParameterToString(execution)); // path parameter
            if (timeout != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeout", timeout)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecutionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowExecutionProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowExecutionProgress)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowExecutionProgress)));
        }

        /// <summary>
        ///  Returns statistics for flow executions, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Statistics</returns>
        public Statistics GetFlowExecutionStatistics(string groupTimeBy = null, FilterGroupNode filter = null)
        {
            ApiResponse<Statistics> localVarResponse = GetFlowExecutionStatisticsWithHttpInfo(groupTimeBy, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns statistics for flow executions, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of Statistics</returns>
        public ApiResponse<Statistics> GetFlowExecutionStatisticsWithHttpInfo(string groupTimeBy = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/flows/executions/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupTimeBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "groupTimeBy", groupTimeBy)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecutionStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Statistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Statistics)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Statistics)));
        }

        /// <summary>
        ///  Returns statistics for flow executions, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of Statistics</returns>
        public async System.Threading.Tasks.Task<Statistics> GetFlowExecutionStatisticsAsync(string groupTimeBy = null, FilterGroupNode filter = null)
        {
            ApiResponse<Statistics> localVarResponse = await GetFlowExecutionStatisticsAsyncWithHttpInfo(groupTimeBy, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns statistics for flow executions, by a complex filter
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupTimeBy">the timespan to groupBy for the perTime part (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (Statistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Statistics>> GetFlowExecutionStatisticsAsyncWithHttpInfo(string groupTimeBy = null, FilterGroupNode filter = null)
        {

            var localVarPath = "/flows/executions/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupTimeBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "groupTimeBy", groupTimeBy)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecutionStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Statistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Statistics)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Statistics)));
        }

        /// <summary>
        ///  Returns all executions for this flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;FlowExecution&gt;</returns>
        public List<FlowExecution> GetFlowExecutions(string flow, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<FlowExecution>> localVarResponse = GetFlowExecutionsWithHttpInfo(flow, page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all executions for this flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowExecution&gt;</returns>
        public ApiResponse<List<FlowExecution>> GetFlowExecutionsWithHttpInfo(string flow, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlowExecutions");

            var localVarPath = "/flows/{flow}/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowExecution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowExecution>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowExecution>)));
        }

        /// <summary>
        ///  Returns all executions for this flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;FlowExecution&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlowExecution>> GetFlowExecutionsAsync(string flow, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<FlowExecution>> localVarResponse = await GetFlowExecutionsAsyncWithHttpInfo(flow, page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all executions for this flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FlowExecution&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FlowExecution>>> GetFlowExecutionsAsyncWithHttpInfo(string flow, int? page = null, int? size = null, string sort = null, string filter = null)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlowExecutions");

            var localVarPath = "/flows/{flow}/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowExecution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowExecution>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowExecution>)));
        }

        /// <summary>
        ///  Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Object</returns>
        public Object GetFlowSettings(string step, string property, Object body = null)
        {
            ApiResponse<Object> localVarResponse = GetFlowSettingsWithHttpInfo(step, property, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetFlowSettingsWithHttpInfo(string step, string property, Object body = null)
        {
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling DefaultApi->GetFlowSettings");
            // verify the required parameter 'property' is set
            if (property == null)
                throw new ApiException(400, "Missing required parameter 'property' when calling DefaultApi->GetFlowSettings");

            var localVarPath = "/flows/steps/{step}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (step != null) localVarPathParams.Add("step", Configuration.ApiClient.ParameterToString(step)); // path parameter
            if (property != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property", property)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetFlowSettingsAsync(string step, string property, Object body = null)
        {
            ApiResponse<Object> localVarResponse = await GetFlowSettingsAsyncWithHttpInfo(step, property, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the flow step</param>
        /// <param name="property">The property to get the schemaform for</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFlowSettingsAsyncWithHttpInfo(string step, string property, Object body = null)
        {
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling DefaultApi->GetFlowSettings");
            // verify the required parameter 'property' is set
            if (property == null)
                throw new ApiException(400, "Missing required parameter 'property' when calling DefaultApi->GetFlowSettings");

            var localVarPath = "/flows/steps/{step}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (step != null) localVarPathParams.Add("step", Configuration.ApiClient.ParameterToString(step)); // path parameter
            if (property != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property", property)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get definition of a specific flow step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>FlowStep</returns>
        public FlowStep GetFlowStep(string step)
        {
            ApiResponse<FlowStep> localVarResponse = GetFlowStepWithHttpInfo(step);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get definition of a specific flow step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>ApiResponse of FlowStep</returns>
        public ApiResponse<FlowStep> GetFlowStepWithHttpInfo(string step)
        {
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling DefaultApi->GetFlowStep");

            var localVarPath = "/flows/steps/{step}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (step != null) localVarPathParams.Add("step", Configuration.ApiClient.ParameterToString(step)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowStep>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowStep)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowStep)));
        }

        /// <summary>
        ///  Get definition of a specific flow step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>Task of FlowStep</returns>
        public async System.Threading.Tasks.Task<FlowStep> GetFlowStepAsync(string step)
        {
            ApiResponse<FlowStep> localVarResponse = await GetFlowStepAsyncWithHttpInfo(step);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get definition of a specific flow step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="step">The path property of the step</param>
        /// <returns>Task of ApiResponse (FlowStep)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowStep>> GetFlowStepAsyncWithHttpInfo(string step)
        {
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling DefaultApi->GetFlowStep");

            var localVarPath = "/flows/steps/{step}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (step != null) localVarPathParams.Add("step", Configuration.ApiClient.ParameterToString(step)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowStep>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowStep)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowStep)));
        }

        /// <summary>
        ///  Lists all the possible flow steps
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FlowStep&gt;</returns>
        public List<FlowStep> GetFlowSteps()
        {
            ApiResponse<List<FlowStep>> localVarResponse = GetFlowStepsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the possible flow steps
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FlowStep&gt;</returns>
        public ApiResponse<List<FlowStep>> GetFlowStepsWithHttpInfo()
        {

            var localVarPath = "/flows/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowStep>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowStep>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowStep>)));
        }

        /// <summary>
        ///  Lists all the possible flow steps
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FlowStep&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlowStep>> GetFlowStepsAsync()
        {
            ApiResponse<List<FlowStep>> localVarResponse = await GetFlowStepsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the possible flow steps
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FlowStep&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FlowStep>>> GetFlowStepsAsyncWithHttpInfo()
        {

            var localVarPath = "/flows/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlowStep>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FlowStep>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlowStep>)));
        }

        /// <summary>
        ///  Returns a thumbnail image of the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetFlowThumbnail(string flow)
        {
            ApiResponse<System.IO.Stream> localVarResponse = GetFlowThumbnailWithHttpInfo(flow);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thumbnail image of the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetFlowThumbnailWithHttpInfo(string flow)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlowThumbnail");

            var localVarPath = "/flows/{flow}/thumbnail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Returns a thumbnail image of the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetFlowThumbnailAsync(string flow)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await GetFlowThumbnailAsyncWithHttpInfo(flow);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a thumbnail image of the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFlowThumbnailAsyncWithHttpInfo(string flow)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->GetFlowThumbnail");

            var localVarPath = "/flows/{flow}/thumbnail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlowThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Lists all the flows defined on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Flow&gt;</returns>
        public List<Flow> GetFlows(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Flow>> localVarResponse = GetFlowsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the flows defined on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Flow&gt;</returns>
        public ApiResponse<List<Flow>> GetFlowsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Flow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Flow>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Flow>)));
        }

        /// <summary>
        ///  Lists all the flows defined on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Flow&gt;</returns>
        public async System.Threading.Tasks.Task<List<Flow>> GetFlowsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Flow>> localVarResponse = await GetFlowsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the flows defined on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Flow&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Flow>>> GetFlowsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Flow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Flow>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Flow>)));
        }

        /// <summary>
        ///  Format a number, date, time or dateTime using the given pattern
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>FormattedValue</returns>
        public FormattedValue GetFormattedValue(string value, string pattern, string type, string locale = null)
        {
            ApiResponse<FormattedValue> localVarResponse = GetFormattedValueWithHttpInfo(value, pattern, type, locale);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Format a number, date, time or dateTime using the given pattern
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>ApiResponse of FormattedValue</returns>
        public ApiResponse<FormattedValue> GetFormattedValueWithHttpInfo(string value, string pattern, string type, string locale = null)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DefaultApi->GetFormattedValue");
            // verify the required parameter 'pattern' is set
            if (pattern == null)
                throw new ApiException(400, "Missing required parameter 'pattern' when calling DefaultApi->GetFormattedValue");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetFormattedValue");

            var localVarPath = "/system/format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (pattern != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pattern", pattern)); // query parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormattedValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormattedValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FormattedValue)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormattedValue)));
        }

        /// <summary>
        ///  Format a number, date, time or dateTime using the given pattern
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>Task of FormattedValue</returns>
        public async System.Threading.Tasks.Task<FormattedValue> GetFormattedValueAsync(string value, string pattern, string type, string locale = null)
        {
            ApiResponse<FormattedValue> localVarResponse = await GetFormattedValueAsyncWithHttpInfo(value, pattern, type, locale);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Format a number, date, time or dateTime using the given pattern
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">The value to format</param>
        /// <param name="pattern">The pattern to format the value with</param>
        /// <param name="type">The type of the value</param>
        /// <param name="locale">The locale to use for the formatting (optional)</param>
        /// <returns>Task of ApiResponse (FormattedValue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormattedValue>> GetFormattedValueAsyncWithHttpInfo(string value, string pattern, string type, string locale = null)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DefaultApi->GetFormattedValue");
            // verify the required parameter 'pattern' is set
            if (pattern == null)
                throw new ApiException(400, "Missing required parameter 'pattern' when calling DefaultApi->GetFormattedValue");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetFormattedValue");

            var localVarPath = "/system/format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (pattern != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pattern", pattern)); // query parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormattedValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormattedValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FormattedValue)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormattedValue)));
        }

        /// <summary>
        ///  Get a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>Language</returns>
        public Language GetLanguage(string language)
        {
            ApiResponse<Language> localVarResponse = GetLanguageWithHttpInfo(language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>ApiResponse of Language</returns>
        public ApiResponse<Language> GetLanguageWithHttpInfo(string language)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling DefaultApi->GetLanguage");

            var localVarPath = "/languages/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Get a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>Task of Language</returns>
        public async System.Threading.Tasks.Task<Language> GetLanguageAsync(string language)
        {
            ApiResponse<Language> localVarResponse = await GetLanguageAsyncWithHttpInfo(language);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Language>> GetLanguageAsyncWithHttpInfo(string language)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling DefaultApi->GetLanguage");

            var localVarPath = "/languages/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Lists all the supported languages
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Language&gt;</returns>
        public List<Language> GetLanguages()
        {
            ApiResponse<List<Language>> localVarResponse = GetLanguagesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the supported languages
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Language&gt;</returns>
        public ApiResponse<List<Language>> GetLanguagesWithHttpInfo()
        {

            var localVarPath = "/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Language>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Language>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Language>)));
        }

        /// <summary>
        ///  Lists all the supported languages
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Language&gt;</returns>
        public async System.Threading.Tasks.Task<List<Language>> GetLanguagesAsync()
        {
            ApiResponse<List<Language>> localVarResponse = await GetLanguagesAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the supported languages
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Language&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Language>>> GetLanguagesAsyncWithHttpInfo()
        {

            var localVarPath = "/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Language>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Language>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Language>)));
        }

        /// <summary>
        ///  Return the currently installed license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LicenseInformation</returns>
        public LicenseInformation GetLicense()
        {
            ApiResponse<LicenseInformation> localVarResponse = GetLicenseWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the currently installed license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LicenseInformation</returns>
        public ApiResponse<LicenseInformation> GetLicenseWithHttpInfo()
        {

            var localVarPath = "/system/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseInformation)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseInformation)));
        }

        /// <summary>
        ///  Return the currently installed license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LicenseInformation</returns>
        public async System.Threading.Tasks.Task<LicenseInformation> GetLicenseAsync()
        {
            ApiResponse<LicenseInformation> localVarResponse = await GetLicenseAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the currently installed license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LicenseInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicenseInformation>> GetLicenseAsyncWithHttpInfo()
        {

            var localVarPath = "/system/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseInformation)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseInformation)));
        }

        /// <summary>
        ///  Returns all datasets defined by plugins
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Dataset&gt;</returns>
        public List<Dataset> GetPluginDatasets()
        {
            ApiResponse<List<Dataset>> localVarResponse = GetPluginDatasetsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all datasets defined by plugins
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Dataset&gt;</returns>
        public ApiResponse<List<Dataset>> GetPluginDatasetsWithHttpInfo()
        {

            var localVarPath = "/datasets/plugin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginDatasets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dataset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dataset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dataset>)));
        }

        /// <summary>
        ///  Returns all datasets defined by plugins
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Dataset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dataset>> GetPluginDatasetsAsync()
        {
            ApiResponse<List<Dataset>> localVarResponse = await GetPluginDatasetsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all datasets defined by plugins
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Dataset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dataset>>> GetPluginDatasetsAsyncWithHttpInfo()
        {

            var localVarPath = "/datasets/plugin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginDatasets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dataset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dataset>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dataset>)));
        }

        /// <summary>
        ///  Gets all Plugins registered in this project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Plugin&gt;</returns>
        public List<Plugin> GetPlugins()
        {
            ApiResponse<List<Plugin>> localVarResponse = GetPluginsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all Plugins registered in this project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Plugin&gt;</returns>
        public ApiResponse<List<Plugin>> GetPluginsWithHttpInfo()
        {

            var localVarPath = "/plugins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlugins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Plugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Plugin>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Plugin>)));
        }

        /// <summary>
        ///  Gets all Plugins registered in this project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Plugin&gt;</returns>
        public async System.Threading.Tasks.Task<List<Plugin>> GetPluginsAsync()
        {
            ApiResponse<List<Plugin>> localVarResponse = await GetPluginsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all Plugins registered in this project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Plugin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Plugin>>> GetPluginsAsyncWithHttpInfo()
        {

            var localVarPath = "/plugins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlugins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Plugin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Plugin>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Plugin>)));
        }

        /// <summary>
        ///  Get a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Printer</returns>
        public Printer GetPrinter(string printer)
        {
            ApiResponse<Printer> localVarResponse = GetPrinterWithHttpInfo(printer);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>ApiResponse of Printer</returns>
        public ApiResponse<Printer> GetPrinterWithHttpInfo(string printer)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->GetPrinter");

            var localVarPath = "/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Get a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of Printer</returns>
        public async System.Threading.Tasks.Task<Printer> GetPrinterAsync(string printer)
        {
            ApiResponse<Printer> localVarResponse = await GetPrinterAsyncWithHttpInfo(printer);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Printer>> GetPrinterAsyncWithHttpInfo(string printer)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->GetPrinter");

            var localVarPath = "/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Lists all printers that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Printer&gt;</returns>
        public List<Printer> GetPrinters()
        {
            ApiResponse<List<Printer>> localVarResponse = GetPrintersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all printers that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Printer&gt;</returns>
        public ApiResponse<List<Printer>> GetPrintersWithHttpInfo()
        {

            var localVarPath = "/printers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrinters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Printer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Printer>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Printer>)));
        }

        /// <summary>
        ///  Lists all printers that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Printer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Printer>> GetPrintersAsync()
        {
            ApiResponse<List<Printer>> localVarResponse = await GetPrintersAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all printers that can be used to print documents
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Printer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Printer>>> GetPrintersAsyncWithHttpInfo()
        {

            var localVarPath = "/printers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrinters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Printer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Printer>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Printer>)));
        }

        /// <summary>
        ///  Lists all security roles
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Role&gt;</returns>
        public List<Role> GetRoles()
        {
            ApiResponse<List<Role>> localVarResponse = GetRolesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all security roles
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        public ApiResponse<List<Role>> GetRolesWithHttpInfo()
        {

            var localVarPath = "/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Role>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Role>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Role>)));
        }

        /// <summary>
        ///  Lists all security roles
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Role&gt;</returns>
        public async System.Threading.Tasks.Task<List<Role>> GetRolesAsync()
        {
            ApiResponse<List<Role>> localVarResponse = await GetRolesAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all security roles
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Role>>> GetRolesAsyncWithHttpInfo()
        {

            var localVarPath = "/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Role>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Role>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Role>)));
        }

        /// <summary>
        ///  Get all settings
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        public Settings GetSettings()
        {
            ApiResponse<Settings> localVarResponse = GetSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all settings
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        public ApiResponse<Settings> GetSettingsWithHttpInfo()
        {

            var localVarPath = "/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Settings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Settings)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Settings)));
        }

        /// <summary>
        ///  Get all settings
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> GetSettingsAsync()
        {
            ApiResponse<Settings> localVarResponse = await GetSettingsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all settings
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Settings>> GetSettingsAsyncWithHttpInfo()
        {

            var localVarPath = "/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Settings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Settings)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Settings)));
        }

        /// <summary>
        ///  Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Object</returns>
        public Object GetSubSettings(string settingsType)
        {
            ApiResponse<Object> localVarResponse = GetSubSettingsWithHttpInfo(settingsType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetSubSettingsWithHttpInfo(string settingsType)
        {
            // verify the required parameter 'settingsType' is set
            if (settingsType == null)
                throw new ApiException(400, "Missing required parameter 'settingsType' when calling DefaultApi->GetSubSettings");

            var localVarPath = "/settings/{settingsType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsType != null) localVarPathParams.Add("settingsType", Configuration.ApiClient.ParameterToString(settingsType)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSubSettingsAsync(string settingsType)
        {
            ApiResponse<Object> localVarResponse = await GetSubSettingsAsyncWithHttpInfo(settingsType);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSubSettingsAsyncWithHttpInfo(string settingsType)
        {
            // verify the required parameter 'settingsType' is set
            if (settingsType == null)
                throw new ApiException(400, "Missing required parameter 'settingsType' when calling DefaultApi->GetSubSettings");

            var localVarPath = "/settings/{settingsType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsType != null) localVarPathParams.Add("settingsType", Configuration.ApiClient.ParameterToString(settingsType)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get a list of supported features
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Feature&gt;</returns>
        public List<Feature> GetSupportedFeatures()
        {
            ApiResponse<List<Feature>> localVarResponse = GetSupportedFeaturesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of supported features
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Feature&gt;</returns>
        public ApiResponse<List<Feature>> GetSupportedFeaturesWithHttpInfo()
        {

            var localVarPath = "/system/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupportedFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Feature>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Feature>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Feature>)));
        }

        /// <summary>
        ///  Get a list of supported features
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Feature&gt;</returns>
        public async System.Threading.Tasks.Task<List<Feature>> GetSupportedFeaturesAsync()
        {
            ApiResponse<List<Feature>> localVarResponse = await GetSupportedFeaturesAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of supported features
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Feature&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Feature>>> GetSupportedFeaturesAsyncWithHttpInfo()
        {

            var localVarPath = "/system/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupportedFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Feature>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Feature>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Feature>)));
        }

        /// <summary>
        ///  Lists all the currency symbols that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;CurrencySymbol&gt;</returns>
        public List<CurrencySymbol> GetSystemCurrencySymbols(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<CurrencySymbol>> localVarResponse = GetSystemCurrencySymbolsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the currency symbols that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;CurrencySymbol&gt;</returns>
        public ApiResponse<List<CurrencySymbol>> GetSystemCurrencySymbolsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/system/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemCurrencySymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencySymbol>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CurrencySymbol>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencySymbol>)));
        }

        /// <summary>
        ///  Lists all the currency symbols that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;CurrencySymbol&gt;</returns>
        public async System.Threading.Tasks.Task<List<CurrencySymbol>> GetSystemCurrencySymbolsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<CurrencySymbol>> localVarResponse = await GetSystemCurrencySymbolsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the currency symbols that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencySymbol&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencySymbol>>> GetSystemCurrencySymbolsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/system/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemCurrencySymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencySymbol>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CurrencySymbol>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencySymbol>)));
        }

        /// <summary>
        ///  Get the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LanguageDefinition</returns>
        public LanguageDefinition GetSystemDefaultLanguage()
        {
            ApiResponse<LanguageDefinition> localVarResponse = GetSystemDefaultLanguageWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LanguageDefinition</returns>
        public ApiResponse<LanguageDefinition> GetSystemDefaultLanguageWithHttpInfo()
        {

            var localVarPath = "/system/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguageDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageDefinition)));
        }

        /// <summary>
        ///  Get the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LanguageDefinition</returns>
        public async System.Threading.Tasks.Task<LanguageDefinition> GetSystemDefaultLanguageAsync()
        {
            ApiResponse<LanguageDefinition> localVarResponse = await GetSystemDefaultLanguageAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LanguageDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LanguageDefinition>> GetSystemDefaultLanguageAsyncWithHttpInfo()
        {

            var localVarPath = "/system/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguageDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageDefinition)));
        }

        /// <summary>
        ///  Get system information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemInfo</returns>
        public SystemInfo GetSystemInfo()
        {
            ApiResponse<SystemInfo> localVarResponse = GetSystemInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get system information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemInfo</returns>
        public ApiResponse<SystemInfo> GetSystemInfoWithHttpInfo()
        {

            var localVarPath = "/system/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemInfo)));
        }

        /// <summary>
        ///  Get system information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemInfo</returns>
        public async System.Threading.Tasks.Task<SystemInfo> GetSystemInfoAsync()
        {
            ApiResponse<SystemInfo> localVarResponse = await GetSystemInfoAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get system information
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemInfo>> GetSystemInfoAsyncWithHttpInfo()
        {

            var localVarPath = "/system/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemInfo)));
        }

        /// <summary>
        ///  Lists all the languages that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>List&lt;LanguageDefinition&gt;</returns>
        public List<LanguageDefinition> GetSystemLanguages(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null)
        {
            ApiResponse<List<LanguageDefinition>> localVarResponse = GetSystemLanguagesWithHttpInfo(page, size, sort, filter, formats);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the languages that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;LanguageDefinition&gt;</returns>
        public ApiResponse<List<LanguageDefinition>> GetSystemLanguagesWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null)
        {

            var localVarPath = "/system/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (formats != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "formats", formats)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LanguageDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LanguageDefinition>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LanguageDefinition>)));
        }

        /// <summary>
        ///  Lists all the languages that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>Task of List&lt;LanguageDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<LanguageDefinition>> GetSystemLanguagesAsync(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null)
        {
            ApiResponse<List<LanguageDefinition>> localVarResponse = await GetSystemLanguagesAsyncWithHttpInfo(page, size, sort, filter, formats);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the languages that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="formats">Include standard formats for dates, times, dateTimes and numbers in the result (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;LanguageDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LanguageDefinition>>> GetSystemLanguagesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? formats = null)
        {

            var localVarPath = "/system/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (formats != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "formats", formats)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LanguageDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LanguageDefinition>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LanguageDefinition>)));
        }

        /// <summary>
        ///  Get a single printerdefinition
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>PrinterDefinition</returns>
        public PrinterDefinition GetSystemPrinter(string printer, bool? includeDetails = null)
        {
            ApiResponse<PrinterDefinition> localVarResponse = GetSystemPrinterWithHttpInfo(printer, includeDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a single printerdefinition
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>ApiResponse of PrinterDefinition</returns>
        public ApiResponse<PrinterDefinition> GetSystemPrinterWithHttpInfo(string printer, bool? includeDetails = null)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->GetSystemPrinter");

            var localVarPath = "/system/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter
            if (includeDetails != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrinterDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrinterDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrinterDefinition)));
        }

        /// <summary>
        ///  Get a single printerdefinition
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>Task of PrinterDefinition</returns>
        public async System.Threading.Tasks.Task<PrinterDefinition> GetSystemPrinterAsync(string printer, bool? includeDetails = null)
        {
            ApiResponse<PrinterDefinition> localVarResponse = await GetSystemPrinterAsyncWithHttpInfo(printer, includeDetails);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a single printerdefinition
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer definition</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to true)</param>
        /// <returns>Task of ApiResponse (PrinterDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrinterDefinition>> GetSystemPrinterAsyncWithHttpInfo(string printer, bool? includeDetails = null)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->GetSystemPrinter");

            var localVarPath = "/system/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter
            if (includeDetails != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrinterDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrinterDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrinterDefinition)));
        }

        /// <summary>
        ///  Get a list of the available printers on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>List&lt;PrinterDefinition&gt;</returns>
        public List<PrinterDefinition> GetSystemPrinters(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null)
        {
            ApiResponse<List<PrinterDefinition>> localVarResponse = GetSystemPrintersWithHttpInfo(page, size, sort, filter, includeDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of the available printers on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;PrinterDefinition&gt;</returns>
        public ApiResponse<List<PrinterDefinition>> GetSystemPrintersWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null)
        {

            var localVarPath = "/system/printers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemPrinters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrinterDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrinterDefinition>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrinterDefinition>)));
        }

        /// <summary>
        ///  Get a list of the available printers on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>Task of List&lt;PrinterDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<PrinterDefinition>> GetSystemPrintersAsync(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null)
        {
            ApiResponse<List<PrinterDefinition>> localVarResponse = await GetSystemPrintersAsyncWithHttpInfo(page, size, sort, filter, includeDetails);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of the available printers on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <param name="includeDetails">Include the details of each printer (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;PrinterDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PrinterDefinition>>> GetSystemPrintersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null, bool? includeDetails = null)
        {

            var localVarPath = "/system/printers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemPrinters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrinterDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrinterDefinition>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrinterDefinition>)));
        }

        /// <summary>
        ///  Lists all the time zones that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetSystemTimeZones()
        {
            ApiResponse<List<string>> localVarResponse = GetSystemTimeZonesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the time zones that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetSystemTimeZonesWithHttpInfo()
        {

            var localVarPath = "/system/timeZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemTimeZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Lists all the time zones that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetSystemTimeZonesAsync()
        {
            ApiResponse<List<string>> localVarResponse = await GetSystemTimeZonesAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the time zones that are availabled on the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetSystemTimeZonesAsyncWithHttpInfo()
        {

            var localVarPath = "/system/timeZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemTimeZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Retrieve a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>TagGroup</returns>
        public TagGroup GetTagGroup(string tagGroupId)
        {
            ApiResponse<TagGroup> localVarResponse = GetTagGroupWithHttpInfo(tagGroupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>ApiResponse of TagGroup</returns>
        public ApiResponse<TagGroup> GetTagGroupWithHttpInfo(string tagGroupId)
        {
            // verify the required parameter 'tagGroupId' is set
            if (tagGroupId == null)
                throw new ApiException(400, "Missing required parameter 'tagGroupId' when calling DefaultApi->GetTagGroup");

            var localVarPath = "/taggroups/{tagGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagGroupId != null) localVarPathParams.Add("tagGroupId", Configuration.ApiClient.ParameterToString(tagGroupId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagGroup)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagGroup)));
        }

        /// <summary>
        ///  Retrieve a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>Task of TagGroup</returns>
        public async System.Threading.Tasks.Task<TagGroup> GetTagGroupAsync(string tagGroupId)
        {
            ApiResponse<TagGroup> localVarResponse = await GetTagGroupAsyncWithHttpInfo(tagGroupId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single tag group object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <returns>Task of ApiResponse (TagGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagGroup>> GetTagGroupAsyncWithHttpInfo(string tagGroupId)
        {
            // verify the required parameter 'tagGroupId' is set
            if (tagGroupId == null)
                throw new ApiException(400, "Missing required parameter 'tagGroupId' when calling DefaultApi->GetTagGroup");

            var localVarPath = "/taggroups/{tagGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagGroupId != null) localVarPathParams.Add("tagGroupId", Configuration.ApiClient.ParameterToString(tagGroupId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagGroup)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagGroup)));
        }

        /// <summary>
        ///  Returns all tag groups
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;TagGroup&gt;</returns>
        public List<TagGroup> GetTagGroups(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<TagGroup>> localVarResponse = GetTagGroupsWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all tag groups
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;TagGroup&gt;</returns>
        public ApiResponse<List<TagGroup>> GetTagGroupsWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/taggroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TagGroup>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroup>)));
        }

        /// <summary>
        ///  Returns all tag groups
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;TagGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TagGroup>> GetTagGroupsAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<TagGroup>> localVarResponse = await GetTagGroupsAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all tag groups
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TagGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TagGroup>>> GetTagGroupsAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/taggroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TagGroup>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroup>)));
        }

        /// <summary>
        ///  Retrieve a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>Template</returns>
        public Template GetTemplate(string templateId)
        {
            ApiResponse<Template> localVarResponse = GetTemplateWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse<Template> GetTemplateWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplate");

            var localVarPath = "/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        ///  Retrieve a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> GetTemplateAsync(string templateId)
        {
            ApiResponse<Template> localVarResponse = await GetTemplateAsyncWithHttpInfo(templateId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a single template object
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateAsyncWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplate");

            var localVarPath = "/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        ///  Return the content of the template for the given language.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTemplateContent(string templateId, string lang = null, string version = null, bool? includeMeta = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = GetTemplateContentWithHttpInfo(templateId, lang, version, includeMeta);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the content of the template for the given language.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetTemplateContentWithHttpInfo(string templateId, string lang = null, string version = null, bool? includeMeta = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateContent");

            var localVarPath = "/templates/{templateId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (includeMeta != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMeta", includeMeta)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Return the content of the template for the given language.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTemplateContentAsync(string templateId, string lang = null, string version = null, bool? includeMeta = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await GetTemplateContentAsyncWithHttpInfo(templateId, lang, version, includeMeta);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the content of the template for the given language.
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="version">The version ID or the revision number of the template to retrieve. Latest version if not specified (optional)</param>
        /// <param name="includeMeta">Whether template meta information should already be included in the template document itself (optional, default to false)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTemplateContentAsyncWithHttpInfo(string templateId, string lang = null, string version = null, bool? includeMeta = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateContent");

            var localVarPath = "/templates/{templateId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (includeMeta != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMeta", includeMeta)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Show the history of a given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>List&lt;Version&gt;</returns>
        public List<Model.Version> GetTemplateHistory(string templateId, string lang = null, int? page = null, int? size = null, string sort = null)
        {
            ApiResponse<List<Model.Version>> localVarResponse = GetTemplateHistoryWithHttpInfo(templateId, lang, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Show the history of a given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>ApiResponse of List&lt;Version&gt;</returns>
        public ApiResponse<List<Model.Version>> GetTemplateHistoryWithHttpInfo(string templateId, string lang = null, int? page = null, int? size = null, string sort = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateHistory");

            var localVarPath = "/templates/{templateId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Model.Version>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Model.Version>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Model.Version>)));
        }

        /// <summary>
        ///  Show the history of a given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>Task of List&lt;Version&gt;</returns>
        public async System.Threading.Tasks.Task<List<Model.Version>> GetTemplateHistoryAsync(string templateId, string lang = null, int? page = null, int? size = null, string sort = null)
        {
            ApiResponse<List<Model.Version>> localVarResponse = await GetTemplateHistoryAsyncWithHttpInfo(templateId, lang, page, size, sort);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Show the history of a given template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Version&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Model.Version>>> GetTemplateHistoryAsyncWithHttpInfo(string templateId, string lang = null, int? page = null, int? size = null, string sort = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateHistory");

            var localVarPath = "/templates/{templateId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Model.Version>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Model.Version>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Model.Version>)));
        }

        /// <summary>
        ///  Retrieve info about the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>TemplateLanguage</returns>
        public TemplateLanguage GetTemplateLanguage(string templateId, string lang)
        {
            ApiResponse<TemplateLanguage> localVarResponse = GetTemplateLanguageWithHttpInfo(templateId, lang);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve info about the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>ApiResponse of TemplateLanguage</returns>
        public ApiResponse<TemplateLanguage> GetTemplateLanguageWithHttpInfo(string templateId, string lang)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateLanguage");
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling DefaultApi->GetTemplateLanguage");

            var localVarPath = "/templates/{templateId}/lang/{lang}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarPathParams.Add("lang", Configuration.ApiClient.ParameterToString(lang)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLanguage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLanguage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLanguage)));
        }

        /// <summary>
        ///  Retrieve info about the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>Task of TemplateLanguage</returns>
        public async System.Threading.Tasks.Task<TemplateLanguage> GetTemplateLanguageAsync(string templateId, string lang)
        {
            ApiResponse<TemplateLanguage> localVarResponse = await GetTemplateLanguageAsyncWithHttpInfo(templateId, lang);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve info about the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project</param>
        /// <returns>Task of ApiResponse (TemplateLanguage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateLanguage>> GetTemplateLanguageAsyncWithHttpInfo(string templateId, string lang)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateLanguage");
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling DefaultApi->GetTemplateLanguage");

            var localVarPath = "/templates/{templateId}/lang/{lang}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarPathParams.Add("lang", Configuration.ApiClient.ParameterToString(lang)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLanguage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLanguage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLanguage)));
        }

        /// <summary>
        ///  Get the schema of the fields that are usabel in the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTemplateSchema(string templateId, string format = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = GetTemplateSchemaWithHttpInfo(templateId, format);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the schema of the fields that are usabel in the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetTemplateSchemaWithHttpInfo(string templateId, string format = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateSchema");

            var localVarPath = "/templates/{templateId}/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Get the schema of the fields that are usabel in the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTemplateSchemaAsync(string templateId, string format = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await GetTemplateSchemaAsyncWithHttpInfo(templateId, format);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the schema of the fields that are usabel in the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="format">The format of the schema (optional, default to xsd)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTemplateSchemaAsyncWithHttpInfo(string templateId, string format = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->GetTemplateSchema");

            var localVarPath = "/templates/{templateId}/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Returns all templates
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> GetTemplates(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Template>> localVarResponse = GetTemplatesWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all templates
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse<List<Template>> GetTemplatesWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        ///  Returns all templates
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> GetTemplatesAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<Template>> localVarResponse = await GetTemplatesAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all templates
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetTemplatesAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        ///  Get a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>User</returns>
        public User GetUser(string user)
        {
            ApiResponse<User> localVarResponse = GetUserWithHttpInfo(user);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> GetUserWithHttpInfo(string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->GetUser");

            var localVarPath = "/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Get a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(string user)
        {
            ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(user);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo(string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->GetUser");

            var localVarPath = "/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Lists all users
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetUsers(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<User>> localVarResponse = GetUsersWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all users
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> GetUsersWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Lists all users
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetUsersAsync(int? page = null, int? size = null, string sort = null, string filter = null)
        {
            ApiResponse<List<User>> localVarResponse = await GetUsersAsyncWithHttpInfo(page, size, sort, filter);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all users
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The 0-based page to retrieve, defaults to 0 (optional)</param>
        /// <param name="size">The size of the page, defaults to 20 (optional)</param>
        /// <param name="sort">The fields to sort on (optional)</param>
        /// <param name="filter">The filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUsersAsyncWithHttpInfo(int? page = null, int? size = null, string sort = null, string filter = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        ///  Install a new license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>LicenseInformation</returns>
        public LicenseInformation InstallLicense(byte[] body = null)
        {
            ApiResponse<LicenseInformation> localVarResponse = InstallLicenseWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Install a new license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>ApiResponse of LicenseInformation</returns>
        public ApiResponse<LicenseInformation> InstallLicenseWithHttpInfo(byte[] body = null)
        {

            var localVarPath = "/system/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseInformation)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseInformation)));
        }

        /// <summary>
        ///  Install a new license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>Task of LicenseInformation</returns>
        public async System.Threading.Tasks.Task<LicenseInformation> InstallLicenseAsync(byte[] body = null)
        {
            ApiResponse<LicenseInformation> localVarResponse = await InstallLicenseAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Install a new license
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The license to install (optional)</param>
        /// <returns>Task of ApiResponse (LicenseInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicenseInformation>> InstallLicenseAsyncWithHttpInfo(byte[] body = null)
        {

            var localVarPath = "/system/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseInformation)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseInformation)));
        }

        /// <summary>
        ///  Parse the given expression
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ParseExpressionResponse</returns>
        public ParseExpressionResponse ParseExpression(ParseExpressionRequest body = null)
        {
            ApiResponse<ParseExpressionResponse> localVarResponse = ParseExpressionWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Parse the given expression
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of ParseExpressionResponse</returns>
        public ApiResponse<ParseExpressionResponse> ParseExpressionWithHttpInfo(ParseExpressionRequest body = null)
        {

            var localVarPath = "/system/expression";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseExpression", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParseExpressionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParseExpressionResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParseExpressionResponse)));
        }

        /// <summary>
        ///  Parse the given expression
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ParseExpressionResponse</returns>
        public async System.Threading.Tasks.Task<ParseExpressionResponse> ParseExpressionAsync(ParseExpressionRequest body = null)
        {
            ApiResponse<ParseExpressionResponse> localVarResponse = await ParseExpressionAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Parse the given expression
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (ParseExpressionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParseExpressionResponse>> ParseExpressionAsyncWithHttpInfo(ParseExpressionRequest body = null)
        {

            var localVarPath = "/system/expression";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ParseExpression", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParseExpressionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParseExpressionResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParseExpressionResponse)));
        }

        /// <summary>
        ///  Can be used for external calls to the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>string</returns>
        public string PostFlowCallback(string callbackId, string executionId = null, string body = null)
        {
            ApiResponse<string> localVarResponse = PostFlowCallbackWithHttpInfo(callbackId, executionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Can be used for external calls to the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PostFlowCallbackWithHttpInfo(string callbackId, string executionId = null, string body = null)
        {
            // verify the required parameter 'callbackId' is set
            if (callbackId == null)
                throw new ApiException(400, "Missing required parameter 'callbackId' when calling DefaultApi->PostFlowCallback");

            var localVarPath = "/flows/callback/{callbackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callbackId != null) localVarPathParams.Add("callbackId", Configuration.ApiClient.ParameterToString(callbackId)); // path parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFlowCallback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Can be used for external calls to the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostFlowCallbackAsync(string callbackId, string executionId = null, string body = null)
        {
            ApiResponse<string> localVarResponse = await PostFlowCallbackAsyncWithHttpInfo(callbackId, executionId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Can be used for external calls to the flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The id of the queue to put the request in</param>
        /// <param name="executionId">The id to identify the execution (optional)</param>
        /// <param name="body">The data that is passed from the external party (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostFlowCallbackAsyncWithHttpInfo(string callbackId, string executionId = null, string body = null)
        {
            // verify the required parameter 'callbackId' is set
            if (callbackId == null)
                throw new ApiException(400, "Missing required parameter 'callbackId' when calling DefaultApi->PostFlowCallback");

            var localVarPath = "/flows/callback/{callbackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callbackId != null) localVarPathParams.Add("callbackId", Configuration.ApiClient.ParameterToString(callbackId)); // path parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFlowCallback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>ImportInformation</returns>
        public ImportInformation PrepareImport(byte[] body = null)
        {
            ApiResponse<ImportInformation> localVarResponse = PrepareImportWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>ApiResponse of ImportInformation</returns>
        public ApiResponse<ImportInformation> PrepareImportWithHttpInfo(byte[] body = null)
        {

            var localVarPath = "/system/import/prepare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportInformation)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportInformation)));
        }

        /// <summary>
        ///  Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of ImportInformation</returns>
        public async System.Threading.Tasks.Task<ImportInformation> PrepareImportAsync(byte[] body = null)
        {
            ApiResponse<ImportInformation> localVarResponse = await PrepareImportAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Given an archive, produce some information that can be used to map items from the archive on items in the target environment
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of ApiResponse (ImportInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportInformation>> PrepareImportAsyncWithHttpInfo(byte[] body = null)
        {

            var localVarPath = "/system/import/prepare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportInformation)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportInformation)));
        }

        /// <summary>
        ///  Refresh the state of the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns></returns>
        public void RefreshConnector(string connectorId)
        {
            RefreshConnectorWithHttpInfo(connectorId);
        }

        /// <summary>
        ///  Refresh the state of the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RefreshConnectorWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->RefreshConnector");

            var localVarPath = "/connectors/{connectorId}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Refresh the state of the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RefreshConnectorAsync(string connectorId)
        {
            await RefreshConnectorAsyncWithHttpInfo(connectorId);

        }

        /// <summary>
        ///  Refresh the state of the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RefreshConnectorAsyncWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->RefreshConnector");

            var localVarPath = "/connectors/{connectorId}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns></returns>
        public void RestoreBackup(byte[] body = null)
        {
            RestoreBackupWithHttpInfo(body);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RestoreBackupWithHttpInfo(byte[] body = null)
        {

            var localVarPath = "/system/backup/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreBackup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreBackupAsync(byte[] body = null)
        {
            await RestoreBackupAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Import the content from the given archive
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content of the archive (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RestoreBackupAsyncWithHttpInfo(byte[] body = null)
        {

            var localVarPath = "/system/backup/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreBackup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Run one or all cleanup processes now
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>List&lt;CleanupActionStatus&gt;</returns>
        public List<CleanupActionStatus> RunCleanup(string action = null)
        {
            ApiResponse<List<CleanupActionStatus>> localVarResponse = RunCleanupWithHttpInfo(action);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Run one or all cleanup processes now
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>ApiResponse of List&lt;CleanupActionStatus&gt;</returns>
        public ApiResponse<List<CleanupActionStatus>> RunCleanupWithHttpInfo(string action = null)
        {

            var localVarPath = "/system/cleanup/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunCleanup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CleanupActionStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CleanupActionStatus>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CleanupActionStatus>)));
        }

        /// <summary>
        ///  Run one or all cleanup processes now
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>Task of List&lt;CleanupActionStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<CleanupActionStatus>> RunCleanupAsync(string action = null)
        {
            ApiResponse<List<CleanupActionStatus>> localVarResponse = await RunCleanupAsyncWithHttpInfo(action);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Run one or all cleanup processes now
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The cleanup action to run. When not specified, all actions are triggered (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CleanupActionStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CleanupActionStatus>>> RunCleanupAsyncWithHttpInfo(string action = null)
        {

            var localVarPath = "/system/cleanup/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunCleanup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CleanupActionStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CleanupActionStatus>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CleanupActionStatus>)));
        }

        /// <summary>
        ///  Set the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Language</returns>
        public Language SetDefaultLanguage(Language body = null)
        {
            ApiResponse<Language> localVarResponse = SetDefaultLanguageWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of Language</returns>
        public ApiResponse<Language> SetDefaultLanguageWithHttpInfo(Language body = null)
        {

            var localVarPath = "/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Set the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of Language</returns>
        public async System.Threading.Tasks.Task<Language> SetDefaultLanguageAsync(Language body = null)
        {
            ApiResponse<Language> localVarResponse = await SetDefaultLanguageAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Set the default language for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Language>> SetDefaultLanguageAsyncWithHttpInfo(Language body = null)
        {

            var localVarPath = "/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Set the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Printer</returns>
        public Printer SetDefaultPrinter(Printer body = null)
        {
            ApiResponse<Printer> localVarResponse = SetDefaultPrinterWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>ApiResponse of Printer</returns>
        public ApiResponse<Printer> SetDefaultPrinterWithHttpInfo(Printer body = null)
        {

            var localVarPath = "/printers/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDefaultPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Set the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of Printer</returns>
        public async System.Threading.Tasks.Task<Printer> SetDefaultPrinterAsync(Printer body = null)
        {
            ApiResponse<Printer> localVarResponse = await SetDefaultPrinterAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Set the default printer for the project
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Printer>> SetDefaultPrinterAsyncWithHttpInfo(Printer body = null)
        {

            var localVarPath = "/printers/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDefaultPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Set the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>LanguageDefinition</returns>
        public LanguageDefinition SetSystemDefaultLanguage(LanguageDefinition body = null)
        {
            ApiResponse<LanguageDefinition> localVarResponse = SetSystemDefaultLanguageWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of LanguageDefinition</returns>
        public ApiResponse<LanguageDefinition> SetSystemDefaultLanguageWithHttpInfo(LanguageDefinition body = null)
        {

            var localVarPath = "/system/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSystemDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguageDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageDefinition)));
        }

        /// <summary>
        ///  Set the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of LanguageDefinition</returns>
        public async System.Threading.Tasks.Task<LanguageDefinition> SetSystemDefaultLanguageAsync(LanguageDefinition body = null)
        {
            ApiResponse<LanguageDefinition> localVarResponse = await SetSystemDefaultLanguageAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Set the default language for the system
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (LanguageDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LanguageDefinition>> SetSystemDefaultLanguageAsyncWithHttpInfo(LanguageDefinition body = null)
        {

            var localVarPath = "/system/languages/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSystemDefaultLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguageDefinition)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageDefinition)));
        }

        /// <summary>
        ///  Setup the connector - start
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ConnectorStage</returns>
        public ConnectorStage SetupConnector(string connectorId)
        {
            ApiResponse<ConnectorStage> localVarResponse = SetupConnectorWithHttpInfo(connectorId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Setup the connector - start
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        public ApiResponse<ConnectorStage> SetupConnectorWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnector");

            var localVarPath = "/connectors/{connectorId}/setup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Setup the connector - start
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ConnectorStage</returns>
        public async System.Threading.Tasks.Task<ConnectorStage> SetupConnectorAsync(string connectorId)
        {
            ApiResponse<ConnectorStage> localVarResponse = await SetupConnectorAsyncWithHttpInfo(connectorId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Setup the connector - start
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorAsyncWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnector");

            var localVarPath = "/connectors/{connectorId}/setup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Cancel the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Connector</returns>
        public Connector SetupConnectorCancel(string connectorId, Object body = null)
        {
            ApiResponse<Connector> localVarResponse = SetupConnectorCancelWithHttpInfo(connectorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancel the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        public ApiResponse<Connector> SetupConnectorCancelWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorCancel");

            var localVarPath = "/connectors/{connectorId}/setup/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Cancel the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of Connector</returns>
        public async System.Threading.Tasks.Task<Connector> SetupConnectorCancelAsync(string connectorId, Object body = null)
        {
            ApiResponse<Connector> localVarResponse = await SetupConnectorCancelAsyncWithHttpInfo(connectorId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancel the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Connector>> SetupConnectorCancelAsyncWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorCancel");

            var localVarPath = "/connectors/{connectorId}/setup/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Setup the connector - get the current step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ConnectorStage</returns>
        public ConnectorStage SetupConnectorCurrent(string connectorId)
        {
            ApiResponse<ConnectorStage> localVarResponse = SetupConnectorCurrentWithHttpInfo(connectorId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Setup the connector - get the current step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        public ApiResponse<ConnectorStage> SetupConnectorCurrentWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorCurrent");

            var localVarPath = "/connectors/{connectorId}/setup/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Setup the connector - get the current step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ConnectorStage</returns>
        public async System.Threading.Tasks.Task<ConnectorStage> SetupConnectorCurrentAsync(string connectorId)
        {
            ApiResponse<ConnectorStage> localVarResponse = await SetupConnectorCurrentAsyncWithHttpInfo(connectorId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Setup the connector - get the current step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorCurrentAsyncWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorCurrent");

            var localVarPath = "/connectors/{connectorId}/setup/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Finish the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Connector</returns>
        public Connector SetupConnectorFinish(string connectorId, Object body = null)
        {
            ApiResponse<Connector> localVarResponse = SetupConnectorFinishWithHttpInfo(connectorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Finish the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        public ApiResponse<Connector> SetupConnectorFinishWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorFinish");

            var localVarPath = "/connectors/{connectorId}/setup/finish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorFinish", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Finish the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of Connector</returns>
        public async System.Threading.Tasks.Task<Connector> SetupConnectorFinishAsync(string connectorId, Object body = null)
        {
            ApiResponse<Connector> localVarResponse = await SetupConnectorFinishAsyncWithHttpInfo(connectorId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Finish the connector setup
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Connector>> SetupConnectorFinishAsyncWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorFinish");

            var localVarPath = "/connectors/{connectorId}/setup/finish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorFinish", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Setup the connector - go to the next step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ConnectorStage</returns>
        public ConnectorStage SetupConnectorNext(string connectorId, Object body = null)
        {
            ApiResponse<ConnectorStage> localVarResponse = SetupConnectorNextWithHttpInfo(connectorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Setup the connector - go to the next step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        public ApiResponse<ConnectorStage> SetupConnectorNextWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorNext");

            var localVarPath = "/connectors/{connectorId}/setup/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Setup the connector - go to the next step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ConnectorStage</returns>
        public async System.Threading.Tasks.Task<ConnectorStage> SetupConnectorNextAsync(string connectorId, Object body = null)
        {
            ApiResponse<ConnectorStage> localVarResponse = await SetupConnectorNextAsyncWithHttpInfo(connectorId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Setup the connector - go to the next step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorNextAsyncWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorNext");

            var localVarPath = "/connectors/{connectorId}/setup/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Setup the connector - go to the previous step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ConnectorStage</returns>
        public ConnectorStage SetupConnectorPrevious(string connectorId, Object body = null)
        {
            ApiResponse<ConnectorStage> localVarResponse = SetupConnectorPreviousWithHttpInfo(connectorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Setup the connector - go to the previous step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>ApiResponse of ConnectorStage</returns>
        public ApiResponse<ConnectorStage> SetupConnectorPreviousWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorPrevious");

            var localVarPath = "/connectors/{connectorId}/setup/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorPrevious", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Setup the connector - go to the previous step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ConnectorStage</returns>
        public async System.Threading.Tasks.Task<ConnectorStage> SetupConnectorPreviousAsync(string connectorId, Object body = null)
        {
            ApiResponse<ConnectorStage> localVarResponse = await SetupConnectorPreviousAsyncWithHttpInfo(connectorId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Setup the connector - go to the previous step
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The model of the current step (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorStage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorStage>> SetupConnectorPreviousAsyncWithHttpInfo(string connectorId, Object body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->SetupConnectorPrevious");

            var localVarPath = "/connectors/{connectorId}/setup/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetupConnectorPrevious", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorStage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorStage)));
        }

        /// <summary>
        ///  Syncs all users with the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SyncResult</returns>
        public SyncResult SyncExternalUsers()
        {
            ApiResponse<SyncResult> localVarResponse = SyncExternalUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Syncs all users with the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SyncResult</returns>
        public ApiResponse<SyncResult> SyncExternalUsersWithHttpInfo()
        {

            var localVarPath = "/users/external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncExternalUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyncResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SyncResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyncResult)));
        }

        /// <summary>
        ///  Syncs all users with the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SyncResult</returns>
        public async System.Threading.Tasks.Task<SyncResult> SyncExternalUsersAsync()
        {
            ApiResponse<SyncResult> localVarResponse = await SyncExternalUsersAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Syncs all users with the login connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SyncResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SyncResult>> SyncExternalUsersAsyncWithHttpInfo()
        {

            var localVarPath = "/users/external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncExternalUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyncResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SyncResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyncResult)));
        }

        /// <summary>
        ///  Test if the connection to the connector can be made successfully
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>OperationStatus</returns>
        public OperationStatus TestConnector(string connectorId)
        {
            ApiResponse<OperationStatus> localVarResponse = TestConnectorWithHttpInfo(connectorId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Test if the connection to the connector can be made successfully
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>ApiResponse of OperationStatus</returns>
        public ApiResponse<OperationStatus> TestConnectorWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->TestConnector");

            var localVarPath = "/connectors/{connectorId}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationStatus)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationStatus)));
        }

        /// <summary>
        ///  Test if the connection to the connector can be made successfully
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of OperationStatus</returns>
        public async System.Threading.Tasks.Task<OperationStatus> TestConnectorAsync(string connectorId)
        {
            ApiResponse<OperationStatus> localVarResponse = await TestConnectorAsyncWithHttpInfo(connectorId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Test if the connection to the connector can be made successfully
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <returns>Task of ApiResponse (OperationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationStatus>> TestConnectorAsyncWithHttpInfo(string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->TestConnector");

            var localVarPath = "/connectors/{connectorId}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationStatus)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationStatus)));
        }

        /// <summary>
        ///  Send a test document to the printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns></returns>
        public void TestPrinter(string printer)
        {
            TestPrinterWithHttpInfo(printer);
        }

        /// <summary>
        ///  Send a test document to the printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestPrinterWithHttpInfo(string printer)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->TestPrinter");

            var localVarPath = "/printers/{printer}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Send a test document to the printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestPrinterAsync(string printer)
        {
            await TestPrinterAsyncWithHttpInfo(printer);

        }

        /// <summary>
        ///  Send a test document to the printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestPrinterAsyncWithHttpInfo(string printer)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->TestPrinter");

            var localVarPath = "/printers/{printer}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>Asset</returns>
        public Asset UpdateAsset(string assetId, Asset body = null)
        {
            ApiResponse<Asset> localVarResponse = UpdateAssetWithHttpInfo(assetId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse<Asset> UpdateAssetWithHttpInfo(string assetId, Asset body = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->UpdateAsset");

            var localVarPath = "/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  Update the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> UpdateAssetAsync(string assetId, Asset body = null)
        {
            ApiResponse<Asset> localVarResponse = await UpdateAssetAsyncWithHttpInfo(assetId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The asset object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> UpdateAssetAsyncWithHttpInfo(string assetId, Asset body = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->UpdateAsset");

            var localVarPath = "/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Asset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  Update the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns></returns>
        public void UpdateAssetContent(string assetId, byte[] body = null)
        {
            UpdateAssetContentWithHttpInfo(assetId, body);
        }

        /// <summary>
        ///  Update the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAssetContentWithHttpInfo(string assetId, byte[] body = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->UpdateAssetContent");

            var localVarPath = "/assets/{assetId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAssetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAssetContentAsync(string assetId, byte[] body = null)
        {
            await UpdateAssetContentAsyncWithHttpInfo(assetId, body);

        }

        /// <summary>
        ///  Update the content of the asset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The id of the asset</param>
        /// <param name="body">The content of the asset (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAssetContentAsyncWithHttpInfo(string assetId, byte[] body = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling DefaultApi->UpdateAssetContent");

            var localVarPath = "/assets/{assetId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAssetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>Connector</returns>
        public Connector UpdateConnector(string connectorId, Connector body = null)
        {
            ApiResponse<Connector> localVarResponse = UpdateConnectorWithHttpInfo(connectorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>ApiResponse of Connector</returns>
        public ApiResponse<Connector> UpdateConnectorWithHttpInfo(string connectorId, Connector body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->UpdateConnector");

            var localVarPath = "/connectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Update the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>Task of Connector</returns>
        public async System.Threading.Tasks.Task<Connector> UpdateConnectorAsync(string connectorId, Connector body = null)
        {
            ApiResponse<Connector> localVarResponse = await UpdateConnectorAsyncWithHttpInfo(connectorId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the connector
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">The id of the connector</param>
        /// <param name="body">The connector object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Connector)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Connector>> UpdateConnectorAsyncWithHttpInfo(string connectorId, Connector body = null)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling DefaultApi->UpdateConnector");

            var localVarPath = "/connectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Connector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Connector)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Connector)));
        }

        /// <summary>
        ///  Update the data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>Data</returns>
        public Data UpdateData(string dataId, Data body = null)
        {
            ApiResponse<Data> localVarResponse = UpdateDataWithHttpInfo(dataId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>ApiResponse of Data</returns>
        public ApiResponse<Data> UpdateDataWithHttpInfo(string dataId, Data body = null)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->UpdateData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        ///  Update the data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>Task of Data</returns>
        public async System.Threading.Tasks.Task<Data> UpdateDataAsync(string dataId, Data body = null)
        {
            ApiResponse<Data> localVarResponse = await UpdateDataAsyncWithHttpInfo(dataId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the data
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataId">The id of the data</param>
        /// <param name="body">The data object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Data)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Data>> UpdateDataAsyncWithHttpInfo(string dataId, Data body = null)
        {
            // verify the required parameter 'dataId' is set
            if (dataId == null)
                throw new ApiException(400, "Missing required parameter 'dataId' when calling DefaultApi->UpdateData");

            var localVarPath = "/data/{dataId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataId != null) localVarPathParams.Add("dataId", Configuration.ApiClient.ParameterToString(dataId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        ///  Update the dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>Dataset</returns>
        public Dataset UpdateDataset(string datasetId, Dataset body = null)
        {
            ApiResponse<Dataset> localVarResponse = UpdateDatasetWithHttpInfo(datasetId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>ApiResponse of Dataset</returns>
        public ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string datasetId, Dataset body = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->UpdateDataset");

            var localVarPath = "/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dataset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dataset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dataset)));
        }

        /// <summary>
        ///  Update the dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string datasetId, Dataset body = null)
        {
            ApiResponse<Dataset> localVarResponse = await UpdateDatasetAsyncWithHttpInfo(datasetId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the dataset
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">The id of the dataset</param>
        /// <param name="body">The dataset object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dataset>> UpdateDatasetAsyncWithHttpInfo(string datasetId, Dataset body = null)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DefaultApi->UpdateDataset");

            var localVarPath = "/datasets/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetId != null) localVarPathParams.Add("datasetId", Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDataset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dataset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dataset)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dataset)));
        }

        /// <summary>
        ///  Update a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Flow</returns>
        public Flow UpdateFlow(string flow, Flow body = null)
        {
            ApiResponse<Flow> localVarResponse = UpdateFlowWithHttpInfo(flow, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>ApiResponse of Flow</returns>
        public ApiResponse<Flow> UpdateFlowWithHttpInfo(string flow, Flow body = null)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->UpdateFlow");

            var localVarPath = "/flows/{flow}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Flow)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flow)));
        }

        /// <summary>
        ///  Update a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of Flow</returns>
        public async System.Threading.Tasks.Task<Flow> UpdateFlowAsync(string flow, Flow body = null)
        {
            ApiResponse<Flow> localVarResponse = await UpdateFlowAsyncWithHttpInfo(flow, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update a single flow
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flow">The id of the flow</param>
        /// <param name="body">The possible fields and their possible values (optional)</param>
        /// <returns>Task of ApiResponse (Flow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flow>> UpdateFlowAsyncWithHttpInfo(string flow, Flow body = null)
        {
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling DefaultApi->UpdateFlow");

            var localVarPath = "/flows/{flow}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flow != null) localVarPathParams.Add("flow", Configuration.ApiClient.ParameterToString(flow)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Flow)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flow)));
        }

        /// <summary>
        ///  Update a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Language</returns>
        public Language UpdateLanguage(string language, Language body = null)
        {
            ApiResponse<Language> localVarResponse = UpdateLanguageWithHttpInfo(language, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>ApiResponse of Language</returns>
        public ApiResponse<Language> UpdateLanguageWithHttpInfo(string language, Language body = null)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling DefaultApi->UpdateLanguage");

            var localVarPath = "/languages/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Update a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of Language</returns>
        public async System.Threading.Tasks.Task<Language> UpdateLanguageAsync(string language, Language body = null)
        {
            ApiResponse<Language> localVarResponse = await UpdateLanguageAsyncWithHttpInfo(language, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update a single language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The id of the language</param>
        /// <param name="body">The result object for the language (optional)</param>
        /// <returns>Task of ApiResponse (Language)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Language>> UpdateLanguageAsyncWithHttpInfo(string language, Language body = null)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling DefaultApi->UpdateLanguage");

            var localVarPath = "/languages/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Language>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Language)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Language)));
        }

        /// <summary>
        ///  Update a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Printer</returns>
        public Printer UpdatePrinter(string printer, Printer body = null)
        {
            ApiResponse<Printer> localVarResponse = UpdatePrinterWithHttpInfo(printer, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>ApiResponse of Printer</returns>
        public ApiResponse<Printer> UpdatePrinterWithHttpInfo(string printer, Printer body = null)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->UpdatePrinter");

            var localVarPath = "/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Update a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of Printer</returns>
        public async System.Threading.Tasks.Task<Printer> UpdatePrinterAsync(string printer, Printer body = null)
        {
            ApiResponse<Printer> localVarResponse = await UpdatePrinterAsyncWithHttpInfo(printer, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update a single printer
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer">The id of the printer</param>
        /// <param name="body">The result object for the printer (optional)</param>
        /// <returns>Task of ApiResponse (Printer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Printer>> UpdatePrinterAsyncWithHttpInfo(string printer, Printer body = null)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling DefaultApi->UpdatePrinter");

            var localVarPath = "/printers/{printer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarPathParams.Add("printer", Configuration.ApiClient.ParameterToString(printer)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Printer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Printer)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Printer)));
        }

        /// <summary>
        ///  Update settings of one type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateSubSettings(string settingsType, Object body = null)
        {
            ApiResponse<Object> localVarResponse = UpdateSubSettingsWithHttpInfo(settingsType, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update settings of one type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UpdateSubSettingsWithHttpInfo(string settingsType, Object body = null)
        {
            // verify the required parameter 'settingsType' is set
            if (settingsType == null)
                throw new ApiException(400, "Missing required parameter 'settingsType' when calling DefaultApi->UpdateSubSettings");

            var localVarPath = "/settings/{settingsType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsType != null) localVarPathParams.Add("settingsType", Configuration.ApiClient.ParameterToString(settingsType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Update settings of one type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateSubSettingsAsync(string settingsType, Object body = null)
        {
            ApiResponse<Object> localVarResponse = await UpdateSubSettingsAsyncWithHttpInfo(settingsType, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update settings of one type
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsType">The type of the settings</param>
        /// <param name="body">The updated settings (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSubSettingsAsyncWithHttpInfo(string settingsType, Object body = null)
        {
            // verify the required parameter 'settingsType' is set
            if (settingsType == null)
                throw new ApiException(400, "Missing required parameter 'settingsType' when calling DefaultApi->UpdateSubSettings");

            var localVarPath = "/settings/{settingsType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsType != null) localVarPathParams.Add("settingsType", Configuration.ApiClient.ParameterToString(settingsType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Update the tag group
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>TagGroup</returns>
        public TagGroup UpdateTagGroup(string tagGroupId, TagGroup body = null)
        {
            ApiResponse<TagGroup> localVarResponse = UpdateTagGroupWithHttpInfo(tagGroupId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the tag group
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>ApiResponse of TagGroup</returns>
        public ApiResponse<TagGroup> UpdateTagGroupWithHttpInfo(string tagGroupId, TagGroup body = null)
        {
            // verify the required parameter 'tagGroupId' is set
            if (tagGroupId == null)
                throw new ApiException(400, "Missing required parameter 'tagGroupId' when calling DefaultApi->UpdateTagGroup");

            var localVarPath = "/taggroups/{tagGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagGroupId != null) localVarPathParams.Add("tagGroupId", Configuration.ApiClient.ParameterToString(tagGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagGroup)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagGroup)));
        }

        /// <summary>
        ///  Update the tag group
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>Task of TagGroup</returns>
        public async System.Threading.Tasks.Task<TagGroup> UpdateTagGroupAsync(string tagGroupId, TagGroup body = null)
        {
            ApiResponse<TagGroup> localVarResponse = await UpdateTagGroupAsyncWithHttpInfo(tagGroupId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the tag group
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGroupId">The id of the tag group</param>
        /// <param name="body">The tag group object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (TagGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagGroup>> UpdateTagGroupAsyncWithHttpInfo(string tagGroupId, TagGroup body = null)
        {
            // verify the required parameter 'tagGroupId' is set
            if (tagGroupId == null)
                throw new ApiException(400, "Missing required parameter 'tagGroupId' when calling DefaultApi->UpdateTagGroup");

            var localVarPath = "/taggroups/{tagGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagGroupId != null) localVarPathParams.Add("tagGroupId", Configuration.ApiClient.ParameterToString(tagGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagGroup)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagGroup)));
        }

        /// <summary>
        ///  Update the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>Template</returns>
        public Template UpdateTemplate(string templateId, Template body = null)
        {
            ApiResponse<Template> localVarResponse = UpdateTemplateWithHttpInfo(templateId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse<Template> UpdateTemplateWithHttpInfo(string templateId, Template body = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->UpdateTemplate");

            var localVarPath = "/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        ///  Update the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> UpdateTemplateAsync(string templateId, Template body = null)
        {
            ApiResponse<Template> localVarResponse = await UpdateTemplateAsyncWithHttpInfo(templateId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the template
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="body">The template object with updated properties (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> UpdateTemplateAsyncWithHttpInfo(string templateId, Template body = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->UpdateTemplate");

            var localVarPath = "/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        ///  Update the content of the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns></returns>
        public void UpdateTemplateContent(string templateId, string lang = null, string description = null, byte[] body = null)
        {
            UpdateTemplateContentWithHttpInfo(templateId, lang, description, body);
        }

        /// <summary>
        ///  Update the content of the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTemplateContentWithHttpInfo(string templateId, string lang = null, string description = null, byte[] body = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->UpdateTemplateContent");

            var localVarPath = "/templates/{templateId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (description != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update the content of the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTemplateContentAsync(string templateId, string lang = null, string description = null, byte[] body = null)
        {
            await UpdateTemplateContentAsyncWithHttpInfo(templateId, lang, description, body);

        }

        /// <summary>
        ///  Update the content of the template for the given language
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template</param>
        /// <param name="lang">The id of the language that is supported by the project, default when none specified (optional)</param>
        /// <param name="description">The description of the changes made (optional)</param>
        /// <param name="body">The content of the template (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTemplateContentAsyncWithHttpInfo(string templateId, string lang = null, string description = null, byte[] body = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling DefaultApi->UpdateTemplateContent");

            var localVarPath = "/templates/{templateId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (description != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>User</returns>
        public User UpdateUser(string user, User body = null)
        {
            ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(user, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UpdateUserWithHttpInfo(string user, User body = null)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->UpdateUser");

            var localVarPath = "/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Update a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync(string user, User body = null)
        {
            ApiResponse<User> localVarResponse = await UpdateUserAsyncWithHttpInfo(user, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Update a single user
        /// </summary>
        /// <exception cref="Xpertdoc.SmartFlows.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The id of the user</param>
        /// <param name="body">The user properties to update (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo(string user, User body = null)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->UpdateUser");

            var localVarPath = "/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (SmartFlows_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

    }
}
