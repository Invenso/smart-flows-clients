/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.api;

import xpertdoc.smartflows.client.ApiException;
import xpertdoc.smartflows.client.model.ArchiveRequest;
import xpertdoc.smartflows.client.model.Asset;
import xpertdoc.smartflows.client.model.Authentication;
import xpertdoc.smartflows.client.model.AuthenticationInfo;
import xpertdoc.smartflows.client.model.BinaryDataHolder;
import xpertdoc.smartflows.client.model.CleanupActionStatus;
import xpertdoc.smartflows.client.model.Connector;
import xpertdoc.smartflows.client.model.ConnectorStage;
import xpertdoc.smartflows.client.model.ConnectorType;
import xpertdoc.smartflows.client.model.CurrencySymbol;
import xpertdoc.smartflows.client.model.Data;
import xpertdoc.smartflows.client.model.Dataset;
import xpertdoc.smartflows.client.model.Datasource;
import xpertdoc.smartflows.client.model.DatasourceLayout;
import xpertdoc.smartflows.client.model.DatasourceType;
import xpertdoc.smartflows.client.model.DependencyTree;
import xpertdoc.smartflows.client.model.DocGenSettings;
import xpertdoc.smartflows.client.model.Document;
import xpertdoc.smartflows.client.model.EntityDefinition;
import xpertdoc.smartflows.client.model.ExpressionFunction;
import xpertdoc.smartflows.client.model.Feature;
import java.io.File;
import xpertdoc.smartflows.client.model.FilterGroupNode;
import xpertdoc.smartflows.client.model.FlatArchive;
import xpertdoc.smartflows.client.model.Flow;
import xpertdoc.smartflows.client.model.FlowContract;
import xpertdoc.smartflows.client.model.FlowExecution;
import xpertdoc.smartflows.client.model.FlowExecutionProgress;
import xpertdoc.smartflows.client.model.FlowStep;
import xpertdoc.smartflows.client.model.FormattedValue;
import xpertdoc.smartflows.client.model.GeneratedDocument;
import xpertdoc.smartflows.client.model.IdWithName;
import xpertdoc.smartflows.client.model.ImportInformation;
import xpertdoc.smartflows.client.model.Language;
import xpertdoc.smartflows.client.model.LanguageDefinition;
import xpertdoc.smartflows.client.model.LicenseInformation;
import xpertdoc.smartflows.client.model.Login;
import xpertdoc.smartflows.client.model.Oauth2Parameters;
import xpertdoc.smartflows.client.model.OperationStatus;
import xpertdoc.smartflows.client.model.ParseExpressionRequest;
import xpertdoc.smartflows.client.model.ParseExpressionResponse;
import xpertdoc.smartflows.client.model.Plugin;
import xpertdoc.smartflows.client.model.Printer;
import xpertdoc.smartflows.client.model.PrinterDefinition;
import xpertdoc.smartflows.client.model.RestoreContext;
import xpertdoc.smartflows.client.model.Role;
import xpertdoc.smartflows.client.model.Settings;
import xpertdoc.smartflows.client.model.Statistics;
import xpertdoc.smartflows.client.model.SyncResult;
import xpertdoc.smartflows.client.model.SystemInfo;
import xpertdoc.smartflows.client.model.TagGroup;
import xpertdoc.smartflows.client.model.Template;
import xpertdoc.smartflows.client.model.TemplateLanguage;
import xpertdoc.smartflows.client.model.User;
import xpertdoc.smartflows.client.model.Version;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Add a &#x60;assets&#x60; object to the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAssetTest() throws ApiException {
        BinaryDataHolder body = null;
        Asset response = api.addAsset(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get info about the login methods
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authenticateGetTest() throws ApiException {
        AuthenticationInfo response = api.authenticateGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Authenticate a user using user/password information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authenticateLoginPostTest() throws ApiException {
        Login body = null;
        Authentication response = api.authenticateLoginPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Authenticate a user using OAuth2 authorization code
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authenticateOauth2PostTest() throws ApiException {
        Oauth2Parameters body = null;
        Authentication response = api.authenticateOauth2Post(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancel an existing execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelFlowExecutionTest() throws ApiException {
        String execution = null;
        FlowExecutionProgress response = api.cancelFlowExecution(execution);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clear all settings and revert to default settings for one settings type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearSubSettingsTest() throws ApiException {
        String settingsType = null;
        api.clearSubSettings(settingsType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Continue an existing execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void continueFlowExecutionTest() throws ApiException {
        String execution = null;
        Object body = null;
        FlowExecutionProgress response = api.continueFlowExecution(execution, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a backup of all objects in the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBackupTest() throws ApiException {
        Boolean includeHistory = null;
        Boolean includeSensitiveData = null;
        File response = api.createBackup(includeHistory, includeSensitiveData);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a &#x60;Connector&#x60; object to the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConnectorTest() throws ApiException {
        Connector body = null;
        Connector response = api.createConnector(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a &#x60;Dataset&#x60; object to the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDatasetTest() throws ApiException {
        Dataset body = null;
        Dataset response = api.createDataset(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add data that conforms to a dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDatasetDataTest() throws ApiException {
        String datasetId = null;
        Data body = null;
        Data response = api.createDatasetData(datasetId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create preview of given template(ref) with given data(ref)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        DocGenSettings body = null;
        List<GeneratedDocument> response = api.createDocument(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create an export file for the given request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExportTest() throws ApiException {
        ArchiveRequest body = null;
        Boolean includeHistory = null;
        Boolean includeSensitiveData = null;
        File response = api.createExport(body, includeHistory, includeSensitiveData);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create an export for the given request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFlatExportTest() throws ApiException {
        ArchiveRequest body = null;
        Boolean includeHistory = null;
        Boolean includeSensitiveData = null;
        FlatArchive response = api.createFlatExport(body, includeHistory, includeSensitiveData);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFlowTest() throws ApiException {
        Flow body = null;
        Flow response = api.createFlow(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new language that is supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLanguageTest() throws ApiException {
        Language body = null;
        Language response = api.createLanguage(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new printer that can be used to print documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPrinterTest() throws ApiException {
        Printer body = null;
        Printer response = api.createPrinter(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a tagGroup object to the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTagGroupTest() throws ApiException {
        TagGroup body = null;
        TagGroup response = api.createTagGroup(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a &#x60;templates&#x60; object to the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemplateTest() throws ApiException {
        Template body = null;
        Template response = api.createTemplate(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        User body = null;
        User response = api.createUser(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single asset object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAssetTest() throws ApiException {
        String assetId = null;
        Boolean deleteInbound = null;
        api.deleteAsset(assetId, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single connector object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConnectorTest() throws ApiException {
        String connectorId = null;
        Boolean deleteInbound = null;
        api.deleteConnector(connectorId, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single data object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDataTest() throws ApiException {
        String dataId = null;
        Boolean deleteInbound = null;
        api.deleteData(dataId, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single dataset object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDatasetTest() throws ApiException {
        String datasetId = null;
        Boolean deleteInbound = null;
        api.deleteDataset(datasetId, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFlowTest() throws ApiException {
        String flow = null;
        api.deleteFlow(flow);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single language. You cannot delete the default language unless it is the last one and force is set to true
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLanguageTest() throws ApiException {
        String language = null;
        Boolean force = null;
        Boolean deleteInbound = null;
        api.deleteLanguage(language, force, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single printer. You cannot delete the default printer unless it is the last one and force is set to true
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePrinterTest() throws ApiException {
        String printer = null;
        Boolean force = null;
        Boolean deleteInbound = null;
        api.deletePrinter(printer, force, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single tag group object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTagGroupTest() throws ApiException {
        String tagGroupId = null;
        Boolean deleteInbound = null;
        api.deleteTagGroup(tagGroupId, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single template object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        String templateId = null;
        Boolean deleteInbound = null;
        api.deleteTemplate(templateId, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove the content for the given language of the given template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplateContentTest() throws ApiException {
        String templateId = null;
        String lang = null;
        Boolean deleteInbound = null;
        api.deleteTemplateContent(templateId, lang, deleteInbound);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a single user. You cannot delete the last admin user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String user = null;
        Boolean force = null;
        api.deleteUser(user, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Import the content from the given archive
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeFlatImportTest() throws ApiException {
        FlatArchive body = null;
        api.executeFlatImport(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Execute a flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeFlowTest() throws ApiException {
        String flowId = null;
        String datasetId = null;
        Object body = null;
        FlowExecutionProgress response = api.executeFlow(flowId, datasetId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Import the content from the given archive
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeImportTest() throws ApiException {
        RestoreContext body = null;
        api.executeImport(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check whether the data with the given id exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void existsDataTest() throws ApiException {
        String dataId = null;
        api.existsData(dataId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all executions for all flows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllFlowExecutionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<FlowExecution> response = api.getAllFlowExecutions(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single asset object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetTest() throws ApiException {
        String assetId = null;
        Boolean includeContent = null;
        Asset response = api.getAsset(assetId, includeContent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return the content of the asset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetContentTest() throws ApiException {
        String assetId = null;
        api.getAssetContent(assetId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all assets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Asset> response = api.getAssets(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single connector object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectorTest() throws ApiException {
        String connectorId = null;
        Connector response = api.getConnector(connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single connectorType object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectorTypeTest() throws ApiException {
        String connectorTypeId = null;
        ConnectorType response = api.getConnectorType(connectorTypeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;ConnectorType&#x60; objects for this project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectorTypesTest() throws ApiException {
        List<ConnectorType> response = api.getConnectorTypes();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;Connector&#x60; objects for this project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectorsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Connector> response = api.getConnectors(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the current user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        User response = api.getCurrentUser();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve information about previously added data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataTest() throws ApiException {
        String dataId = null;
        Data response = api.getData(dataId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the actual data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataContentTest() throws ApiException {
        String dataId = null;
        File response = api.getDataContent(dataId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a sample for the metadata used when generating documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataMetadataTest() throws ApiException {
        String templateName = null;
        String projectName = null;
        String creator = null;
        File response = api.getDataMetadata(templateName, projectName, creator);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the data as sent to the document preview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataPreviewTest() throws ApiException {
        String dataId = null;
        File response = api.getDataPreview(dataId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single dataset object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetTest() throws ApiException {
        String datasetId = null;
        Dataset response = api.getDataset(datasetId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all datas that are linked to the given dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetDatasTest() throws ApiException {
        String datasetId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Data> response = api.getDatasetDatas(datasetId, page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves entity references to the primary entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetEntityReferencesTest() throws ApiException {
        String datasetId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<IdWithName> response = api.getDatasetEntityReferences(datasetId, page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of available entities in the given dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetLayoutTest() throws ApiException {
        Dataset body = null;
        Boolean primaryOnly = null;
        List<EntityDefinition> response = api.getDatasetLayout(body, primaryOnly);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all datasets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Dataset> response = api.getDatasets(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;Datasource&#x60; objects for this project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasourceTest() throws ApiException {
        String datasourceId = null;
        Datasource response = api.getDatasource(datasourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all the fields and relations for the entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasourceEntityLayoutTest() throws ApiException {
        String datasourceId = null;
        String entityName = null;
        EntityDefinition response = api.getDatasourceEntityLayout(datasourceId, entityName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all the fields and relations that are available in the datasource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasourceLayoutTest() throws ApiException {
        String datasourceId = null;
        Boolean full = null;
        DatasourceLayout response = api.getDatasourceLayout(datasourceId, full);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single datasourcetype object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasourceTypeTest() throws ApiException {
        String datasourceTypeId = null;
        DatasourceType response = api.getDatasourceType(datasourceTypeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;DatasourceType&#x60; objects for this project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasourceTypesTest() throws ApiException {
        List<DatasourceType> response = api.getDatasourceTypes();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;Datasource&#x60; objects for this project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasourcesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Datasource> response = api.getDatasources(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the default language for the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefaultLanguageTest() throws ApiException {
        Language response = api.getDefaultLanguage();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the default printer for the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefaultPrinterTest() throws ApiException {
        Printer response = api.getDefaultPrinter();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the dependencies of the object with the given id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDependenciesTest() throws ApiException {
        String objectType = null;
        String objectId = null;
        String direction = null;
        String depth = null;
        DependencyTree response = api.getDependencies(objectType, objectId, direction, depth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single document object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        String documentId = null;
        Document response = api.getDocument(documentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return the content of the document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentContentTest() throws ApiException {
        String documentId = null;
        api.getDocumentContent(documentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Document> response = api.getDocuments(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all the supported template expression functions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpressionFunctionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<ExpressionFunction> response = api.getExpressionFunctions(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves users exposed by the login connector
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalUsersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<User> response = api.getExternalUsers(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all assets using a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredAssetsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<Asset> response = api.getFilteredAssets(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;Connector&#x60; objects for this project using a complex filter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredConnectorsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<Connector> response = api.getFilteredConnectors(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all datasets using a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredDatasetsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<Dataset> response = api.getFilteredDatasets(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;Datasource&#x60; objects for this project using a complex filter 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredDatasourcesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<Datasource> response = api.getFilteredDatasources(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all documents using a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredDocumentsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<Document> response = api.getFilteredDocuments(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all executions for all flows, by a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredFlowExecutionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<FlowExecution> response = api.getFilteredFlowExecutions(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all printers using a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredPrintersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<Printer> response = api.getFilteredPrinters(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all tag groups using a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredTagGroupsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<TagGroup> response = api.getFilteredTagGroups(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all templates using a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredTemplatesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<Template> response = api.getFilteredTemplates(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all users using a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilteredUsersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        FilterGroupNode filter = null;
        List<User> response = api.getFilteredUsers(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a single flow from the server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowTest() throws ApiException {
        String flow = null;
        Flow response = api.getFlow(flow);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all the input and output parameters the flow defines based on the steps it contains and the values that are specified for all parameters in each step
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowContractTest() throws ApiException {
        String flow = null;
        Object body = null;
        FlowContract response = api.getFlowContract(flow, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the state of a single execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowExecutionTest() throws ApiException {
        String execution = null;
        FlowExecution response = api.getFlowExecution(execution);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Find out the progress of an existing execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowExecutionProgressTest() throws ApiException {
        String execution = null;
        Integer timeout = null;
        FlowExecutionProgress response = api.getFlowExecutionProgress(execution, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns statistics for flow executions, by a complex filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowExecutionStatisticsTest() throws ApiException {
        String groupTimeBy = null;
        FilterGroupNode filter = null;
        Statistics response = api.getFlowExecutionStatistics(groupTimeBy, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all executions for this flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowExecutionsTest() throws ApiException {
        String flow = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<FlowExecution> response = api.getFlowExecutions(flow, page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all the settings (in and out) the step requires based on the values for the properties of the step, input is according to schema defining input, output is schemaform
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowSettingsTest() throws ApiException {
        String step = null;
        String property = null;
        Object body = null;
        Object response = api.getFlowSettings(step, property, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get definition of a specific flow step
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowStepTest() throws ApiException {
        String step = null;
        FlowStep response = api.getFlowStep(step);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all the possible flow steps
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowStepsTest() throws ApiException {
        List<FlowStep> response = api.getFlowSteps();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a thumbnail image of the flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowThumbnailTest() throws ApiException {
        String flow = null;
        File response = api.getFlowThumbnail(flow);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all the flows defined on the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Flow> response = api.getFlows(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Format a number, date, time or dateTime using the given pattern
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormattedValueTest() throws ApiException {
        String value = null;
        String pattern = null;
        String type = null;
        String locale = null;
        FormattedValue response = api.getFormattedValue(value, pattern, type, locale);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a single language
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLanguageTest() throws ApiException {
        String language = null;
        Language response = api.getLanguage(language);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all the supported languages
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLanguagesTest() throws ApiException {
        List<Language> response = api.getLanguages();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return the currently installed license
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLicenseTest() throws ApiException {
        LicenseInformation response = api.getLicense();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all datasets defined by plugins
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginDatasetsTest() throws ApiException {
        List<Dataset> response = api.getPluginDatasets();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all Plugins registered in this project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginsTest() throws ApiException {
        List<Plugin> response = api.getPlugins();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a single printer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrinterTest() throws ApiException {
        String printer = null;
        Printer response = api.getPrinter(printer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all printers that can be used to print documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrintersTest() throws ApiException {
        List<Printer> response = api.getPrinters();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all security roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRolesTest() throws ApiException {
        List<Role> response = api.getRoles();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        Settings response = api.getSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get only settings of one type. SettingsType parameter should be one of the properties of the settings object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubSettingsTest() throws ApiException {
        String settingsType = null;
        Object response = api.getSubSettings(settingsType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of supported features
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupportedFeaturesTest() throws ApiException {
        List<Feature> response = api.getSupportedFeatures();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all the currency symbols that are availabled on the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemCurrencySymbolsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<CurrencySymbol> response = api.getSystemCurrencySymbols(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the default language for the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemDefaultLanguageTest() throws ApiException {
        LanguageDefinition response = api.getSystemDefaultLanguage();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get system information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemInfoTest() throws ApiException {
        SystemInfo response = api.getSystemInfo();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all the languages that are availabled on the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemLanguagesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        Boolean formats = null;
        List<LanguageDefinition> response = api.getSystemLanguages(page, size, sort, filter, formats);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a single printerdefinition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemPrinterTest() throws ApiException {
        String printer = null;
        Boolean includeDetails = null;
        PrinterDefinition response = api.getSystemPrinter(printer, includeDetails);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of the available printers on the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemPrintersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        Boolean includeDetails = null;
        List<PrinterDefinition> response = api.getSystemPrinters(page, size, sort, filter, includeDetails);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all the time zones that are availabled on the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemTimeZonesTest() throws ApiException {
        List<String> response = api.getSystemTimeZones();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single tag group object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagGroupTest() throws ApiException {
        String tagGroupId = null;
        TagGroup response = api.getTagGroup(tagGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all tag groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagGroupsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<TagGroup> response = api.getTagGroups(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a single template object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateTest() throws ApiException {
        String templateId = null;
        Template response = api.getTemplate(templateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return the content of the template for the given language.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateContentTest() throws ApiException {
        String templateId = null;
        String lang = null;
        String version = null;
        Boolean includeMeta = null;
        File response = api.getTemplateContent(templateId, lang, version, includeMeta);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Show the history of a given template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateHistoryTest() throws ApiException {
        String templateId = null;
        String lang = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        List<Version> response = api.getTemplateHistory(templateId, lang, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve info about the template for the given language
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateLanguageTest() throws ApiException {
        String templateId = null;
        String lang = null;
        TemplateLanguage response = api.getTemplateLanguage(templateId, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the schema of the fields that are usabel in the template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateSchemaTest() throws ApiException {
        String templateId = null;
        String format = null;
        File response = api.getTemplateSchema(templateId, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplatesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<Template> response = api.getTemplates(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a single user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String user = null;
        User response = api.getUser(user);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String filter = null;
        List<User> response = api.getUsers(page, size, sort, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Install a new license
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void installLicenseTest() throws ApiException {
        byte[] body = null;
        LicenseInformation response = api.installLicense(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Parse the given expression
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void parseExpressionTest() throws ApiException {
        ParseExpressionRequest body = null;
        ParseExpressionResponse response = api.parseExpression(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Can be used for external calls to the flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFlowCallbackTest() throws ApiException {
        String callbackId = null;
        String executionId = null;
        String body = null;
        String response = api.postFlowCallback(callbackId, executionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Given an archive, produce some information that can be used to map items from the archive on items in the target environment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareImportTest() throws ApiException {
        byte[] body = null;
        ImportInformation response = api.prepareImport(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Refresh the state of the connector
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshConnectorTest() throws ApiException {
        String connectorId = null;
        api.refreshConnector(connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Import the content from the given archive
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreBackupTest() throws ApiException {
        byte[] body = null;
        api.restoreBackup(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Run one or all cleanup processes now
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runCleanupTest() throws ApiException {
        String action = null;
        List<CleanupActionStatus> response = api.runCleanup(action);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the default language for the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDefaultLanguageTest() throws ApiException {
        Language body = null;
        Language response = api.setDefaultLanguage(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the default printer for the project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDefaultPrinterTest() throws ApiException {
        Printer body = null;
        Printer response = api.setDefaultPrinter(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the default language for the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSystemDefaultLanguageTest() throws ApiException {
        LanguageDefinition body = null;
        LanguageDefinition response = api.setSystemDefaultLanguage(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Setup the connector - start
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupConnectorTest() throws ApiException {
        String connectorId = null;
        ConnectorStage response = api.setupConnector(connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancel the connector setup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupConnectorCancelTest() throws ApiException {
        String connectorId = null;
        Object body = null;
        Connector response = api.setupConnectorCancel(connectorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Setup the connector - get the current step
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupConnectorCurrentTest() throws ApiException {
        String connectorId = null;
        ConnectorStage response = api.setupConnectorCurrent(connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Finish the connector setup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupConnectorFinishTest() throws ApiException {
        String connectorId = null;
        Object body = null;
        Connector response = api.setupConnectorFinish(connectorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Setup the connector - go to the next step
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupConnectorNextTest() throws ApiException {
        String connectorId = null;
        Object body = null;
        ConnectorStage response = api.setupConnectorNext(connectorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Setup the connector - go to the previous step
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupConnectorPreviousTest() throws ApiException {
        String connectorId = null;
        Object body = null;
        ConnectorStage response = api.setupConnectorPrevious(connectorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Syncs all users with the login connector
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncExternalUsersTest() throws ApiException {
        SyncResult response = api.syncExternalUsers();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Test if the connection to the connector can be made successfully
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testConnectorTest() throws ApiException {
        String connectorId = null;
        OperationStatus response = api.testConnector(connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Send a test document to the printer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testPrinterTest() throws ApiException {
        String printer = null;
        api.testPrinter(printer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the asset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAssetTest() throws ApiException {
        String assetId = null;
        Asset body = null;
        Asset response = api.updateAsset(assetId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the content of the asset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAssetContentTest() throws ApiException {
        String assetId = null;
        byte[] body = null;
        api.updateAssetContent(assetId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the connector
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConnectorTest() throws ApiException {
        String connectorId = null;
        Connector body = null;
        Connector response = api.updateConnector(connectorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDataTest() throws ApiException {
        String dataId = null;
        Data body = null;
        Data response = api.updateData(dataId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDatasetTest() throws ApiException {
        String datasetId = null;
        Dataset body = null;
        Dataset response = api.updateDataset(datasetId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a single flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFlowTest() throws ApiException {
        String flow = null;
        Flow body = null;
        Flow response = api.updateFlow(flow, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a single language
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLanguageTest() throws ApiException {
        String language = null;
        Language body = null;
        Language response = api.updateLanguage(language, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a single printer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePrinterTest() throws ApiException {
        String printer = null;
        Printer body = null;
        Printer response = api.updatePrinter(printer, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update settings of one type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubSettingsTest() throws ApiException {
        String settingsType = null;
        Object body = null;
        Object response = api.updateSubSettings(settingsType, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the tag group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTagGroupTest() throws ApiException {
        String tagGroupId = null;
        TagGroup body = null;
        TagGroup response = api.updateTagGroup(tagGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateTest() throws ApiException {
        String templateId = null;
        Template body = null;
        Template response = api.updateTemplate(templateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the content of the template for the given language
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateContentTest() throws ApiException {
        String templateId = null;
        String lang = null;
        String description = null;
        byte[] body = null;
        api.updateTemplateContent(templateId, lang, description, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a single user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String user = null;
        User body = null;
        User response = api.updateUser(user, body);

        // TODO: test validations
    }
    
}
