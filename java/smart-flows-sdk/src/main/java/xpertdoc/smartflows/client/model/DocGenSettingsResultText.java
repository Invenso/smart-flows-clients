/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * DocGenSettingsResultText
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class DocGenSettingsResultText {
  @SerializedName("encoding")
  private String encoding = "UTF-8";

  @SerializedName("exportHeadersFooters")
  private Boolean exportHeadersFooters = true;

  @SerializedName("paragraphBreak")
  private String paragraphBreak = "  ";

  @SerializedName("preserveTableLayout")
  private Boolean preserveTableLayout = false;

  @SerializedName("simplifyListLabels")
  private Boolean simplifyListLabels = false;

  public DocGenSettingsResultText encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Specifies the encoding to use
   * @return encoding
  **/
  @ApiModelProperty(value = "Specifies the encoding to use")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }

  public DocGenSettingsResultText exportHeadersFooters(Boolean exportHeadersFooters) {
    this.exportHeadersFooters = exportHeadersFooters;
    return this;
  }

   /**
   * Whether to output headers and footers
   * @return exportHeadersFooters
  **/
  @ApiModelProperty(value = "Whether to output headers and footers")
  public Boolean isExportHeadersFooters() {
    return exportHeadersFooters;
  }

  public void setExportHeadersFooters(Boolean exportHeadersFooters) {
    this.exportHeadersFooters = exportHeadersFooters;
  }

  public DocGenSettingsResultText paragraphBreak(String paragraphBreak) {
    this.paragraphBreak = paragraphBreak;
    return this;
  }

   /**
   * The string to use as a paragraph break
   * @return paragraphBreak
  **/
  @ApiModelProperty(value = "The string to use as a paragraph break")
  public String getParagraphBreak() {
    return paragraphBreak;
  }

  public void setParagraphBreak(String paragraphBreak) {
    this.paragraphBreak = paragraphBreak;
  }

  public DocGenSettingsResultText preserveTableLayout(Boolean preserveTableLayout) {
    this.preserveTableLayout = preserveTableLayout;
    return this;
  }

   /**
   * Attempt to preserve layout of tables
   * @return preserveTableLayout
  **/
  @ApiModelProperty(value = "Attempt to preserve layout of tables")
  public Boolean isPreserveTableLayout() {
    return preserveTableLayout;
  }

  public void setPreserveTableLayout(Boolean preserveTableLayout) {
    this.preserveTableLayout = preserveTableLayout;
  }

  public DocGenSettingsResultText simplifyListLabels(Boolean simplifyListLabels) {
    this.simplifyListLabels = simplifyListLabels;
    return this;
  }

   /**
   * Simplify list labels in case of complex label formatting not being adequately represented by plain text. If set to true, numbered list labels are written in simple numeric format and itemized list labels as simple ASCII characters
   * @return simplifyListLabels
  **/
  @ApiModelProperty(value = "Simplify list labels in case of complex label formatting not being adequately represented by plain text. If set to true, numbered list labels are written in simple numeric format and itemized list labels as simple ASCII characters")
  public Boolean isSimplifyListLabels() {
    return simplifyListLabels;
  }

  public void setSimplifyListLabels(Boolean simplifyListLabels) {
    this.simplifyListLabels = simplifyListLabels;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocGenSettingsResultText docGenSettingsResultText = (DocGenSettingsResultText) o;
    return Objects.equals(this.encoding, docGenSettingsResultText.encoding) &&
        Objects.equals(this.exportHeadersFooters, docGenSettingsResultText.exportHeadersFooters) &&
        Objects.equals(this.paragraphBreak, docGenSettingsResultText.paragraphBreak) &&
        Objects.equals(this.preserveTableLayout, docGenSettingsResultText.preserveTableLayout) &&
        Objects.equals(this.simplifyListLabels, docGenSettingsResultText.simplifyListLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encoding, exportHeadersFooters, paragraphBreak, preserveTableLayout, simplifyListLabels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocGenSettingsResultText {\n");
    
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    exportHeadersFooters: ").append(toIndentedString(exportHeadersFooters)).append("\n");
    sb.append("    paragraphBreak: ").append(toIndentedString(paragraphBreak)).append("\n");
    sb.append("    preserveTableLayout: ").append(toIndentedString(preserveTableLayout)).append("\n");
    sb.append("    simplifyListLabels: ").append(toIndentedString(simplifyListLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

