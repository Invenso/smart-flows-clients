/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * ExpressionFunctionArguments
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class ExpressionFunctionArguments {
  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NOTSPECIFIED("notSpecified"),
    
    PERIOD("period"),
    
    DATE("date"),
    
    TIME("time"),
    
    DATETIME("dateTime"),
    
    NUMBER("number"),
    
    TEXT("text"),
    
    BOOLEAN("boolean"),
    
    PATTERN("pattern"),
    
    DATEPATTERN("datePattern"),
    
    TIMEPATTERN("timePattern"),
    
    DATETIMEPATTERN("dateTimePattern"),
    
    TEXTWITHEXTENDEDCHARACTERS("textWithExtendedCharacters"),
    
    REGEX("regEx"),
    
    REGEXSUBSTITUTION("regExSubstitution"),
    
    LOCALE("locale"),
    
    DURATIONPATTERN("durationPattern"),
    
    DECIMALPATTERN("decimalPattern");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = TypeEnum.NOTSPECIFIED;

  @SerializedName("optional")
  private Boolean optional = null;

  @SerializedName("helpLink")
  private String helpLink = null;

  @SerializedName("defaultValue")
  private String defaultValue = null;

  public ExpressionFunctionArguments name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ExpressionFunctionArguments type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ExpressionFunctionArguments optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

   /**
   * Get optional
   * @return optional
  **/
  @ApiModelProperty(value = "")
  public Boolean isOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }

  public ExpressionFunctionArguments helpLink(String helpLink) {
    this.helpLink = helpLink;
    return this;
  }

   /**
   * Get helpLink
   * @return helpLink
  **/
  @ApiModelProperty(value = "")
  public String getHelpLink() {
    return helpLink;
  }

  public void setHelpLink(String helpLink) {
    this.helpLink = helpLink;
  }

  public ExpressionFunctionArguments defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @ApiModelProperty(value = "")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressionFunctionArguments expressionFunctionArguments = (ExpressionFunctionArguments) o;
    return Objects.equals(this.name, expressionFunctionArguments.name) &&
        Objects.equals(this.type, expressionFunctionArguments.type) &&
        Objects.equals(this.optional, expressionFunctionArguments.optional) &&
        Objects.equals(this.helpLink, expressionFunctionArguments.helpLink) &&
        Objects.equals(this.defaultValue, expressionFunctionArguments.defaultValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, optional, helpLink, defaultValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressionFunctionArguments {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    helpLink: ").append(toIndentedString(helpLink)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

