/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * DocGenSettingsResultImage
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class DocGenSettingsResultImage {
  @SerializedName("pageing")
  private DocGenSettingsResultImagePageing pageing = null;

  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    PNG("png"),
    
    JPEG("jpeg"),
    
    SVG("svg"),
    
    BMP("bmp"),
    
    GIF("gif"),
    
    EMF("emf");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("format")
  private FormatEnum format = FormatEnum.PNG;

  @SerializedName("antiAliasing")
  private Boolean antiAliasing = true;

  /**
   * How colors are rendered. normal: render with unmodified colors. Grayscale: render with colors in a range of gray shades from white to black
   */
  @JsonAdapter(ColorModeEnum.Adapter.class)
  public enum ColorModeEnum {
    NORMAL("normal"),
    
    BLACKANDWHITE("blackAndWhite"),
    
    GRAYSCALE("grayscale");

    private String value;

    ColorModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorModeEnum fromValue(String text) {
      for (ColorModeEnum b : ColorModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ColorModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ColorModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("colorMode")
  private ColorModeEnum colorMode = ColorModeEnum.NORMAL;

  @SerializedName("resolution")
  private Integer resolution = null;

  @SerializedName("paperColor")
  private String paperColor = "white";

  @SerializedName("scale")
  private BigDecimal scale = null;

  @SerializedName("jpegQuality")
  private Integer jpegQuality = null;

  public DocGenSettingsResultImage pageing(DocGenSettingsResultImagePageing pageing) {
    this.pageing = pageing;
    return this;
  }

   /**
   * Get pageing
   * @return pageing
  **/
  @ApiModelProperty(value = "")
  public DocGenSettingsResultImagePageing getPageing() {
    return pageing;
  }

  public void setPageing(DocGenSettingsResultImagePageing pageing) {
    this.pageing = pageing;
  }

  public DocGenSettingsResultImage format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @ApiModelProperty(value = "")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public DocGenSettingsResultImage antiAliasing(Boolean antiAliasing) {
    this.antiAliasing = antiAliasing;
    return this;
  }

   /**
   * Whether or not to use anti-aliasing for rendering
   * @return antiAliasing
  **/
  @ApiModelProperty(value = "Whether or not to use anti-aliasing for rendering")
  public Boolean isAntiAliasing() {
    return antiAliasing;
  }

  public void setAntiAliasing(Boolean antiAliasing) {
    this.antiAliasing = antiAliasing;
  }

  public DocGenSettingsResultImage colorMode(ColorModeEnum colorMode) {
    this.colorMode = colorMode;
    return this;
  }

   /**
   * How colors are rendered. normal: render with unmodified colors. Grayscale: render with colors in a range of gray shades from white to black
   * @return colorMode
  **/
  @ApiModelProperty(value = "How colors are rendered. normal: render with unmodified colors. Grayscale: render with colors in a range of gray shades from white to black")
  public ColorModeEnum getColorMode() {
    return colorMode;
  }

  public void setColorMode(ColorModeEnum colorMode) {
    this.colorMode = colorMode;
  }

  public DocGenSettingsResultImage resolution(Integer resolution) {
    this.resolution = resolution;
    return this;
  }

   /**
   * Specifies the output resolution for images in dpi
   * minimum: 72
   * @return resolution
  **/
  @ApiModelProperty(value = "Specifies the output resolution for images in dpi")
  public Integer getResolution() {
    return resolution;
  }

  public void setResolution(Integer resolution) {
    this.resolution = resolution;
  }

  public DocGenSettingsResultImage paperColor(String paperColor) {
    this.paperColor = paperColor;
    return this;
  }

   /**
   * The background (paper) color for the generated images. When rendering pages of a document that specifies its own background color, then the document background color will override the color specified by this property
   * @return paperColor
  **/
  @ApiModelProperty(value = "The background (paper) color for the generated images. When rendering pages of a document that specifies its own background color, then the document background color will override the color specified by this property")
  public String getPaperColor() {
    return paperColor;
  }

  public void setPaperColor(String paperColor) {
    this.paperColor = paperColor;
  }

  public DocGenSettingsResultImage scale(BigDecimal scale) {
    this.scale = scale;
    return this;
  }

   /**
   * The zoom factor for the generated images
   * @return scale
  **/
  @ApiModelProperty(value = "The zoom factor for the generated images")
  public BigDecimal getScale() {
    return scale;
  }

  public void setScale(BigDecimal scale) {
    this.scale = scale;
  }

  public DocGenSettingsResultImage jpegQuality(Integer jpegQuality) {
    this.jpegQuality = jpegQuality;
    return this;
  }

   /**
   * The quality of JPEG images. 0 means worst quality but maximum compression and 100 means best quality but minimum compression. If quality is 100, it means no compression
   * minimum: 0
   * maximum: 100
   * @return jpegQuality
  **/
  @ApiModelProperty(value = "The quality of JPEG images. 0 means worst quality but maximum compression and 100 means best quality but minimum compression. If quality is 100, it means no compression")
  public Integer getJpegQuality() {
    return jpegQuality;
  }

  public void setJpegQuality(Integer jpegQuality) {
    this.jpegQuality = jpegQuality;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocGenSettingsResultImage docGenSettingsResultImage = (DocGenSettingsResultImage) o;
    return Objects.equals(this.pageing, docGenSettingsResultImage.pageing) &&
        Objects.equals(this.format, docGenSettingsResultImage.format) &&
        Objects.equals(this.antiAliasing, docGenSettingsResultImage.antiAliasing) &&
        Objects.equals(this.colorMode, docGenSettingsResultImage.colorMode) &&
        Objects.equals(this.resolution, docGenSettingsResultImage.resolution) &&
        Objects.equals(this.paperColor, docGenSettingsResultImage.paperColor) &&
        Objects.equals(this.scale, docGenSettingsResultImage.scale) &&
        Objects.equals(this.jpegQuality, docGenSettingsResultImage.jpegQuality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageing, format, antiAliasing, colorMode, resolution, paperColor, scale, jpegQuality);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocGenSettingsResultImage {\n");
    
    sb.append("    pageing: ").append(toIndentedString(pageing)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    antiAliasing: ").append(toIndentedString(antiAliasing)).append("\n");
    sb.append("    colorMode: ").append(toIndentedString(colorMode)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    paperColor: ").append(toIndentedString(paperColor)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    jpegQuality: ").append(toIndentedString(jpegQuality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

