/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * DatasetContent
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class DatasetContent {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STANDARD("standard"),
    
    CUSTOM("custom"),
    
    SCHEMA("schema"),
    
    EXTENDED("extended");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("standardContent")
  private DatasetStandardContent standardContent = null;

  @SerializedName("customContent")
  private DatasetCustomContent customContent = null;

  @SerializedName("schemaContent")
  private DatasetSchemaContent schemaContent = null;

  @SerializedName("extendedContent")
  private DatasetExtendedContent extendedContent = null;

  public DatasetContent type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public DatasetContent standardContent(DatasetStandardContent standardContent) {
    this.standardContent = standardContent;
    return this;
  }

   /**
   * Get standardContent
   * @return standardContent
  **/
  @ApiModelProperty(value = "")
  public DatasetStandardContent getStandardContent() {
    return standardContent;
  }

  public void setStandardContent(DatasetStandardContent standardContent) {
    this.standardContent = standardContent;
  }

  public DatasetContent customContent(DatasetCustomContent customContent) {
    this.customContent = customContent;
    return this;
  }

   /**
   * Get customContent
   * @return customContent
  **/
  @ApiModelProperty(value = "")
  public DatasetCustomContent getCustomContent() {
    return customContent;
  }

  public void setCustomContent(DatasetCustomContent customContent) {
    this.customContent = customContent;
  }

  public DatasetContent schemaContent(DatasetSchemaContent schemaContent) {
    this.schemaContent = schemaContent;
    return this;
  }

   /**
   * Get schemaContent
   * @return schemaContent
  **/
  @ApiModelProperty(value = "")
  public DatasetSchemaContent getSchemaContent() {
    return schemaContent;
  }

  public void setSchemaContent(DatasetSchemaContent schemaContent) {
    this.schemaContent = schemaContent;
  }

  public DatasetContent extendedContent(DatasetExtendedContent extendedContent) {
    this.extendedContent = extendedContent;
    return this;
  }

   /**
   * Get extendedContent
   * @return extendedContent
  **/
  @ApiModelProperty(value = "")
  public DatasetExtendedContent getExtendedContent() {
    return extendedContent;
  }

  public void setExtendedContent(DatasetExtendedContent extendedContent) {
    this.extendedContent = extendedContent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetContent datasetContent = (DatasetContent) o;
    return Objects.equals(this.type, datasetContent.type) &&
        Objects.equals(this.standardContent, datasetContent.standardContent) &&
        Objects.equals(this.customContent, datasetContent.customContent) &&
        Objects.equals(this.schemaContent, datasetContent.schemaContent) &&
        Objects.equals(this.extendedContent, datasetContent.extendedContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, standardContent, customContent, schemaContent, extendedContent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetContent {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    standardContent: ").append(toIndentedString(standardContent)).append("\n");
    sb.append("    customContent: ").append(toIndentedString(customContent)).append("\n");
    sb.append("    schemaContent: ").append(toIndentedString(schemaContent)).append("\n");
    sb.append("    extendedContent: ").append(toIndentedString(extendedContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

