/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * DatasetSchemaContent
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class DatasetSchemaContent {
  @SerializedName("wrapperElementName")
  private String wrapperElementName = null;

  @SerializedName("primaryEntity")
  private String primaryEntity = null;

  @SerializedName("schemaContent")
  private byte[] schemaContent = null;

  /**
   * Gets or Sets schemaType
   */
  @JsonAdapter(SchemaTypeEnum.Adapter.class)
  public enum SchemaTypeEnum {
    XSD("xsd");

    private String value;

    SchemaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaTypeEnum fromValue(String text) {
      for (SchemaTypeEnum b : SchemaTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SchemaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SchemaTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("schemaType")
  private SchemaTypeEnum schemaType = null;

  public DatasetSchemaContent wrapperElementName(String wrapperElementName) {
    this.wrapperElementName = wrapperElementName;
    return this;
  }

   /**
   * Get wrapperElementName
   * @return wrapperElementName
  **/
  @ApiModelProperty(value = "")
  public String getWrapperElementName() {
    return wrapperElementName;
  }

  public void setWrapperElementName(String wrapperElementName) {
    this.wrapperElementName = wrapperElementName;
  }

  public DatasetSchemaContent primaryEntity(String primaryEntity) {
    this.primaryEntity = primaryEntity;
    return this;
  }

   /**
   * Get primaryEntity
   * @return primaryEntity
  **/
  @ApiModelProperty(value = "")
  public String getPrimaryEntity() {
    return primaryEntity;
  }

  public void setPrimaryEntity(String primaryEntity) {
    this.primaryEntity = primaryEntity;
  }

  public DatasetSchemaContent schemaContent(byte[] schemaContent) {
    this.schemaContent = schemaContent;
    return this;
  }

   /**
   * Get schemaContent
   * @return schemaContent
  **/
  @ApiModelProperty(value = "")
  public byte[] getSchemaContent() {
    return schemaContent;
  }

  public void setSchemaContent(byte[] schemaContent) {
    this.schemaContent = schemaContent;
  }

  public DatasetSchemaContent schemaType(SchemaTypeEnum schemaType) {
    this.schemaType = schemaType;
    return this;
  }

   /**
   * Get schemaType
   * @return schemaType
  **/
  @ApiModelProperty(value = "")
  public SchemaTypeEnum getSchemaType() {
    return schemaType;
  }

  public void setSchemaType(SchemaTypeEnum schemaType) {
    this.schemaType = schemaType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetSchemaContent datasetSchemaContent = (DatasetSchemaContent) o;
    return Objects.equals(this.wrapperElementName, datasetSchemaContent.wrapperElementName) &&
        Objects.equals(this.primaryEntity, datasetSchemaContent.primaryEntity) &&
        Objects.equals(this.schemaContent, datasetSchemaContent.schemaContent) &&
        Objects.equals(this.schemaType, datasetSchemaContent.schemaType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(wrapperElementName, primaryEntity, schemaContent, schemaType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetSchemaContent {\n");
    
    sb.append("    wrapperElementName: ").append(toIndentedString(wrapperElementName)).append("\n");
    sb.append("    primaryEntity: ").append(toIndentedString(primaryEntity)).append("\n");
    sb.append("    schemaContent: ").append(toIndentedString(schemaContent)).append("\n");
    sb.append("    schemaType: ").append(toIndentedString(schemaType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

