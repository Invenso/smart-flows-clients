/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * FlowStep
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class FlowStep {
  @SerializedName("id")
  private String id = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("iconClass")
  private String iconClass = null;

  @SerializedName("group")
  private String group = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATA("data"),
    
    GENDOC("gendoc"),
    
    CONVERT("convert"),
    
    POSTPROCESS("postprocess");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("primaryParameters")
  private List<String> primaryParameters = null;

  @SerializedName("inputSchema")
  private Object inputSchema = null;

  @SerializedName("inputForm")
  private List<Object> inputForm = null;

  @SerializedName("outputId")
  private String outputId = null;

  @SerializedName("externalOutputParameters")
  private List<String> externalOutputParameters = null;

  @SerializedName("outputSchema")
  private Object outputSchema = null;

  public FlowStep id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public FlowStep displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public FlowStep description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public FlowStep iconClass(String iconClass) {
    this.iconClass = iconClass;
    return this;
  }

   /**
   * Get iconClass
   * @return iconClass
  **/
  @ApiModelProperty(value = "")
  public String getIconClass() {
    return iconClass;
  }

  public void setIconClass(String iconClass) {
    this.iconClass = iconClass;
  }

  public FlowStep group(String group) {
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @ApiModelProperty(value = "")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public FlowStep type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public FlowStep primaryParameters(List<String> primaryParameters) {
    this.primaryParameters = primaryParameters;
    return this;
  }

  public FlowStep addPrimaryParametersItem(String primaryParametersItem) {
    if (this.primaryParameters == null) {
      this.primaryParameters = new ArrayList<String>();
    }
    this.primaryParameters.add(primaryParametersItem);
    return this;
  }

   /**
   * Get primaryParameters
   * @return primaryParameters
  **/
  @ApiModelProperty(value = "")
  public List<String> getPrimaryParameters() {
    return primaryParameters;
  }

  public void setPrimaryParameters(List<String> primaryParameters) {
    this.primaryParameters = primaryParameters;
  }

  public FlowStep inputSchema(Object inputSchema) {
    this.inputSchema = inputSchema;
    return this;
  }

   /**
   * Get inputSchema
   * @return inputSchema
  **/
  @ApiModelProperty(value = "")
  public Object getInputSchema() {
    return inputSchema;
  }

  public void setInputSchema(Object inputSchema) {
    this.inputSchema = inputSchema;
  }

  public FlowStep inputForm(List<Object> inputForm) {
    this.inputForm = inputForm;
    return this;
  }

  public FlowStep addInputFormItem(Object inputFormItem) {
    if (this.inputForm == null) {
      this.inputForm = new ArrayList<Object>();
    }
    this.inputForm.add(inputFormItem);
    return this;
  }

   /**
   * Get inputForm
   * @return inputForm
  **/
  @ApiModelProperty(value = "")
  public List<Object> getInputForm() {
    return inputForm;
  }

  public void setInputForm(List<Object> inputForm) {
    this.inputForm = inputForm;
  }

  public FlowStep outputId(String outputId) {
    this.outputId = outputId;
    return this;
  }

   /**
   * Get outputId
   * @return outputId
  **/
  @ApiModelProperty(value = "")
  public String getOutputId() {
    return outputId;
  }

  public void setOutputId(String outputId) {
    this.outputId = outputId;
  }

  public FlowStep externalOutputParameters(List<String> externalOutputParameters) {
    this.externalOutputParameters = externalOutputParameters;
    return this;
  }

  public FlowStep addExternalOutputParametersItem(String externalOutputParametersItem) {
    if (this.externalOutputParameters == null) {
      this.externalOutputParameters = new ArrayList<String>();
    }
    this.externalOutputParameters.add(externalOutputParametersItem);
    return this;
  }

   /**
   * Get externalOutputParameters
   * @return externalOutputParameters
  **/
  @ApiModelProperty(value = "")
  public List<String> getExternalOutputParameters() {
    return externalOutputParameters;
  }

  public void setExternalOutputParameters(List<String> externalOutputParameters) {
    this.externalOutputParameters = externalOutputParameters;
  }

  public FlowStep outputSchema(Object outputSchema) {
    this.outputSchema = outputSchema;
    return this;
  }

   /**
   * Get outputSchema
   * @return outputSchema
  **/
  @ApiModelProperty(value = "")
  public Object getOutputSchema() {
    return outputSchema;
  }

  public void setOutputSchema(Object outputSchema) {
    this.outputSchema = outputSchema;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowStep flowStep = (FlowStep) o;
    return Objects.equals(this.id, flowStep.id) &&
        Objects.equals(this.displayName, flowStep.displayName) &&
        Objects.equals(this.description, flowStep.description) &&
        Objects.equals(this.iconClass, flowStep.iconClass) &&
        Objects.equals(this.group, flowStep.group) &&
        Objects.equals(this.type, flowStep.type) &&
        Objects.equals(this.primaryParameters, flowStep.primaryParameters) &&
        Objects.equals(this.inputSchema, flowStep.inputSchema) &&
        Objects.equals(this.inputForm, flowStep.inputForm) &&
        Objects.equals(this.outputId, flowStep.outputId) &&
        Objects.equals(this.externalOutputParameters, flowStep.externalOutputParameters) &&
        Objects.equals(this.outputSchema, flowStep.outputSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, description, iconClass, group, type, primaryParameters, inputSchema, inputForm, outputId, externalOutputParameters, outputSchema);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowStep {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    iconClass: ").append(toIndentedString(iconClass)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    primaryParameters: ").append(toIndentedString(primaryParameters)).append("\n");
    sb.append("    inputSchema: ").append(toIndentedString(inputSchema)).append("\n");
    sb.append("    inputForm: ").append(toIndentedString(inputForm)).append("\n");
    sb.append("    outputId: ").append(toIndentedString(outputId)).append("\n");
    sb.append("    externalOutputParameters: ").append(toIndentedString(externalOutputParameters)).append("\n");
    sb.append("    outputSchema: ").append(toIndentedString(outputSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

