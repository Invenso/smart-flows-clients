/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * PrinterDefinitionPrinterInfoJps
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class PrinterDefinitionPrinterInfoJps {
  /**
   * Gets or Sets supported
   */
  @JsonAdapter(SupportedEnum.Adapter.class)
  public enum SupportedEnum {
    COLLATE("collate"),
    
    DUPLEXINGTWOSIDEDLONGEDGE("duplexingTwoSidedLongEdge"),
    
    DUPLEXINGTWOSIDEDSHORTEDGE("duplexingTwoSidedShortEdge"),
    
    CHROMACITYCOLOR("chromacityColor"),
    
    ORIENTATION("orientation");

    private String value;

    SupportedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedEnum fromValue(String text) {
      for (SupportedEnum b : SupportedEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SupportedEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("supported")
  private List<SupportedEnum> supported = null;

  @SerializedName("paperSources")
  private List<PrinterDefinitionPrinterInfoJpsPaperSources> paperSources = null;

  @SerializedName("paperSizes")
  private List<String> paperSizes = null;

  public PrinterDefinitionPrinterInfoJps supported(List<SupportedEnum> supported) {
    this.supported = supported;
    return this;
  }

  public PrinterDefinitionPrinterInfoJps addSupportedItem(SupportedEnum supportedItem) {
    if (this.supported == null) {
      this.supported = new ArrayList<SupportedEnum>();
    }
    this.supported.add(supportedItem);
    return this;
  }

   /**
   * Get supported
   * @return supported
  **/
  @ApiModelProperty(value = "")
  public List<SupportedEnum> getSupported() {
    return supported;
  }

  public void setSupported(List<SupportedEnum> supported) {
    this.supported = supported;
  }

  public PrinterDefinitionPrinterInfoJps paperSources(List<PrinterDefinitionPrinterInfoJpsPaperSources> paperSources) {
    this.paperSources = paperSources;
    return this;
  }

  public PrinterDefinitionPrinterInfoJps addPaperSourcesItem(PrinterDefinitionPrinterInfoJpsPaperSources paperSourcesItem) {
    if (this.paperSources == null) {
      this.paperSources = new ArrayList<PrinterDefinitionPrinterInfoJpsPaperSources>();
    }
    this.paperSources.add(paperSourcesItem);
    return this;
  }

   /**
   * Get paperSources
   * @return paperSources
  **/
  @ApiModelProperty(value = "")
  public List<PrinterDefinitionPrinterInfoJpsPaperSources> getPaperSources() {
    return paperSources;
  }

  public void setPaperSources(List<PrinterDefinitionPrinterInfoJpsPaperSources> paperSources) {
    this.paperSources = paperSources;
  }

  public PrinterDefinitionPrinterInfoJps paperSizes(List<String> paperSizes) {
    this.paperSizes = paperSizes;
    return this;
  }

  public PrinterDefinitionPrinterInfoJps addPaperSizesItem(String paperSizesItem) {
    if (this.paperSizes == null) {
      this.paperSizes = new ArrayList<String>();
    }
    this.paperSizes.add(paperSizesItem);
    return this;
  }

   /**
   * Get paperSizes
   * @return paperSizes
  **/
  @ApiModelProperty(value = "")
  public List<String> getPaperSizes() {
    return paperSizes;
  }

  public void setPaperSizes(List<String> paperSizes) {
    this.paperSizes = paperSizes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrinterDefinitionPrinterInfoJps printerDefinitionPrinterInfoJps = (PrinterDefinitionPrinterInfoJps) o;
    return Objects.equals(this.supported, printerDefinitionPrinterInfoJps.supported) &&
        Objects.equals(this.paperSources, printerDefinitionPrinterInfoJps.paperSources) &&
        Objects.equals(this.paperSizes, printerDefinitionPrinterInfoJps.paperSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supported, paperSources, paperSizes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrinterDefinitionPrinterInfoJps {\n");
    
    sb.append("    supported: ").append(toIndentedString(supported)).append("\n");
    sb.append("    paperSources: ").append(toIndentedString(paperSources)).append("\n");
    sb.append("    paperSizes: ").append(toIndentedString(paperSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

