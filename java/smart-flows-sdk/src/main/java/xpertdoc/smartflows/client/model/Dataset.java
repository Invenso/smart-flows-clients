/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Dataset
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class Dataset {
  @SerializedName("id")
  private String id = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("createdAt")
  private String createdAt = null;

  @SerializedName("createdBy")
  private IdWithName createdBy = null;

  @SerializedName("modifiedAt")
  private String modifiedAt = null;

  @SerializedName("modifiedBy")
  private IdWithName modifiedBy = null;

  @SerializedName("datasources")
  private List<IdWithName> datasources = null;

  @SerializedName("tagGroups")
  private List<TagGroupRef> tagGroups = null;

  @SerializedName("content")
  private DatasetContent content = null;

  @SerializedName("layout")
  private List<EntityReference> layout = null;

  /**
   * Gets or Sets purpose
   */
  @JsonAdapter(PurposeEnum.Adapter.class)
  public enum PurposeEnum {
    TEMPLATEDESIGN("templateDesign"),
    
    FLOWINPUT("flowInput");

    private String value;

    PurposeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PurposeEnum fromValue(String text) {
      for (PurposeEnum b : PurposeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PurposeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PurposeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PurposeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PurposeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("purpose")
  private List<PurposeEnum> purpose = null;

  @SerializedName("readOnly")
  private Boolean readOnly = false;

  public Dataset id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Dataset displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public Dataset description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Dataset createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @ApiModelProperty(value = "")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public Dataset createdBy(IdWithName createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @ApiModelProperty(value = "")
  public IdWithName getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(IdWithName createdBy) {
    this.createdBy = createdBy;
  }

  public Dataset modifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Get modifiedAt
   * @return modifiedAt
  **/
  @ApiModelProperty(value = "")
  public String getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public Dataset modifiedBy(IdWithName modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @ApiModelProperty(value = "")
  public IdWithName getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(IdWithName modifiedBy) {
    this.modifiedBy = modifiedBy;
  }

  public Dataset datasources(List<IdWithName> datasources) {
    this.datasources = datasources;
    return this;
  }

  public Dataset addDatasourcesItem(IdWithName datasourcesItem) {
    if (this.datasources == null) {
      this.datasources = new ArrayList<IdWithName>();
    }
    this.datasources.add(datasourcesItem);
    return this;
  }

   /**
   * Get datasources
   * @return datasources
  **/
  @ApiModelProperty(value = "")
  public List<IdWithName> getDatasources() {
    return datasources;
  }

  public void setDatasources(List<IdWithName> datasources) {
    this.datasources = datasources;
  }

  public Dataset tagGroups(List<TagGroupRef> tagGroups) {
    this.tagGroups = tagGroups;
    return this;
  }

  public Dataset addTagGroupsItem(TagGroupRef tagGroupsItem) {
    if (this.tagGroups == null) {
      this.tagGroups = new ArrayList<TagGroupRef>();
    }
    this.tagGroups.add(tagGroupsItem);
    return this;
  }

   /**
   * Get tagGroups
   * @return tagGroups
  **/
  @ApiModelProperty(value = "")
  public List<TagGroupRef> getTagGroups() {
    return tagGroups;
  }

  public void setTagGroups(List<TagGroupRef> tagGroups) {
    this.tagGroups = tagGroups;
  }

  public Dataset content(DatasetContent content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @ApiModelProperty(value = "")
  public DatasetContent getContent() {
    return content;
  }

  public void setContent(DatasetContent content) {
    this.content = content;
  }

  public Dataset layout(List<EntityReference> layout) {
    this.layout = layout;
    return this;
  }

  public Dataset addLayoutItem(EntityReference layoutItem) {
    if (this.layout == null) {
      this.layout = new ArrayList<EntityReference>();
    }
    this.layout.add(layoutItem);
    return this;
  }

   /**
   * Get layout
   * @return layout
  **/
  @ApiModelProperty(value = "")
  public List<EntityReference> getLayout() {
    return layout;
  }

  public void setLayout(List<EntityReference> layout) {
    this.layout = layout;
  }

  public Dataset purpose(List<PurposeEnum> purpose) {
    this.purpose = purpose;
    return this;
  }

  public Dataset addPurposeItem(PurposeEnum purposeItem) {
    if (this.purpose == null) {
      this.purpose = new ArrayList<PurposeEnum>();
    }
    this.purpose.add(purposeItem);
    return this;
  }

   /**
   * Get purpose
   * @return purpose
  **/
  @ApiModelProperty(value = "")
  public List<PurposeEnum> getPurpose() {
    return purpose;
  }

  public void setPurpose(List<PurposeEnum> purpose) {
    this.purpose = purpose;
  }

  public Dataset readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @ApiModelProperty(value = "")
  public Boolean isReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dataset dataset = (Dataset) o;
    return Objects.equals(this.id, dataset.id) &&
        Objects.equals(this.displayName, dataset.displayName) &&
        Objects.equals(this.description, dataset.description) &&
        Objects.equals(this.createdAt, dataset.createdAt) &&
        Objects.equals(this.createdBy, dataset.createdBy) &&
        Objects.equals(this.modifiedAt, dataset.modifiedAt) &&
        Objects.equals(this.modifiedBy, dataset.modifiedBy) &&
        Objects.equals(this.datasources, dataset.datasources) &&
        Objects.equals(this.tagGroups, dataset.tagGroups) &&
        Objects.equals(this.content, dataset.content) &&
        Objects.equals(this.layout, dataset.layout) &&
        Objects.equals(this.purpose, dataset.purpose) &&
        Objects.equals(this.readOnly, dataset.readOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, description, createdAt, createdBy, modifiedAt, modifiedBy, datasources, tagGroups, content, layout, purpose, readOnly);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataset {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    datasources: ").append(toIndentedString(datasources)).append("\n");
    sb.append("    tagGroups: ").append(toIndentedString(tagGroups)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

