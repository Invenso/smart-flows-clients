/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * GcpPrintProps
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class GcpPrintProps {
  /**
   * Gets or Sets duplexing
   */
  @JsonAdapter(DuplexingEnum.Adapter.class)
  public enum DuplexingEnum {
    DEFAULT("default"),
    
    NODUPLEX("noDuplex"),
    
    LONGEDGE("longEdge"),
    
    SHORTEDGE("shortEdge");

    private String value;

    DuplexingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DuplexingEnum fromValue(String text) {
      for (DuplexingEnum b : DuplexingEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DuplexingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplexingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DuplexingEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DuplexingEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("duplexing")
  private DuplexingEnum duplexing = null;

  /**
   * Gets or Sets collate
   */
  @JsonAdapter(CollateEnum.Adapter.class)
  public enum CollateEnum {
    DEFAULT("default"),
    
    TRUE("true"),
    
    FALSE("false");

    private String value;

    CollateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CollateEnum fromValue(String text) {
      for (CollateEnum b : CollateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CollateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CollateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CollateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CollateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("collate")
  private CollateEnum collate = null;

  /**
   * Gets or Sets color
   */
  @JsonAdapter(ColorEnum.Adapter.class)
  public enum ColorEnum {
    DEFAULT("default"),
    
    AUTO("auto"),
    
    STANDARDCOLOR("standardColor"),
    
    STANDARDMONOCHROME("standardMonochrome"),
    
    CUSTOMCOLOR("customColor"),
    
    CUSTOMMONOCHROME("customMonochrome");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorEnum fromValue(String text) {
      for (ColorEnum b : ColorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ColorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("color")
  private ColorEnum color = null;

  /**
   * Gets or Sets orientation
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    DEFAULT("default"),
    
    AUTO("auto"),
    
    PORTRAIT("portrait"),
    
    LANDSCAPE("landscape");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String text) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrientationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("orientation")
  private OrientationEnum orientation = null;

  @SerializedName("vendorCapabilities")
  private List<Map<String, String>> vendorCapabilities = null;

  public GcpPrintProps duplexing(DuplexingEnum duplexing) {
    this.duplexing = duplexing;
    return this;
  }

   /**
   * Get duplexing
   * @return duplexing
  **/
  @ApiModelProperty(value = "")
  public DuplexingEnum getDuplexing() {
    return duplexing;
  }

  public void setDuplexing(DuplexingEnum duplexing) {
    this.duplexing = duplexing;
  }

  public GcpPrintProps collate(CollateEnum collate) {
    this.collate = collate;
    return this;
  }

   /**
   * Get collate
   * @return collate
  **/
  @ApiModelProperty(value = "")
  public CollateEnum getCollate() {
    return collate;
  }

  public void setCollate(CollateEnum collate) {
    this.collate = collate;
  }

  public GcpPrintProps color(ColorEnum color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @ApiModelProperty(value = "")
  public ColorEnum getColor() {
    return color;
  }

  public void setColor(ColorEnum color) {
    this.color = color;
  }

  public GcpPrintProps orientation(OrientationEnum orientation) {
    this.orientation = orientation;
    return this;
  }

   /**
   * Get orientation
   * @return orientation
  **/
  @ApiModelProperty(value = "")
  public OrientationEnum getOrientation() {
    return orientation;
  }

  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }

  public GcpPrintProps vendorCapabilities(List<Map<String, String>> vendorCapabilities) {
    this.vendorCapabilities = vendorCapabilities;
    return this;
  }

  public GcpPrintProps addVendorCapabilitiesItem(Map<String, String> vendorCapabilitiesItem) {
    if (this.vendorCapabilities == null) {
      this.vendorCapabilities = new ArrayList<Map<String, String>>();
    }
    this.vendorCapabilities.add(vendorCapabilitiesItem);
    return this;
  }

   /**
   * Get vendorCapabilities
   * @return vendorCapabilities
  **/
  @ApiModelProperty(value = "")
  public List<Map<String, String>> getVendorCapabilities() {
    return vendorCapabilities;
  }

  public void setVendorCapabilities(List<Map<String, String>> vendorCapabilities) {
    this.vendorCapabilities = vendorCapabilities;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GcpPrintProps gcpPrintProps = (GcpPrintProps) o;
    return Objects.equals(this.duplexing, gcpPrintProps.duplexing) &&
        Objects.equals(this.collate, gcpPrintProps.collate) &&
        Objects.equals(this.color, gcpPrintProps.color) &&
        Objects.equals(this.orientation, gcpPrintProps.orientation) &&
        Objects.equals(this.vendorCapabilities, gcpPrintProps.vendorCapabilities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duplexing, collate, color, orientation, vendorCapabilities);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GcpPrintProps {\n");
    
    sb.append("    duplexing: ").append(toIndentedString(duplexing)).append("\n");
    sb.append("    collate: ").append(toIndentedString(collate)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    vendorCapabilities: ").append(toIndentedString(vendorCapabilities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

