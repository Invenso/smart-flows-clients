/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * Part
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class Part {
  @SerializedName("template")
  private String template = null;

  @SerializedName("templateDisplayName")
  private String templateDisplayName = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BODY("body"),
    
    HEADER("header"),
    
    FOOTER("footer"),
    
    ADDITION("addition");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Gets or Sets _break
   */
  @JsonAdapter(BreakEnum.Adapter.class)
  public enum BreakEnum {
    NONE("none"),
    
    CONTINUOUS("continuous"),
    
    NEWCOLUMN("newColumn"),
    
    NEWPAGE("newPage"),
    
    EVENPAGE("evenPage"),
    
    ODDPAGE("oddPage");

    private String value;

    BreakEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BreakEnum fromValue(String text) {
      for (BreakEnum b : BreakEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BreakEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BreakEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BreakEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BreakEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("break")
  private BreakEnum _break = null;

  @SerializedName("linkHeaders")
  private Boolean linkHeaders = true;

  /**
   * Gets or Sets occurrence
   */
  @JsonAdapter(OccurrenceEnum.Adapter.class)
  public enum OccurrenceEnum {
    PRIMARY("primary"),
    
    FIRSTPAGE("firstPage"),
    
    EVENPAGE("evenPage");

    private String value;

    OccurrenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccurrenceEnum fromValue(String text) {
      for (OccurrenceEnum b : OccurrenceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OccurrenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccurrenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccurrenceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OccurrenceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("occurrence")
  private OccurrenceEnum occurrence = OccurrenceEnum.PRIMARY;

  @SerializedName("conditions")
  private ConditionGroup conditions = null;

  public Part template(String template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @ApiModelProperty(required = true, value = "")
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }

  public Part templateDisplayName(String templateDisplayName) {
    this.templateDisplayName = templateDisplayName;
    return this;
  }

   /**
   * Read-only, will contain the displayName of the linked template at the moment of retrieval
   * @return templateDisplayName
  **/
  @ApiModelProperty(value = "Read-only, will contain the displayName of the linked template at the moment of retrieval")
  public String getTemplateDisplayName() {
    return templateDisplayName;
  }

  public void setTemplateDisplayName(String templateDisplayName) {
    this.templateDisplayName = templateDisplayName;
  }

  public Part type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Part _break(BreakEnum _break) {
    this._break = _break;
    return this;
  }

   /**
   * Get _break
   * @return _break
  **/
  @ApiModelProperty(value = "")
  public BreakEnum getBreak() {
    return _break;
  }

  public void setBreak(BreakEnum _break) {
    this._break = _break;
  }

  public Part linkHeaders(Boolean linkHeaders) {
    this.linkHeaders = linkHeaders;
    return this;
  }

   /**
   * Get linkHeaders
   * @return linkHeaders
  **/
  @ApiModelProperty(value = "")
  public Boolean isLinkHeaders() {
    return linkHeaders;
  }

  public void setLinkHeaders(Boolean linkHeaders) {
    this.linkHeaders = linkHeaders;
  }

  public Part occurrence(OccurrenceEnum occurrence) {
    this.occurrence = occurrence;
    return this;
  }

   /**
   * Get occurrence
   * @return occurrence
  **/
  @ApiModelProperty(value = "")
  public OccurrenceEnum getOccurrence() {
    return occurrence;
  }

  public void setOccurrence(OccurrenceEnum occurrence) {
    this.occurrence = occurrence;
  }

  public Part conditions(ConditionGroup conditions) {
    this.conditions = conditions;
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @ApiModelProperty(value = "")
  public ConditionGroup getConditions() {
    return conditions;
  }

  public void setConditions(ConditionGroup conditions) {
    this.conditions = conditions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Part part = (Part) o;
    return Objects.equals(this.template, part.template) &&
        Objects.equals(this.templateDisplayName, part.templateDisplayName) &&
        Objects.equals(this.type, part.type) &&
        Objects.equals(this._break, part._break) &&
        Objects.equals(this.linkHeaders, part.linkHeaders) &&
        Objects.equals(this.occurrence, part.occurrence) &&
        Objects.equals(this.conditions, part.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(template, templateDisplayName, type, _break, linkHeaders, occurrence, conditions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Part {\n");
    
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templateDisplayName: ").append(toIndentedString(templateDisplayName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    _break: ").append(toIndentedString(_break)).append("\n");
    sb.append("    linkHeaders: ").append(toIndentedString(linkHeaders)).append("\n");
    sb.append("    occurrence: ").append(toIndentedString(occurrence)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

