/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * DatasetExtendedContent
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class DatasetExtendedContent {
  @SerializedName("name")
  private String name = null;

  @SerializedName("root")
  private String root = null;

  @SerializedName("datasets")
  private List<DatasetExtendedContentDatasets> datasets = null;

  @SerializedName("relations")
  private List<DatasetExtendedContentRelations> relations = null;

  @SerializedName("fields")
  private List<DatasetExtendedContentFields> fields = null;

  @SerializedName("views")
  private List<DatasetExtendedContentViews> views = null;

  public DatasetExtendedContent name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DatasetExtendedContent root(String root) {
    this.root = root;
    return this;
  }

   /**
   * Get root
   * @return root
  **/
  @ApiModelProperty(value = "")
  public String getRoot() {
    return root;
  }

  public void setRoot(String root) {
    this.root = root;
  }

  public DatasetExtendedContent datasets(List<DatasetExtendedContentDatasets> datasets) {
    this.datasets = datasets;
    return this;
  }

  public DatasetExtendedContent addDatasetsItem(DatasetExtendedContentDatasets datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<DatasetExtendedContentDatasets>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

   /**
   * Get datasets
   * @return datasets
  **/
  @ApiModelProperty(value = "")
  public List<DatasetExtendedContentDatasets> getDatasets() {
    return datasets;
  }

  public void setDatasets(List<DatasetExtendedContentDatasets> datasets) {
    this.datasets = datasets;
  }

  public DatasetExtendedContent relations(List<DatasetExtendedContentRelations> relations) {
    this.relations = relations;
    return this;
  }

  public DatasetExtendedContent addRelationsItem(DatasetExtendedContentRelations relationsItem) {
    if (this.relations == null) {
      this.relations = new ArrayList<DatasetExtendedContentRelations>();
    }
    this.relations.add(relationsItem);
    return this;
  }

   /**
   * Get relations
   * @return relations
  **/
  @ApiModelProperty(value = "")
  public List<DatasetExtendedContentRelations> getRelations() {
    return relations;
  }

  public void setRelations(List<DatasetExtendedContentRelations> relations) {
    this.relations = relations;
  }

  public DatasetExtendedContent fields(List<DatasetExtendedContentFields> fields) {
    this.fields = fields;
    return this;
  }

  public DatasetExtendedContent addFieldsItem(DatasetExtendedContentFields fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<DatasetExtendedContentFields>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @ApiModelProperty(value = "")
  public List<DatasetExtendedContentFields> getFields() {
    return fields;
  }

  public void setFields(List<DatasetExtendedContentFields> fields) {
    this.fields = fields;
  }

  public DatasetExtendedContent views(List<DatasetExtendedContentViews> views) {
    this.views = views;
    return this;
  }

  public DatasetExtendedContent addViewsItem(DatasetExtendedContentViews viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<DatasetExtendedContentViews>();
    }
    this.views.add(viewsItem);
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @ApiModelProperty(value = "")
  public List<DatasetExtendedContentViews> getViews() {
    return views;
  }

  public void setViews(List<DatasetExtendedContentViews> views) {
    this.views = views;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetExtendedContent datasetExtendedContent = (DatasetExtendedContent) o;
    return Objects.equals(this.name, datasetExtendedContent.name) &&
        Objects.equals(this.root, datasetExtendedContent.root) &&
        Objects.equals(this.datasets, datasetExtendedContent.datasets) &&
        Objects.equals(this.relations, datasetExtendedContent.relations) &&
        Objects.equals(this.fields, datasetExtendedContent.fields) &&
        Objects.equals(this.views, datasetExtendedContent.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, root, datasets, relations, fields, views);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetExtendedContent {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

