/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * JpsPrintProps
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class JpsPrintProps {
  /**
   * Gets or Sets duplexing
   */
  @JsonAdapter(DuplexingEnum.Adapter.class)
  public enum DuplexingEnum {
    DEFAULT("default"),
    
    ONESIDED("oneSided"),
    
    TWOSIDEDLONGEDGE("twoSidedLongEdge"),
    
    TWOSIDEDSHORTEDGE("twoSidedShortEdge");

    private String value;

    DuplexingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DuplexingEnum fromValue(String text) {
      for (DuplexingEnum b : DuplexingEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DuplexingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplexingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DuplexingEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DuplexingEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("duplexing")
  private DuplexingEnum duplexing = null;

  /**
   * Gets or Sets collate
   */
  @JsonAdapter(CollateEnum.Adapter.class)
  public enum CollateEnum {
    DEFAULT("default"),
    
    TRUE("true"),
    
    FALSE("false");

    private String value;

    CollateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CollateEnum fromValue(String text) {
      for (CollateEnum b : CollateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CollateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CollateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CollateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CollateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("collate")
  private CollateEnum collate = null;

  /**
   * Gets or Sets chromaticity
   */
  @JsonAdapter(ChromaticityEnum.Adapter.class)
  public enum ChromaticityEnum {
    DEFAULT("default"),
    
    MONOCHROME("monochrome"),
    
    COLOR("color");

    private String value;

    ChromaticityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChromaticityEnum fromValue(String text) {
      for (ChromaticityEnum b : ChromaticityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChromaticityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChromaticityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChromaticityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChromaticityEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chromaticity")
  private ChromaticityEnum chromaticity = null;

  /**
   * Gets or Sets orientation
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    DEFAULT("default"),
    
    PORTRAIT("portrait"),
    
    LANDSCAPE("landscape");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String text) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrientationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("orientation")
  private OrientationEnum orientation = null;

  @SerializedName("paperSource")
  private String paperSource = null;

  @SerializedName("firstPagePaperSource")
  private String firstPagePaperSource = null;

  @SerializedName("paperSize")
  private String paperSize = null;

  public JpsPrintProps duplexing(DuplexingEnum duplexing) {
    this.duplexing = duplexing;
    return this;
  }

   /**
   * Get duplexing
   * @return duplexing
  **/
  @ApiModelProperty(value = "")
  public DuplexingEnum getDuplexing() {
    return duplexing;
  }

  public void setDuplexing(DuplexingEnum duplexing) {
    this.duplexing = duplexing;
  }

  public JpsPrintProps collate(CollateEnum collate) {
    this.collate = collate;
    return this;
  }

   /**
   * Get collate
   * @return collate
  **/
  @ApiModelProperty(value = "")
  public CollateEnum getCollate() {
    return collate;
  }

  public void setCollate(CollateEnum collate) {
    this.collate = collate;
  }

  public JpsPrintProps chromaticity(ChromaticityEnum chromaticity) {
    this.chromaticity = chromaticity;
    return this;
  }

   /**
   * Get chromaticity
   * @return chromaticity
  **/
  @ApiModelProperty(value = "")
  public ChromaticityEnum getChromaticity() {
    return chromaticity;
  }

  public void setChromaticity(ChromaticityEnum chromaticity) {
    this.chromaticity = chromaticity;
  }

  public JpsPrintProps orientation(OrientationEnum orientation) {
    this.orientation = orientation;
    return this;
  }

   /**
   * Get orientation
   * @return orientation
  **/
  @ApiModelProperty(value = "")
  public OrientationEnum getOrientation() {
    return orientation;
  }

  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }

  public JpsPrintProps paperSource(String paperSource) {
    this.paperSource = paperSource;
    return this;
  }

   /**
   * Get paperSource
   * @return paperSource
  **/
  @ApiModelProperty(value = "")
  public String getPaperSource() {
    return paperSource;
  }

  public void setPaperSource(String paperSource) {
    this.paperSource = paperSource;
  }

  public JpsPrintProps firstPagePaperSource(String firstPagePaperSource) {
    this.firstPagePaperSource = firstPagePaperSource;
    return this;
  }

   /**
   * Get firstPagePaperSource
   * @return firstPagePaperSource
  **/
  @ApiModelProperty(value = "")
  public String getFirstPagePaperSource() {
    return firstPagePaperSource;
  }

  public void setFirstPagePaperSource(String firstPagePaperSource) {
    this.firstPagePaperSource = firstPagePaperSource;
  }

  public JpsPrintProps paperSize(String paperSize) {
    this.paperSize = paperSize;
    return this;
  }

   /**
   * Get paperSize
   * @return paperSize
  **/
  @ApiModelProperty(value = "")
  public String getPaperSize() {
    return paperSize;
  }

  public void setPaperSize(String paperSize) {
    this.paperSize = paperSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JpsPrintProps jpsPrintProps = (JpsPrintProps) o;
    return Objects.equals(this.duplexing, jpsPrintProps.duplexing) &&
        Objects.equals(this.collate, jpsPrintProps.collate) &&
        Objects.equals(this.chromaticity, jpsPrintProps.chromaticity) &&
        Objects.equals(this.orientation, jpsPrintProps.orientation) &&
        Objects.equals(this.paperSource, jpsPrintProps.paperSource) &&
        Objects.equals(this.firstPagePaperSource, jpsPrintProps.firstPagePaperSource) &&
        Objects.equals(this.paperSize, jpsPrintProps.paperSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duplexing, collate, chromaticity, orientation, paperSource, firstPagePaperSource, paperSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JpsPrintProps {\n");
    
    sb.append("    duplexing: ").append(toIndentedString(duplexing)).append("\n");
    sb.append("    collate: ").append(toIndentedString(collate)).append("\n");
    sb.append("    chromaticity: ").append(toIndentedString(chromaticity)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    paperSource: ").append(toIndentedString(paperSource)).append("\n");
    sb.append("    firstPagePaperSource: ").append(toIndentedString(firstPagePaperSource)).append("\n");
    sb.append("    paperSize: ").append(toIndentedString(paperSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

