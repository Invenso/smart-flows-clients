/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * DocGenSettingsResultHtml
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class DocGenSettingsResultHtml {
  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    EPUB("epub"),
    
    MHTML("mhtml"),
    
    HTML("html");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("format")
  private FormatEnum format = FormatEnum.HTML;

  @SerializedName("encoding")
  private String encoding = "UTF-8";

  /**
   * Specifies how headers and footers are output. None: Headers and footers are not exported. PerSection: Primary headers and footers are exported at the beginning and the end of each section. FirstSectionHeaderLastSectionFooter: Primary header of the first section is exported at the beginning of the document and primary footer is at the end. FirstPageheaderFooterPerSection: First page header and footer are exported at the beginning and the end of each section.
   */
  @JsonAdapter(ExportHeadersFootersEnum.Adapter.class)
  public enum ExportHeadersFootersEnum {
    FIRSTPAGEHEADERFOOTERPERSECTION("firstPageheaderFooterPerSection"),
    
    PERSECTION("perSection"),
    
    FIRSTSECTIONHEADERLASTSECTIONFOOTER("firstSectionHeaderLastSectionFooter"),
    
    NONE("none");

    private String value;

    ExportHeadersFootersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExportHeadersFootersEnum fromValue(String text) {
      for (ExportHeadersFootersEnum b : ExportHeadersFootersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ExportHeadersFootersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportHeadersFootersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExportHeadersFootersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ExportHeadersFootersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("exportHeadersFooters")
  private ExportHeadersFootersEnum exportHeadersFooters = ExportHeadersFootersEnum.PERSECTION;

  @SerializedName("exportPageMargins")
  private Boolean exportPageMargins = false;

  @SerializedName("exportPageSetup")
  private Boolean exportPageSetup = false;

  @SerializedName("exportTOCPageNumbers")
  private Boolean exportTOCPageNumbers = false;

  @SerializedName("exportRelativeFontSize")
  private Boolean exportRelativeFontSize = false;

  @SerializedName("imageResolution")
  private BigDecimal imageResolution = null;

  @SerializedName("exportImagesAsBase64")
  private Boolean exportImagesAsBase64 = false;

  @SerializedName("maintainLinkToExternalImages")
  private Boolean maintainLinkToExternalImages = true;

  @SerializedName("scaleImagesToShapeSize")
  private Boolean scaleImagesToShapeSize = true;

  public DocGenSettingsResultHtml format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @ApiModelProperty(value = "")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public DocGenSettingsResultHtml encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Specifies the encoding to use
   * @return encoding
  **/
  @ApiModelProperty(value = "Specifies the encoding to use")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }

  public DocGenSettingsResultHtml exportHeadersFooters(ExportHeadersFootersEnum exportHeadersFooters) {
    this.exportHeadersFooters = exportHeadersFooters;
    return this;
  }

   /**
   * Specifies how headers and footers are output. None: Headers and footers are not exported. PerSection: Primary headers and footers are exported at the beginning and the end of each section. FirstSectionHeaderLastSectionFooter: Primary header of the first section is exported at the beginning of the document and primary footer is at the end. FirstPageheaderFooterPerSection: First page header and footer are exported at the beginning and the end of each section.
   * @return exportHeadersFooters
  **/
  @ApiModelProperty(value = "Specifies how headers and footers are output. None: Headers and footers are not exported. PerSection: Primary headers and footers are exported at the beginning and the end of each section. FirstSectionHeaderLastSectionFooter: Primary header of the first section is exported at the beginning of the document and primary footer is at the end. FirstPageheaderFooterPerSection: First page header and footer are exported at the beginning and the end of each section.")
  public ExportHeadersFootersEnum getExportHeadersFooters() {
    return exportHeadersFooters;
  }

  public void setExportHeadersFooters(ExportHeadersFootersEnum exportHeadersFooters) {
    this.exportHeadersFooters = exportHeadersFooters;
  }

  public DocGenSettingsResultHtml exportPageMargins(Boolean exportPageMargins) {
    this.exportPageMargins = exportPageMargins;
    return this;
  }

   /**
   * Specifies whether page margins is exported
   * @return exportPageMargins
  **/
  @ApiModelProperty(value = "Specifies whether page margins is exported")
  public Boolean isExportPageMargins() {
    return exportPageMargins;
  }

  public void setExportPageMargins(Boolean exportPageMargins) {
    this.exportPageMargins = exportPageMargins;
  }

  public DocGenSettingsResultHtml exportPageSetup(Boolean exportPageSetup) {
    this.exportPageSetup = exportPageSetup;
    return this;
  }

   /**
   * Specifies whether page setup is exported
   * @return exportPageSetup
  **/
  @ApiModelProperty(value = "Specifies whether page setup is exported")
  public Boolean isExportPageSetup() {
    return exportPageSetup;
  }

  public void setExportPageSetup(Boolean exportPageSetup) {
    this.exportPageSetup = exportPageSetup;
  }

  public DocGenSettingsResultHtml exportTOCPageNumbers(Boolean exportTOCPageNumbers) {
    this.exportTOCPageNumbers = exportTOCPageNumbers;
    return this;
  }

   /**
   * Specifies whether to write page numbers to table of contents
   * @return exportTOCPageNumbers
  **/
  @ApiModelProperty(value = "Specifies whether to write page numbers to table of contents")
  public Boolean isExportTOCPageNumbers() {
    return exportTOCPageNumbers;
  }

  public void setExportTOCPageNumbers(Boolean exportTOCPageNumbers) {
    this.exportTOCPageNumbers = exportTOCPageNumbers;
  }

  public DocGenSettingsResultHtml exportRelativeFontSize(Boolean exportRelativeFontSize) {
    this.exportRelativeFontSize = exportRelativeFontSize;
    return this;
  }

   /**
   * Specifies whether font sizes should be output in relative units
   * @return exportRelativeFontSize
  **/
  @ApiModelProperty(value = "Specifies whether font sizes should be output in relative units")
  public Boolean isExportRelativeFontSize() {
    return exportRelativeFontSize;
  }

  public void setExportRelativeFontSize(Boolean exportRelativeFontSize) {
    this.exportRelativeFontSize = exportRelativeFontSize;
  }

  public DocGenSettingsResultHtml imageResolution(BigDecimal imageResolution) {
    this.imageResolution = imageResolution;
    return this;
  }

   /**
   * Specifies the output resolution for images in dpi
   * @return imageResolution
  **/
  @ApiModelProperty(value = "Specifies the output resolution for images in dpi")
  public BigDecimal getImageResolution() {
    return imageResolution;
  }

  public void setImageResolution(BigDecimal imageResolution) {
    this.imageResolution = imageResolution;
  }

  public DocGenSettingsResultHtml exportImagesAsBase64(Boolean exportImagesAsBase64) {
    this.exportImagesAsBase64 = exportImagesAsBase64;
    return this;
  }

   /**
   * Specifies whether images are saved in Base64
   * @return exportImagesAsBase64
  **/
  @ApiModelProperty(value = "Specifies whether images are saved in Base64")
  public Boolean isExportImagesAsBase64() {
    return exportImagesAsBase64;
  }

  public void setExportImagesAsBase64(Boolean exportImagesAsBase64) {
    this.exportImagesAsBase64 = exportImagesAsBase64;
  }

  public DocGenSettingsResultHtml maintainLinkToExternalImages(Boolean maintainLinkToExternalImages) {
    this.maintainLinkToExternalImages = maintainLinkToExternalImages;
    return this;
  }

   /**
   * Specifies whether original URL should be used as the URL of the linked images
   * @return maintainLinkToExternalImages
  **/
  @ApiModelProperty(value = "Specifies whether original URL should be used as the URL of the linked images")
  public Boolean isMaintainLinkToExternalImages() {
    return maintainLinkToExternalImages;
  }

  public void setMaintainLinkToExternalImages(Boolean maintainLinkToExternalImages) {
    this.maintainLinkToExternalImages = maintainLinkToExternalImages;
  }

  public DocGenSettingsResultHtml scaleImagesToShapeSize(Boolean scaleImagesToShapeSize) {
    this.scaleImagesToShapeSize = scaleImagesToShapeSize;
    return this;
  }

   /**
   * Specifies whether images are scaled to the bounding shape size when exporting
   * @return scaleImagesToShapeSize
  **/
  @ApiModelProperty(value = "Specifies whether images are scaled to the bounding shape size when exporting")
  public Boolean isScaleImagesToShapeSize() {
    return scaleImagesToShapeSize;
  }

  public void setScaleImagesToShapeSize(Boolean scaleImagesToShapeSize) {
    this.scaleImagesToShapeSize = scaleImagesToShapeSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocGenSettingsResultHtml docGenSettingsResultHtml = (DocGenSettingsResultHtml) o;
    return Objects.equals(this.format, docGenSettingsResultHtml.format) &&
        Objects.equals(this.encoding, docGenSettingsResultHtml.encoding) &&
        Objects.equals(this.exportHeadersFooters, docGenSettingsResultHtml.exportHeadersFooters) &&
        Objects.equals(this.exportPageMargins, docGenSettingsResultHtml.exportPageMargins) &&
        Objects.equals(this.exportPageSetup, docGenSettingsResultHtml.exportPageSetup) &&
        Objects.equals(this.exportTOCPageNumbers, docGenSettingsResultHtml.exportTOCPageNumbers) &&
        Objects.equals(this.exportRelativeFontSize, docGenSettingsResultHtml.exportRelativeFontSize) &&
        Objects.equals(this.imageResolution, docGenSettingsResultHtml.imageResolution) &&
        Objects.equals(this.exportImagesAsBase64, docGenSettingsResultHtml.exportImagesAsBase64) &&
        Objects.equals(this.maintainLinkToExternalImages, docGenSettingsResultHtml.maintainLinkToExternalImages) &&
        Objects.equals(this.scaleImagesToShapeSize, docGenSettingsResultHtml.scaleImagesToShapeSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, encoding, exportHeadersFooters, exportPageMargins, exportPageSetup, exportTOCPageNumbers, exportRelativeFontSize, imageResolution, exportImagesAsBase64, maintainLinkToExternalImages, scaleImagesToShapeSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocGenSettingsResultHtml {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    exportHeadersFooters: ").append(toIndentedString(exportHeadersFooters)).append("\n");
    sb.append("    exportPageMargins: ").append(toIndentedString(exportPageMargins)).append("\n");
    sb.append("    exportPageSetup: ").append(toIndentedString(exportPageSetup)).append("\n");
    sb.append("    exportTOCPageNumbers: ").append(toIndentedString(exportTOCPageNumbers)).append("\n");
    sb.append("    exportRelativeFontSize: ").append(toIndentedString(exportRelativeFontSize)).append("\n");
    sb.append("    imageResolution: ").append(toIndentedString(imageResolution)).append("\n");
    sb.append("    exportImagesAsBase64: ").append(toIndentedString(exportImagesAsBase64)).append("\n");
    sb.append("    maintainLinkToExternalImages: ").append(toIndentedString(maintainLinkToExternalImages)).append("\n");
    sb.append("    scaleImagesToShapeSize: ").append(toIndentedString(scaleImagesToShapeSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

