/*
 * Xpertdoc SmartFlows
 * This describes the REST api for one Xpertdoc SmartFlows project
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package xpertdoc.smartflows.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * RestoreContext
 */
@javax.annotation.Generated(value = "xpertdoc.smartflows.codegen.languages.JavaClientCodegen", date = "2018-05-22T10:07:28.195+02:00")
public class RestoreContext {
  @SerializedName("archive")
  private byte[] archive = null;

  @SerializedName("dependenciesMap")
  private List<DependencyMapping> dependenciesMap = null;

  @SerializedName("overwriteExisting")
  private Boolean overwriteExisting = false;

  /**
   * Gets or Sets includeType
   */
  @JsonAdapter(IncludeTypeEnum.Adapter.class)
  public enum IncludeTypeEnum {
    ALL("all"),
    
    LISTED("listed"),
    
    ALLBUTLISTED("allButListed");

    private String value;

    IncludeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludeTypeEnum fromValue(String text) {
      for (IncludeTypeEnum b : IncludeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IncludeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IncludeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("includeType")
  private IncludeTypeEnum includeType = IncludeTypeEnum.ALL;

  @SerializedName("listedItems")
  private List<IdWithName> listedItems = null;

  public RestoreContext archive(byte[] archive) {
    this.archive = archive;
    return this;
  }

   /**
   * Get archive
   * @return archive
  **/
  @ApiModelProperty(value = "")
  public byte[] getArchive() {
    return archive;
  }

  public void setArchive(byte[] archive) {
    this.archive = archive;
  }

  public RestoreContext dependenciesMap(List<DependencyMapping> dependenciesMap) {
    this.dependenciesMap = dependenciesMap;
    return this;
  }

  public RestoreContext addDependenciesMapItem(DependencyMapping dependenciesMapItem) {
    if (this.dependenciesMap == null) {
      this.dependenciesMap = new ArrayList<DependencyMapping>();
    }
    this.dependenciesMap.add(dependenciesMapItem);
    return this;
  }

   /**
   * Get dependenciesMap
   * @return dependenciesMap
  **/
  @ApiModelProperty(value = "")
  public List<DependencyMapping> getDependenciesMap() {
    return dependenciesMap;
  }

  public void setDependenciesMap(List<DependencyMapping> dependenciesMap) {
    this.dependenciesMap = dependenciesMap;
  }

  public RestoreContext overwriteExisting(Boolean overwriteExisting) {
    this.overwriteExisting = overwriteExisting;
    return this;
  }

   /**
   * Get overwriteExisting
   * @return overwriteExisting
  **/
  @ApiModelProperty(value = "")
  public Boolean isOverwriteExisting() {
    return overwriteExisting;
  }

  public void setOverwriteExisting(Boolean overwriteExisting) {
    this.overwriteExisting = overwriteExisting;
  }

  public RestoreContext includeType(IncludeTypeEnum includeType) {
    this.includeType = includeType;
    return this;
  }

   /**
   * Get includeType
   * @return includeType
  **/
  @ApiModelProperty(value = "")
  public IncludeTypeEnum getIncludeType() {
    return includeType;
  }

  public void setIncludeType(IncludeTypeEnum includeType) {
    this.includeType = includeType;
  }

  public RestoreContext listedItems(List<IdWithName> listedItems) {
    this.listedItems = listedItems;
    return this;
  }

  public RestoreContext addListedItemsItem(IdWithName listedItemsItem) {
    if (this.listedItems == null) {
      this.listedItems = new ArrayList<IdWithName>();
    }
    this.listedItems.add(listedItemsItem);
    return this;
  }

   /**
   * Get listedItems
   * @return listedItems
  **/
  @ApiModelProperty(value = "")
  public List<IdWithName> getListedItems() {
    return listedItems;
  }

  public void setListedItems(List<IdWithName> listedItems) {
    this.listedItems = listedItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreContext restoreContext = (RestoreContext) o;
    return Objects.equals(this.archive, restoreContext.archive) &&
        Objects.equals(this.dependenciesMap, restoreContext.dependenciesMap) &&
        Objects.equals(this.overwriteExisting, restoreContext.overwriteExisting) &&
        Objects.equals(this.includeType, restoreContext.includeType) &&
        Objects.equals(this.listedItems, restoreContext.listedItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archive, dependenciesMap, overwriteExisting, includeType, listedItems);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreContext {\n");
    
    sb.append("    archive: ").append(toIndentedString(archive)).append("\n");
    sb.append("    dependenciesMap: ").append(toIndentedString(dependenciesMap)).append("\n");
    sb.append("    overwriteExisting: ").append(toIndentedString(overwriteExisting)).append("\n");
    sb.append("    includeType: ").append(toIndentedString(includeType)).append("\n");
    sb.append("    listedItems: ").append(toIndentedString(listedItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

